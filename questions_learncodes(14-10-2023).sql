-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Oct 14, 2023 at 12:47 AM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `pyshikho-django`
--

-- --------------------------------------------------------

--
-- Table structure for table `questions_learncodes`
--

CREATE TABLE `questions_learncodes` (
  `id` bigint(20) NOT NULL,
  `codes` longtext DEFAULT NULL,
  `learn_id` bigint(20) NOT NULL,
  `link` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `questions_learncodes`
--

INSERT INTO `questions_learncodes` (`id`, `codes`, `learn_id`, `link`) VALUES
(1, 'print(\"Hello, World!\")', 1, 'demo_helloworld'),
(2, 'print(\"Hello, World!\")', 2, 'demo_helloworld2'),
(3, 'if 5 > 2:\r\n    print(\"Five is greater than two!\")', 3, 'demo_indentation'),
(4, 'if 5 > 2:\r\nprint(\"Five is greater than two!\")', 3, 'demo_indentation_test'),
(5, 'if 5 > 2:\r\n print(\"Five is greater than two!\")  \r\nif 5 > 2:\r\n        print(\"Five is greater than two!\")', 3, 'demo_indentation2'),
(6, 'if 5 > 2:\r\n print(\"Five is greater than two!\") \r\n        print(\"Five is greater than two!\")', 3, 'demo_indentation2_error'),
(7, 'x = 5\r\ny = \"Hello, World!\"\r\n\r\nprint(x)\r\nprint(y)', 3, 'demo_syntax_variables'),
(8, '#This is a comment.\r\nprint(\"Hello, World!\")', 3, 'demo_comment'),
(9, '#This is a comment.\r\nprint(\"Hello, World!\")', 4, 'demo_comment1'),
(10, 'print(\"Hello, World!\") #This is a comment.', 4, 'demo_comment2'),
(11, '#print(\"Hello, World!\")\r\nprint(\"Cheers, Mate!\")', 4, 'demo_comment3'),
(12, '#This is a comment\r\n#written in\r\n#more than just one line\r\nprint(\"Hello, World!\")', 4, 'demo_comment4'),
(13, '\"\"\"\r\nThis is a comment\r\nwritten in\r\nmore than just one line\r\n\"\"\"\r\nprint(\"Hello, World!\")', 4, 'demo_comment5'),
(14, 'x = 5\r\ny = \"John\"\r\nprint(x)\r\nprint(y)', 5, 'demo_variables1'),
(15, 'x = 4\r\nx = \"Sally\"\r\nprint(x)', 5, 'demo_variables2'),
(16, 'x = str(3)\r\ny = int(3)\r\nz = float(3)\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 5, 'demo_variables_casting'),
(17, 'x = 5\r\ny = \"John\"\r\nprint(type(x))\r\nprint(type(y))', 5, 'demo_variables_type'),
(18, 'x = \"John\"\r\nprint(x)\r\n#double quotes are the same as single quotes:\r\nx = \'John\'\r\nprint(x)', 5, 'demo_variables7'),
(19, 'a = 4\r\nA = \"Sally\"\r\n#A will not overwrite a\r\nprint(a)\r\nprint(A)', 5, 'demo_variables8'),
(20, 'myvar = \"John\"\r\nmy_var = \"John\"\r\n_my_var = \"John\"\r\nmyVar = \"John\"\r\nMYVAR = \"John\"\r\nmyvar2 = \"John\"\r\n\r\n\r\nprint(myvar)\r\nprint(my_var)\r\nprint(_my_var)\r\nprint(myVar)\r\nprint(MYVAR)\r\nprint(myvar2)', 6, 'demo_variable_names_legal'),
(21, '2myvar = \"John\"\r\nmy-var = \"John\"\r\nmy var = \"John\"\r\n\r\n#This example will produce an error in the result', 6, 'demo_variable_names_error'),
(22, 'x, y, z = \"Orange\", \"Banana\", \"Cherry\"\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 7, 'demo_variables9'),
(23, 'x = y = z = \"Orange\"\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 7, 'demo_variables10'),
(24, 'fruits = [\"apple\", \"banana\", \"cherry\"]\r\nx, y, z = fruits\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 7, 'demo_variables_unpack'),
(25, 'x = \"Python is awesome\"\r\nprint(x)', 8, 'demo_variables_print'),
(26, 'x = \"Python\"\r\ny = \"is\"\r\nz = \"awesome\"\r\nprint(x, y, z)', 8, 'demo_variables3'),
(27, 'x = \"Python \"\r\ny = \"is \"\r\nz = \"awesome\"\r\nprint(x + y + z)', 8, 'demo_variables4'),
(28, 'x = 5\r\ny = 10\r\nprint(x + y)', 8, 'demo_variables5'),
(29, 'x = 5\r\ny = \"John\"\r\nprint(x + y)', 8, 'demo_variables_test'),
(30, 'x = 5\r\ny = \"John\"\r\nprint(x, y)', 8, 'demo_variables_comma'),
(31, 'x = \"awesome\"\r\n\r\ndef myfunc( ):\r\n    print(\"Python is \" + x)\r\n\r\nmyfunc( )', 9, 'demo_variables_global'),
(32, 'x = \"awesome\"\r\n\r\ndef myfunc( ):\r\n    x = \"fantastic\"\r\n    print(\"Python is \" + x)\r\n\r\nmyfunc( )\r\n\r\nprint(\"Python is \" + x)', 9, 'demo_variables_global2'),
(33, 'def myfunc( ):\r\n    global x\r\n    x = \"fantastic\"\r\n\r\nmyfunc( )\r\n\r\nprint(\"Python is \" + x)', 9, 'demo_variables_global3'),
(34, 'x = \"awesome\"\r\n\r\ndef myfunc( ):\r\n    global x\r\n    x = \"fantastic\"\r\n\r\nmyfunc( )\r\n\r\nprint(\"Python is \" + x)', 9, 'demo_variables_global4'),
(35, 'x = int(1)\r\ny = int(2.8)\r\nz = int(\"3\")\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 12, 'demo_casting_int'),
(36, 'x = float(1)\r\ny = float(2.8)\r\nz = float(\"3\")\r\nw = float(\"4.2\")\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)\r\nprint(w)', 12, 'demo_float'),
(37, 'x = str(\"s1\")\r\ny = str(2)\r\nz = str(3.0)\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)', 12, 'demo_string'),
(38, '#You can use double or single quotes:\r\n\r\nprint(\"Hello\")\r\nprint(\'Hello\')', 13, 'demo_string_literal'),
(39, 'a = \"Hello\"\r\nprint(a)', 13, 'demo_string_var'),
(40, 'a = \"\"\"Lorem ipsum dolor sit amet,\r\nconsectetur adipiscing elit,\r\nsed do eiusmod tempor incididunt\r\nut labore et dolore magna aliqua.\"\"\"\r\n\r\nprint(a)', 13, 'demo_string_multi'),
(41, 'a = \'\'\'Lorem ipsum dolor sit amet,\r\nconsectetur adipiscing elit,\r\nsed do eiusmod tempor incididunt\r\nut labore et dolore magna aliqua.\'\'\'\r\n\r\nprint(a)', 13, 'demo_string_multi2'),
(42, 'a = \"Hello, World!\"\r\nprint(a[1])', 13, 'demo_string1'),
(43, 'for x in \"banana\":\r\n    print(x)', 13, 'demo_for_string'),
(44, 'a = \"Hello, World!\"\r\n\r\nprint(len(a))', 13, 'demo_string_len'),
(45, 'txt = \"The best things in life are free!\"\r\nprint(\"free\" in txt)', 13, 'demo_string_is_in'),
(46, 'txt = \"The best things in life are free!\"\r\nif \"free\" in txt:\r\n    print(\"Yes, \'free\' is present.\")', 13, 'demo_string_if_in'),
(47, 'txt = \"The best things in life are free!\"\r\nprint(\"expensive\" not in txt)', 13, 'demo_string_is_not_in'),
(48, 'txt = \"The best things in life are free!\"\r\nif \"expensive\" not in txt:\r\n    print(\"No, \'expensive\' is NOT present.\")', 13, 'demo_string_if_not_in'),
(49, 'b = \"Hello, World!\"\r\nprint(b[2:5])', 14, 'demo_string2'),
(50, 'b = \"Hello, World!\"\r\nprint(b[:5])', 14, 'demo_string_slice_start'),
(51, 'b = \"Hello, World!\"\r\nprint(b[2:])', 14, 'demo_string_slice_end'),
(52, 'b = \"Hello, World!\"\r\nprint(b[-5:-2])', 14, 'demo_string_negativeindex'),
(53, 'a = \"Hello, World!\"\r\nprint(a.upper( ))', 15, 'demo_string_upper'),
(54, 'a = \"Hello, World!\"\r\nprint(a.lower( ))', 15, 'demo_string_lower'),
(55, 'a = \" Hello, World! \"\r\nprint(a.strip( ))', 15, 'demo_string_strip'),
(56, 'a = \"Hello, World!\"\r\nprint(a.replace(\"H\", \"J\"))', 15, 'demo_string_replace'),
(57, 'a = \"Hello, World!\"\r\nb = a.split(\",\")\r\nprint(b)', 15, 'demo_string_split'),
(58, 'a = \"Hello\"\r\nb = \"World\"\r\nc = a + b\r\nprint(c)', 16, 'demo_string_concat'),
(59, 'a = \"Hello\"\r\nb = \"World\"\r\nc = a + \" \" + b\r\nprint(c)', 16, 'demo_string_concat2'),
(60, 'age = 36\r\ntxt = \"My name is John, I am \" + age\r\nprint(txt)', 17, 'demo_string_format_error'),
(61, 'age = 36\r\ntxt = \"My name is John, and I am {}\"\r\nprint(txt.format(age))', 17, 'demo_string_format1'),
(62, 'quantity = 3\r\nitemno = 567\r\nprice = 49.95\r\nmyorder = \"I want { } pieces of item { } for { } dollars.\"\r\nprint(myorder.format(quantity, itemno, price))', 17, 'demo_string_format2'),
(63, 'quantity = 3\r\nitemno = 567\r\nprice = 49.95\r\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\r\nprint(myorder.format(quantity, itemno, price))', 17, 'demo_string_format3'),
(64, 'txt = \"We are the so-called \"Vikings\" from the north.\"\r\n\r\n#You will get an error if you use double quotes inside a string that are surrounded by double quotes:', 18, 'demo_string_escape_error'),
(65, 'txt = \"We are the so-called \\\"Vikings\\\" from the north.\"\r\nprint(txt)', 18, 'demo_string_escape'),
(66, 'txt = \'It\\\'s alright.\'\r\nprint(txt)', 18, 'demo_string_escape2'),
(67, 'txt = \"This will insert one \\\\ (backslash).\"\r\nprint(txt)', 18, 'demo_string_backslash'),
(68, 'txt = \"Hello\\nWorld!\"\r\nprint(txt)', 18, 'demo_string_newline'),
(69, 'txt = \"Hello\\rWorld!\"\r\nprint(txt)', 18, 'demo_string_r'),
(70, 'txt = \"Hello\\tWorld!\"\r\nprint(txt)', 18, 'demo_string_t'),
(71, '#This example erases one character (backspace):\r\ntxt = \"Hello \\bWorld!\"\r\nprint(txt)', 18, 'demo_string_b'),
(72, '#A backslash followed by three integers will result in a octal value:\r\ntxt = \"\\110\\145\\154\\154\\157\"\r\nprint(txt)', 18, 'demo_string_octal'),
(73, '#A backslash followed by an \'x\' and a hex number represents a hex value:\r\ntxt = \"\\x48\\x65\\x6c\\x6c\\x6f\"\r\nprint(txt)', 18, 'demo_string_hex'),
(74, 'print(10 > 9)\r\nprint(10 == 9)\r\nprint(10 < 9)', 20, 'demo_booleans1'),
(75, 'a = 200\r\nb = 33\r\n\r\nif b > a:\r\n    print(\"b is greater than a\")\r\nelse:\r\n    print(\"b is not greater than a\")', 20, 'demo_booleans2'),
(76, 'print(bool(\"Hello\"))\r\nprint(bool(15))', 20, 'demo_booleans3'),
(77, 'x = \"Hello\"\r\ny = 15\r\n\r\nprint(bool(x))\r\nprint(bool(y))', 20, 'demo_booleans4'),
(78, 'print(bool(\"abc\"))\r\nprint(bool(123))\r\nprint(bool([\"apple\", \"cherry\", \"banana\"]))', 20, 'demo_booleans5'),
(79, 'print(bool(False))\r\nprint(bool(None))\r\nprint(bool(0))\r\nprint(bool(\" \"))\r\nprint(bool(( )))\r\nprint(bool([ ]))\r\nprint(bool({ }))', 20, 'demo_booleans6'),
(80, 'class myclass( ):\r\n    def __len__(self):\r\n        return 0\r\n\r\nmyobj = myclass( )\r\nprint(bool(myobj))', 20, 'demo_booleans7'),
(81, 'def myFunction( ) :\r\n    return True\r\n\r\nprint(myFunction( ))', 20, 'demo_boolean_return'),
(82, 'def myFunction( ) :\r\n    return True\r\n\r\nif myFunction( ):\r\n    print(\"YES!\")\r\nelse:\r\n    print(\"NO!\")', 20, 'demo_boolean_return2'),
(83, 'x = 200\r\nprint(isinstance(x, int))', 20, 'demo_booleans8'),
(84, 'print(10 + 5)', 21, 'demo_oper'),
(85, 'x = 5\r\ny = 3\r\n\r\nprint(x + y)', 21, 'demo_oper_add'),
(86, 'x = 5\r\ny = 3\r\n\r\nprint(x - y)', 21, 'demo_oper_sub'),
(87, 'x = 5\r\ny = 3\r\n\r\nprint(x * y)', 21, 'demo_oper_mult'),
(88, 'x = 12\r\ny = 3\r\n\r\nprint(x / y)', 21, 'demo_oper_div'),
(89, 'x = 5\r\ny = 2\r\n\r\nprint(x % y)', 21, 'demo_oper_mod'),
(90, 'x = 2\r\ny = 5\r\n\r\nprint(x ** y) #same as 2*2*2*2*2', 21, 'demo_oper_exp'),
(91, 'x = 15\r\ny = 2\r\n\r\nprint(x // y)\r\n\r\n#the floor division // rounds the result down to the nearest whole number', 21, 'demo_oper_floordiv'),
(92, 'x = 5\r\n\r\nprint(x)', 21, 'demo_oper_ass1'),
(93, 'x = 5\r\n\r\nx += 3\r\n\r\nprint(x)', 21, 'demo_oper_ass2'),
(94, 'x = 5\r\n\r\nx -= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass3'),
(95, 'x = 5\r\n\r\nx *= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass4'),
(96, 'x = 5\r\n\r\nx /= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass5'),
(97, 'x = 5\r\n\r\nx%=3\r\n\r\nprint(x)', 21, 'demo_oper_ass6'),
(98, 'x = 5\r\n\r\nx//=3\r\n\r\nprint(x)', 21, 'demo_oper_ass7'),
(99, 'x = 5\r\n\r\nx **= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass8'),
(100, 'x = 5\r\n\r\nx &= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass9'),
(101, 'x = 5\r\n\r\nx |= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass10'),
(102, 'x = 5\r\n\r\nx ^= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass11'),
(103, 'x = 5\r\n\r\nx >>= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass12'),
(104, 'x = 5\r\n\r\nx <<= 3\r\n\r\nprint(x)', 21, 'demo_oper_ass13'),
(105, 'x = 5\r\ny = 3\r\n\r\nprint(x == y)\r\n\r\n# returns False because 5 is not equal to 3', 21, 'demo_oper_compare1'),
(106, 'x = 5\r\ny = 3\r\n\r\nprint(x != y)\r\n\r\n# returns True because 5 is not equal to 3', 21, 'demo_oper_compare2'),
(107, 'x = 5\r\ny = 3\r\n\r\nprint(x > y)\r\n\r\n# returns True because 5 is greater than 3', 21, 'demo_oper_compare4'),
(108, 'x = 5\r\ny = 3\r\n\r\nprint(x < y)\r\n\r\n# returns False because 5 is not less than 3', 21, 'demo_oper_compare5'),
(109, 'x = 5\r\ny = 3\r\n\r\nprint(x >= y)\r\n\r\n# returns True because five is greater, or equal, to 3', 21, 'demo_oper_compare6'),
(110, 'x = 5\r\ny = 3\r\n\r\nprint(x <= y)\r\n\r\n# returns False because 5 is neither less than or equal to 3', 21, 'demo_oper_compare7'),
(111, 'x = 5\r\n\r\nprint(x > 3 and x < 10)\r\n\r\n# returns True because 5 is greater than 3 AND 5 is less than 10', 21, 'demo_oper_logical1'),
(112, 'x = 5\r\n\r\nprint(x > 3 or x < 4)\r\n\r\n# returns True because one of the conditions are true (5 is greater than 3, but 5 is not less than 4)', 21, 'demo_oper_logical2'),
(113, 'x = 5\r\n\r\nprint(not(x > 3 and x < 10))\r\n\r\n# returns False because not is used to reverse the result', 21, 'demo_oper_logical3'),
(114, 'x = [\"apple\", \"banana\"]\r\ny = [\"apple\", \"banana\"]\r\nz = x\r\n\r\nprint(x is z)\r\n\r\n# returns True because z is the same object as x\r\n\r\nprint(x is y)\r\n\r\n# returns False because x is not the same object as y, even if they have the same content\r\n\r\nprint(x == y)\r\n\r\n# to demonstrate the difference betweeen \"is\" and \"==\": this comparison returns True because x is equal to y', 21, 'demo_oper_identity1'),
(115, 'x = [\"apple\", \"banana\"]\r\ny = [\"apple\", \"banana\"]\r\nz = x\r\n\r\nprint(x is not z)\r\n\r\n# returns False because z is the same object as x\r\n\r\nprint(x is not y)\r\n\r\n# returns True because x is not the same object as y, even if they have the same content\r\n\r\nprint(x != y)\r\n\r\n# to demonstrate the difference betweeen \"is not\" and \"!=\": this comparison returns False because x is equal to y', 21, 'demo_oper_identity2'),
(116, 'x = [\"apple\", \"banana\"]\r\n\r\nprint(\"banana\" in x)\r\n\r\n# returns True because a sequence with the value \"banana\" is in the list', 21, 'demo_oper_membership1'),
(117, 'x = [\"apple\", \"banana\"]\r\n\r\nprint(\"pineapple\" not in x)\r\n\r\n# returns True because a sequence with the value \"pineapple\" is not in the list', 21, 'demo_oper_membership2'),
(118, 'print(6 & 3)\r\n\r\n\r\n\"\"\"\r\nThe & operator compares each bit and set it to 1 if both are 1, otherwise it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n2 = 0000000000000010\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_oper_and'),
(119, 'print(6 | 3)\r\n\r\n\r\n\"\"\"\r\nThe | operator compares each bit and set it to 1 if one or both is 1, otherwise it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n7 = 0000000000000111\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_oper_or'),
(120, 'print(6 ^ 3)\r\n\r\n\r\n\"\"\"\r\nThe ^ operator compares each bit and set it to 1 if only one is 1, otherwise (if both are 1 or both are 0) it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n5 = 0000000000000101\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_oper_xor'),
(121, 'print(~3)\r\n\r\n\r\n\"\"\"\r\nThe ~ operator inverts each bit (0 becomes 1 and 1 becomes 0).\r\n\r\nInverted 3 becomes -4:\r\n 3 = 0000000000000011\r\n-4 = 1111111111111100\r\n\r\nDecimal numbers and their binary values:\r\n 4 = 0000000000000100\r\n 3 = 0000000000000011\r\n 2 = 0000000000000010\r\n 1 = 0000000000000001\r\n 0 = 0000000000000000\r\n-1 = 1111111111111111\r\n-2 = 1111111111111110\r\n-3 = 1111111111111101\r\n-4 = 1111111111111100\r\n\"\"\"', 21, 'demo_oper_not'),
(122, 'print(3 << 2)\r\n\r\n\r\n\"\"\"\r\nThe << operator inserts the specified number of 0\'s (in this case 2) from the right and let the same amount of leftmost bits fall off:\r\n\r\nIf you push 00 in from the left:\r\n 3 = 0000000000000011\r\nbecomes\r\n12 = 0000000000001100\r\n\r\nDecimal numbers and their binary values:\r\n 0 = 0000000000000000\r\n 1 = 0000000000000001\r\n 2 = 0000000000000010\r\n 3 = 0000000000000011\r\n 4 = 0000000000000100\r\n 5 = 0000000000000101\r\n 6 = 0000000000000110\r\n 7 = 0000000000000111\r\n 8 = 0000000000001000\r\n 9 = 0000000000001001\r\n10 = 0000000000001010\r\n11 = 0000000000001011\r\n12 = 0000000000001100\r\n\"\"\"', 21, 'demo_oper_left_shift'),
(123, 'print(8 >> 2)\r\n\r\n\r\n\"\"\"\r\nThe >> operator moves each bit the specified number of times to the right. Empty holes at the left are filled with 0\'s.\r\n\r\nIf you move each bit 2 times to the right, 8 becomes 2:\r\n 8 = 0000000000001000\r\nbecomes\r\n 2 = 0000000000000010\r\n\r\nDecimal numbers and their binary values:\r\n 0 = 0000000000000000\r\n 1 = 0000000000000001\r\n 2 = 0000000000000010\r\n 3 = 0000000000000011\r\n 4 = 0000000000000100\r\n 5 = 0000000000000101\r\n 6 = 0000000000000110\r\n 7 = 0000000000000111\r\n 8 = 0000000000001000\r\n 9 = 0000000000001001\r\n10 = 0000000000001010\r\n11 = 0000000000001011\r\n12 = 0000000000001100\r\n\"\"\"', 21, 'demo_oper_right_shift'),
(124, 'print((6 + 3) - (6 + 3))\r\n\r\n\"\"\"\r\nParenthesis have the highest precedence, and need to be evaluated first.\r\nThe calculation above reads 9 - 9 = 0\r\n\"\"\"', 21, 'demo_precedence_parentheses'),
(125, 'print(100 + 5 * 3)\r\n\r\n\"\"\"\r\nMultiplication has higher precedence than addition, and needs to be evaluated first.\r\nThe calculation above reads 100 + 15 = 115\r\n\"\"\"', 21, 'demo_precedence_multiplication'),
(126, 'print((6 + 3) - (6 + 3))\r\n\r\n\"\"\"\r\nParenthesis have the highest precedence, and need to be evaluated first.\r\nThe calculation above reads 9 - 9 = 0\r\n\"\"\"', 21, 'demo_precedence_parentheses1'),
(127, 'print(100 - 3 ** 3)\r\n\r\n\"\"\"\r\nExponentiation has higher precedence than subtraction, and needs to be evaluated first.\r\nThe calculation above reads 100 - 27 = 73\r\n\"\"\"', 21, 'demo_precedence_exponent'),
(128, 'print(100 + ~3)\r\n\r\n\"\"\"\r\nBitwise NOT has higher precedence than addition, and needs to be evaluated first.\r\nThe calculation above reads 100 + -4 = 96\r\n\"\"\"', 21, 'demo_precedence_bitwise_not'),
(129, 'print(100 + 5 * 3)\r\n\r\n\"\"\"\r\nMultiplication has higher precedence than addition, and needs to be evaluated first.\r\nThe calculation above reads 100 + 15 = 115\r\n\"\"\"', 21, 'demo_precedence_multiplication1'),
(130, 'print(100 - 5 * 3)\r\n\r\n\"\"\"\r\nSubtraction has a lower precedence than multiplication, and we need to calculate the multiplication first.\r\nThe calculation above reads 100 - 15 = 85\r\n\"\"\"', 21, 'demo_precedence_subtraction'),
(131, 'print(8 >> 4 - 2)\r\n\r\n\"\"\"\r\nBitwise right shift has a lower precedence than subtraction, and we need to calculate the subtraction first.\r\nThe calculation above reads 8 >> 2 = 2\r\n\r\nMore explanation:\r\nThe >> operator moves each bit the specified number of times to the right. Empty holes at the left are filled with 0\'s.\r\n\r\nIf you move each bit 2 times to the right, 8 becomes 2:\r\n 8 = 0000000000001000\r\nbecomes\r\n 2 = 0000000000000010\r\n\r\nDecimal numbers and their binary values:\r\n 0 = 0000000000000000\r\n 1 = 0000000000000001\r\n 2 = 0000000000000010\r\n 3 = 0000000000000011\r\n 4 = 0000000000000100\r\n 5 = 0000000000000101\r\n 6 = 0000000000000110\r\n 7 = 0000000000000111\r\n 8 = 0000000000001000\r\n 9 = 0000000000001001\r\n10 = 0000000000001010\r\n11 = 0000000000001011\r\n12 = 0000000000001100\r\n\"\"\"', 21, 'demo_precedence_shift'),
(132, 'print(6 & 2 + 1)\r\n\r\n\"\"\"\r\nBitwise AND has a lower precedence than addition, and we need to calculate the addition first.\r\nThe calculation above reads 6 & 3 = 2\r\n\r\nMore explanation:\r\nThe & operator compares each bit and set it to 1 if both are 1, otherwise it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n2 = 0000000000000010\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_precedence_bitwise_and'),
(133, 'print(6 ^ 2 + 1)\r\n\r\n\"\"\"\r\nBitwise XOR has a lower precedence than addition, and we need to calculate the addition first.\r\nThe calculation above reads 6 ^ 3 = 5\r\n\r\nMore explanation:\r\nThe ^ operator compares each bit and set it to 1 if only one is 1, otherwise (if both are 1 or both are 0) it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n5 = 0000000000000101\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_precedence_bitwise_xor'),
(134, 'print(6 | 2 + 1)\r\n\r\n\"\"\"\r\nBitwise OR has a lower precedence than addition, and we need to calculate the addition first.\r\nThe calculation above reads 6 | 3 = 7\r\n\r\nMore explanation:\r\nThe | operator compares each bit and set it to 1 if one or both is 1, otherwise it is set to 0:\r\n\r\n6 = 0000000000000110\r\n3 = 0000000000000011\r\n--------------------\r\n7 = 0000000000000111\r\n====================\r\n\r\nDecimal numbers and their binary values:\r\n0 = 0000000000000000\r\n1 = 0000000000000001\r\n2 = 0000000000000010\r\n3 = 0000000000000011\r\n4 = 0000000000000100\r\n5 = 0000000000000101\r\n6 = 0000000000000110\r\n7 = 0000000000000111\r\n\"\"\"', 21, 'demo_precedence_bitwise_or'),
(135, 'print(5 == 4 + 1)\r\n\r\n\"\"\"\r\nThe \"like\" comparison has a lower precedence than addition, and we need to calculate the addition first.\r\nThe calculation above reads 5 == 5 = True\r\n\"\"\"', 21, 'demo_precedence_like'),
(136, 'print(not 5 == 5)\r\n\r\n\"\"\"\r\nThe logical NOT operator has a lower precedence than \"like\" comparison, and we need to calculate the comparison first.\r\nThe calculation above reads: not True = False\r\n\"\"\"', 21, 'demo_precedence_not'),
(137, 'print(1 or 2 and 3)\r\n\r\n\"\"\"\r\nThe and operator has a higher precedence than or, and we need to calculate the and expression first.\r\nThe calculation above reads: 1 or 3 = 1\r\n\"\"\"', 21, 'demo_precedence_and'),
(138, 'print(4 or 5 + 10 or 8)\r\n\r\n\"\"\"\r\nThe or operator has a lower precedence than addition, and we need to calculate the addition first.\r\nThe calculation above reads: 4 or 15 or 8 = 4\r\n\"\"\"', 21, 'demo_precedence_or'),
(139, 'print(5 + 4 - 7 + 3)\r\n\r\n\"\"\"\r\nAdditions and subtractions have the same precedence, and we need to calculate from left to right.\r\nThe calculation above reads:\r\n5 + 4 = 9\r\n9 - 7 = 2\r\n2 + 3 = 5\r\n\"\"\"', 21, 'demo_precedence_same'),
(140, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nprint(thislist)', 22, 'demo_list'),
(141, 'thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\r\n\r\nprint(thislist)', 22, 'demo_list_duplicates'),
(142, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nprint(len(thislist))', 22, 'demo_list_len'),
(143, 'list1 = [\"apple\", \"banana\", \"cherry\"]\r\nlist2 = [1, 5, 7, 9, 3]\r\nlist3 = [True, False, False]\r\n\r\nprint(list1)\r\nprint(list2)\r\nprint(list3)', 22, 'demo_list_datatypes'),
(144, 'list1 = [\"abc\", 34, True, 40, \"male\"]\r\n\r\nprint(list1)', 22, 'demo_list_datatypes2'),
(145, 'mylist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nprint(type(mylist))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 22, 'demo_list_datatypes3'),
(146, 'thislist = list((\"apple\", \"banana\", \"cherry\"))\r\n\r\nprint(thislist)', 22, 'demo_list_constructor'),
(147, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nprint(thislist[1])', 23, 'demo_list_access'),
(148, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nprint(thislist[-1])', 23, 'demo_list_negative_index'),
(149, 'thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\r\nprint(thislist[2:5])\r\n\r\n#This will return the items from position 2 to 5.\r\n\r\n#Remember that the first item is position 0,\r\n#and note that the item in position 5 is NOT included', 23, 'demo_list_range'),
(150, 'thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\r\nprint(thislist[:4])\r\n\r\n#This will return the items from index 0 to index 4.\r\n\r\n#Remember that index 0 is the first item, and index 4 is the fifth item\r\n#Remember that the item in index 4 is NOT included', 23, 'demo_list_range2'),
(151, 'thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\r\nprint(thislist[2:])\r\n\r\n#This will return the items from index 2 to the end.\r\n\r\n#Remember that index 0 is the first item, and index 2 is the third', 23, 'demo_list_range3'),
(152, 'thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\r\nprint(thislist[-4:-1])\r\n\r\n#Negative indexing means starting from the end of the list.\r\n\r\n#This example returns the items from index -4 (included) to index -1 (excluded)\r\n\r\n#Remember that the last item has the index -1,', 23, 'demo_list_range_negative'),
(153, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nif \"apple\" in thislist:\r\n    print(\"Yes, \'apple\' is in the fruits list\")', 23, 'demo_list_in'),
(154, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist[1] = \"blackcurrant\"\r\n\r\nprint(thislist)', 24, 'demo_list_change'),
(155, 'thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\r\n\r\nthislist[1:3] = [\"blackcurrant\", \"watermelon\"]\r\n\r\nprint(thislist)', 24, 'demo_list_change_range'),
(156, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nthislist[1:2] = [\"blackcurrant\", \"watermelon\"]\r\n\r\nprint(thislist)', 24, 'demo_list_change2'),
(157, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nthislist[1:3] = [\"watermelon\"]\r\n\r\nprint(thislist)', 24, 'demo_list_change3'),
(158, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nthislist.insert(2, \"watermelon\")\r\n\r\nprint(thislist)', 24, 'demo_list_change2_insert'),
(159, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nthislist.append(\"orange\")\r\n\r\nprint(thislist)', 25, 'demo_list_append'),
(160, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist.insert(1, \"orange\")\r\nprint(thislist)', 25, 'demo_list_insert'),
(161, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\ntropical = [\"mango\", \"pineapple\", \"papaya\"]\r\n\r\nthislist.extend(tropical)\r\n\r\nprint(thislist)', 25, 'demo_list_add_extend'),
(162, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthistuple = (\"kiwi\", \"orange\")\r\n\r\nthislist.extend(thistuple)\r\n\r\nprint(thislist)', 25, 'demo_list_add_extend_tuple'),
(163, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist.remove(\"banana\")\r\nprint(thislist)', 26, 'demo_list_remove'),
(164, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist.pop(1)\r\nprint(thislist)', 26, 'demo_list_pop2'),
(165, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist.pop()\r\nprint(thislist)', 26, 'demo_list_pop'),
(166, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\ndel thislist[0]\r\nprint(thislist)', 26, 'demo_list_del'),
(167, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\ndel thislist\r\nprint(thislist) \r\n#this will cause an error because you have succsesfully deleted \"thislist\".', 26, 'demo_list_del2'),
(168, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nthislist.clear()\r\nprint(thislist)', 26, 'demo_list_clear'),
(169, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nfor x in thislist:\r\n    print(x)', 27, 'demo_list_loop'),
(170, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nfor i in range(len(thislist)):\r\n    print(thislist[i])', 27, 'demo_list_loop2'),
(171, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\ni = 0\r\nwhile i < len(thislist):\r\n    print(thislist[i])\r\n    i = i + 1', 27, 'demo_list_while_loop'),
(172, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\n[print(x) for x in thislist]', 27, 'demo_list_loop_comprehensive'),
(173, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\nnewlist = [ ]\r\n\r\nfor x in fruits:\r\n    if \"a\" in x:\r\n        newlist.append(x)\r\n\r\nprint(newlist)', 28, 'demo_list_without_comprehension'),
(174, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\nnewlist = [x for x in fruits if \"a\" in x]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension'),
(175, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\n\r\nnewlist = [x for x in fruits if x != \"apple\"]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_if'),
(176, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\n\r\nnewlist = [x for x in fruits]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_noif'),
(177, 'newlist = [x for x in range(10)]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_range'),
(178, 'newlist = [x for x in range(10) if x < 5]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_range2'),
(179, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\n\r\nnewlist = [x.upper() for x in fruits]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_upper'),
(180, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\n\r\nnewlist = [\'hello\' for x in fruits]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_hello'),
(181, 'fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\r\n\r\nnewlist = [x if x != \"banana\" else \"orange\" for x in fruits]\r\n\r\nprint(newlist)', 28, 'demo_list_comprehension_if_else'),
(182, 'thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\r\n\r\nthislist.sort( )\r\n\r\nprint(thislist)', 29, 'demo_list_sort'),
(183, 'thislist = [100, 50, 65, 82, 23]\r\n\r\nthislist.sort( )\r\n\r\nprint(thislist)', 29, 'demo_list_sort_num'),
(184, 'thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\r\n\r\nthislist.sort(reverse = True)\r\n\r\nprint(thislist)', 29, 'demo_list_sort_desc'),
(185, 'thislist = [100, 50, 65, 82, 23]\r\n\r\nthislist.sort(reverse = True)\r\n\r\nprint(thislist)', 29, 'demo_list_sort_num_desc'),
(186, 'def myfunc(n):\r\n    return abs(n - 50)\r\n\r\nthislist = [100, 50, 65, 82, 23]\r\n\r\nthislist.sort(key = myfunc)\r\n\r\nprint(thislist)', 29, 'demo_list_sort_key'),
(187, 'thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\r\n\r\nthislist.sort( )\r\n\r\nprint(thislist)', 29, 'demo_list_sort_case_sensitive'),
(188, 'thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\r\n\r\nthislist.sort(key = str.lower)\r\n\r\nprint(thislist)', 29, 'demo_list_sort_lower'),
(189, 'thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\r\n\r\nthislist.reverse( )\r\n\r\nprint(thislist)', 29, 'demo_list_sort_reverse'),
(190, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nmylist = thislist.copy( )\r\nprint(mylist)', 30, 'demo_list_copy'),
(191, 'thislist = [\"apple\", \"banana\", \"cherry\"]\r\nmylist = list(thislist)\r\nprint(mylist)', 30, 'demo_list_copy2'),
(192, 'list1 = [\"a\", \"b\", \"c\"]\r\nlist2 = [1, 2, 3]\r\n\r\nlist3 = list1 + list2\r\nprint(list3)', 31, 'demo_list_concat1'),
(193, 'list1 = [\"a\", \"b\" , \"c\"]\r\nlist2 = [1, 2, 3]\r\n\r\nfor x in list2:\r\n    list1.append(x)\r\n\r\nprint(list1)', 31, 'demo_list_concat2'),
(194, 'list1 = [\"a\", \"b\" , \"c\"]\r\nlist2 = [1, 2, 3]\r\n\r\nlist1.extend(list2)\r\nprint(list1)', 31, 'demo_list_concat3'),
(195, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nprint(thistuple)', 33, 'demo_tuple'),
(196, 'thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\r\nprint(thistuple)', 33, 'demo_tuple_duplicates'),
(197, 'thistuple = tuple((\"apple\", \"banana\", \"cherry\"))\r\nprint(len(thistuple))', 33, 'demo_tuple_len'),
(198, 'thistuple = (\"apple\",)\r\nprint(type(thistuple))\r\n\r\n#NOT a tuple\r\nthistuple = (\"apple\")\r\nprint(type(thistuple))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 33, 'demo_tuple_one_item'),
(199, 'tuple1 = (\"apple\", \"banana\", \"cherry\")\r\ntuple2 = (1, 5, 7, 9, 3)\r\ntuple3 = (True, False, False)\r\n\r\nprint(tuple1)\r\nprint(tuple2)\r\nprint(tuple3)', 33, 'demo_tuple_datatypes'),
(200, 'tuple1 = (\"abc\", 34, True, 40, \"male\")\r\n\r\nprint(tuple1)', 33, 'demo_tuple_datatypes2'),
(201, 'mytuple = (\"apple\", \"banana\", \"cherry\")\r\n\r\nprint(type(mytuple))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 33, 'demo_tuple_datatypes3'),
(202, 'thistuple = tuple((\"apple\", \"banana\", \"cherry\"))\r\nprint(thistuple)', 33, 'demo_tuple3'),
(203, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nprint(thistuple[1])', 34, 'demo_tuple1'),
(204, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nprint(thistuple[-1])', 34, 'demo_tuple_negative_index'),
(205, 'thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\r\nprint(thistuple[2:5])\r\n\r\n#This will return the items from position 2 to 5.\r\n\r\n#Remember that the first item is position 0,\r\n#and note that the item in position 5 is NOT included', 34, 'demo_tuple_range'),
(206, 'thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\r\n\r\nprint(thistuple[:4])', 34, 'demo_tuple_range2'),
(207, 'thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\r\n\r\nprint(thistuple[2:])', 34, 'demo_tuple_range3'),
(208, 'thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\r\nprint(thistuple[-4:-1])\r\n\r\n#Negative indexing means starting from the end of the tuple.\r\n\r\n#This example returns the items from index -4 (included) to index -1 (excluded)\r\n\r\n#Remember that the last item has the index -1,', 34, 'demo_tuple_range_negative'),
(209, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nif \"apple\" in thistuple:\r\n    print(\"Yes, \'apple\' is in the fruits tuple\")', 34, 'demo_tuple_in'),
(210, 'x = (\"apple\", \"banana\", \"cherry\")\r\ny = list(x)\r\ny[1] = \"kiwi\"\r\nx = tuple(y)\r\n\r\nprint(x)', 35, 'demo_tuple_change'),
(211, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\ny = list(thistuple)\r\ny.append(\"orange\")\r\nthistuple = tuple(y)\r\n\r\nprint(thistuple)', 35, 'demo_tuple_add_orange'),
(212, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\ny = (\"orange\",)\r\nthistuple += y\r\n\r\nprint(thistuple)', 35, 'demo_tuple_add_tuple'),
(213, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\ny = list(thistuple)\r\ny.remove(\"apple\")\r\nthistuple = tuple(y)\r\n\r\nprint(thistuple)', 35, 'demo_tuple_remove'),
(214, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\ndel thistuple\r\nprint(thistuple)\r\n#this will raise an error because the tuple no longer exists', 35, 'demo_tuple_del'),
(215, 'fruits = (\"apple\", \"banana\", \"cherry\")\r\n\r\nprint(fruits)', 36, 'demo_tuple_packing'),
(216, 'fruits = (\"apple\", \"banana\", \"cherry\")\r\n\r\n(green, yellow, red) = fruits\r\n\r\nprint(green)\r\nprint(yellow)\r\nprint(red)', 36, 'demo_tuple_unpacking'),
(217, 'fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\r\n\r\n(green, yellow, *red) = fruits\r\n\r\nprint(green)\r\nprint(yellow)\r\nprint(red)', 36, 'demo_tuple_unpacking_asterix1'),
(218, 'fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\r\n\r\n(green, *tropic, red) = fruits\r\n\r\nprint(green)\r\nprint(tropic)\r\nprint(red)', 36, 'demo_tuple_unpacking_asterix2'),
(219, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nfor x in thistuple:\r\n    print(x)', 37, 'demo_tuple_loop'),
(220, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\nfor i in range(len(thistuple)):\r\n    print(thistuple[i])', 37, 'demo_tuple_loop_index'),
(221, 'thistuple = (\"apple\", \"banana\", \"cherry\")\r\ni = 0\r\nwhile i < len(thistuple):\r\n    print(thistuple[i])\r\n    i = i + 1', 27, 'demo_tuple_while'),
(222, 'tuple1 = (\"a\", \"b\" , \"c\")\r\ntuple2 = (1, 2, 3)\r\n\r\ntuple3 = tuple1 + tuple2\r\nprint(tuple3)', 38, 'demo_tuple_concat'),
(223, 'fruits = (\"apple\", \"banana\", \"cherry\")\r\nmytuple = fruits * 2\r\n\r\nprint(mytuple)', 38, 'demo_tuple_multiply'),
(224, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\nprint(thisset)\r\n\r\n# Note: the set list is unordered, meaning: the items will appear in a random order.\r\n\r\n# Refresh this page to see the change in the result.', 40, 'demo_set'),
(225, 'thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\r\n\r\nprint(thisset)', 40, 'demo_sets_duplicate_error'),
(226, 'thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}\r\n\r\nprint(thisset)', 40, 'demo_sets_duplicate_true'),
(227, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nprint(len(thisset))', 40, 'demo_set_length'),
(228, 'set1 = {\"apple\", \"banana\", \"cherry\"}\r\nset2 = {1, 5, 7, 9, 3}\r\nset3 = {True, False, False}\r\n\r\nprint(set1)\r\nprint(set2)\r\nprint(set3)', 40, 'demo_set_datatypes'),
(229, 'set1 = {\"abc\", 34, True, 40, \"male\"}\r\n\r\nprint(set1)', 40, 'demo_set_datatypes2'),
(230, 'myset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nprint(type(myset))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 40, 'demo_set_datatypes3'),
(231, 'thisset = set((\"apple\", \"banana\", \"cherry\"))\r\nprint(thisset)\r\n# Note: the set list is unordered, so the result will display the items in a random order.', 40, 'demo_set2'),
(232, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nfor x in thisset:\r\n    print(x)', 41, 'demo_set_loop'),
(233, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nprint(\"banana\" in thisset)', 41, 'demo_set_in'),
(234, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nthisset.add(\"orange\")\r\n\r\nprint(thisset)', 42, 'demo_set_add'),
(235, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\ntropical = {\"pineapple\", \"mango\", \"papaya\"}\r\n\r\nthisset.update(tropical)\r\n\r\nprint(thisset)', 42, 'demo_sets_update'),
(236, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\nmylist = [\"kiwi\", \"orange\"]\r\n\r\nthisset.update(mylist)\r\n\r\nprint(thisset)', 42, 'demo_sets_update2'),
(237, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nthisset.remove(\"banana\")\r\n\r\nprint(thisset)', 43, 'demo_set_remove'),
(238, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nthisset.discard(\"banana\")\r\n\r\nprint(thisset)', 43, 'demo_set_discard'),
(239, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nx = thisset.pop()\r\n#removed item\r\nprint(x) \r\n#the set after removal\r\nprint(thisset)', 43, 'demo_set_pop'),
(240, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nthisset.clear()\r\n\r\nprint(thisset)', 43, 'demo_set_clear'),
(241, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\ndel thisset\r\n#this will raise an error because the set no longer exists\r\nprint(thisset)', 43, 'demo_set_del'),
(242, 'thisset = {\"apple\", \"banana\", \"cherry\"}\r\n\r\nfor x in thisset:\r\n    print(x)', 44, 'demo_set_loop1'),
(243, 'set1 = {\"a\", \"b\" , \"c\"}\r\nset2 = {1, 2, 3}\r\n\r\nset3 = set1.union(set2)\r\nprint(set3)', 45, 'demo_set_union'),
(244, 'set1 = {\"a\", \"b\" , \"c\"}\r\nset2 = {1, 2, 3}\r\n\r\nset1.update(set2)\r\nprint(set1)', 45, 'demo_set_update2'),
(245, 'x = {\"apple\", \"banana\", \"cherry\"}\r\ny = {\"google\", \"microsoft\", \"apple\"}\r\n\r\nx.intersection_update(y)\r\n\r\nprint(x)', 45, 'demo_sets_intersection_update'),
(246, 'x = {\"apple\", \"banana\", \"cherry\"}\r\ny = {\"google\", \"microsoft\", \"apple\"}\r\n\r\nz = x.intersection(y)\r\n\r\nprint(z)', 45, 'demo_sets_intersection'),
(247, 'x = {\"apple\", \"banana\", \"cherry\"}\r\ny = {\"google\", \"microsoft\", \"apple\"}\r\n\r\nx.symmetric_difference_update(y)\r\n\r\nprint(x)', 45, 'demo_sets_symmetric_difference_update'),
(248, 'x = {\"apple\", \"banana\", \"cherry\"}\r\ny = {\"google\", \"microsoft\", \"apple\"}\r\n\r\nz = x.symmetric_difference(y)\r\n\r\nprint(z)', 45, 'demo_sets_symmetric_difference'),
(249, 'x = {\"apple\", \"banana\", \"cherry\", True}\r\ny = {\"google\", 1, \"apple\", 2}\r\n\r\nz = x.symmetric_difference(y)\r\n\r\nprint(z)', 45, 'demo_sets_duplicate_true2'),
(250, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nprint(thisdict)', 47, 'demo_dictionary'),
(251, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nprint(thisdict[\"brand\"])', 47, 'demo_dictionary_brand'),
(252, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964,\r\n  \"year\": 2020\r\n}\r\nprint(thisdict)', 47, 'demo_dictionary_duplicates'),
(253, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964,\r\n  \"year\": 2020\r\n}\r\nprint(len(thisdict))', 47, 'demo_dict_len'),
(254, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"electric\": False,\r\n  \"year\": 1964,\r\n  \"colors\": [\"red\", \"white\", \"blue\"]\r\n}\r\n\r\nprint(thisdict)', 47, 'demo_dict_datatypes'),
(255, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nprint(type(thisdict))\r\nprint(\"Please try it in your local environment to get proper output.\")', 47, 'demo_dict_datatypes2'),
(256, 'thisdict = dict(name = \"John\", age = 36, country = \"Norway\")\r\n\r\nprint(thisdict)', 47, 'demo_dict_constructor'),
(257, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nx = thisdict[\"model\"]\r\nprint(x)', 48, 'demo_dictionary_access'),
(258, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nx = thisdict.get(\"model\")\r\nprint(x)', 48, 'demo_dictionary_get'),
(259, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\n\r\nx = thisdict.keys( )\r\n\r\nprint(x)', 48, 'demo_dict_keys'),
(260, 'car = {\r\n\"brand\": \"Ford\",\r\n\"model\": \"Mustang\",\r\n\"year\": 1964\r\n}\r\n\r\nx = car.keys( )\r\n\r\nprint(x) #before the change\r\n\r\ncar[\"color\"] = \"white\"\r\n\r\nprint(x) #after the change', 48, 'demo_dict_keys2'),
(261, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\n\r\nx = thisdict.values( )\r\n\r\nprint(x)', 48, 'demo_dict_values'),
(262, 'car = {\r\n\"brand\": \"Ford\",\r\n\"model\": \"Mustang\",\r\n\"year\": 1964\r\n}\r\n\r\nx = car.values( )\r\n\r\nprint(x) #before the change\r\n\r\ncar[\"year\"] = 2020\r\n\r\nprint(x) #after the change', 48, 'demo_dict_values2'),
(263, 'car = {\r\n\"brand\": \"Ford\",\r\n\"model\": \"Mustang\",\r\n\"year\": 1964\r\n}\r\n\r\nx = car.values( )\r\n\r\nprint(x) #before the change\r\n\r\ncar[\"color\"] = \"red\"\r\n\r\nprint(x) #after the change', 48, 'demo_dict_values3'),
(264, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\n\r\nx = thisdict.items( )\r\n\r\nprint(x)', 48, 'demo_dict_items'),
(265, 'car = {\r\n\"brand\": \"Ford\",\r\n\"model\": \"Mustang\",\r\n\"year\": 1964\r\n}\r\n\r\nx = car.items( )\r\n\r\nprint(x) #before the change\r\n\r\ncar[\"year\"] = 2020\r\n\r\nprint(x) #after the change', 48, 'demo_dict_items2'),
(266, 'car = {\r\n\"brand\": \"Ford\",\r\n\"model\": \"Mustang\",\r\n\"year\": 1964\r\n}\r\n\r\nx = car.items( )\r\n\r\nprint(x) #before the change\r\n\r\ncar[\"color\"] = \"red\"\r\n\r\nprint(x) #after the change', 48, 'demo_dict_items3'),
(267, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nif \"model\" in thisdict:\r\n    print(\"Yes, \'model\' is one of the keys in the thisdict dictionary\")', 48, 'demo_dictionary_in'),
(268, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\n\r\nthisdict[\"year\"] = 2018\r\n\r\nprint(thisdict)', 49, 'demo_dictionary_change'),
(269, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict.update({\"year\": 2020})\r\n\r\nprint(thisdict)', 49, 'demo_dict_update'),
(270, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict[\"color\"] = \"red\"\r\nprint(thisdict)', 50, 'demo_dictionary_add'),
(271, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict.update({\"color\": \"red\"})\r\n\r\nprint(thisdict)', 50, 'demo_dict_add2'),
(272, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict.pop(\"model\")\r\nprint(thisdict)', 43, 'demo_dictionary_pop'),
(273, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict.popitem( )\r\nprint(thisdict)', 51, 'demo_dictionary_popitem'),
(274, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\ndel thisdict[\"model\"]\r\nprint(thisdict)', 51, 'demo_dictionary_del2'),
(275, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\ndel thisdict\r\n#this will cause an error because \"thisdict\" no longer exists.\r\nprint(thisdict)', 51, 'demo_dictionary_del3'),
(276, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nthisdict.clear( )\r\nprint(thisdict)', 51, 'demo_dictionary_clear'),
(277, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nfor x in thisdict:\r\n    print(x)', 52, 'demo_dictionary_loop'),
(278, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nfor x in thisdict:\r\n    print(thisdict[x])', 52, 'demo_dictionary_loop2'),
(279, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nfor x in thisdict.values( ):\r\n    print(x)', 52, 'demo_dictionary_loop_values'),
(280, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nfor x in thisdict.keys( ):\r\n    print(x)', 52, 'demo_dictionary_loop_keys'),
(281, 'thisdict =	{\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nfor x, y in thisdict.items( ):\r\n    print(x, y)', 52, 'demo_dictionary_loop_items'),
(282, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nmydict = thisdict.copy( )\r\nprint(mydict)', 53, 'demo_dictionary_copy'),
(283, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\nmydict = dict(thisdict)\r\nprint(mydict)', 53, 'demo_dictionary_copy2'),
(284, 'myfamily = {\r\n  \"child1\" : {\r\n    \"name\" : \"Emil\",\r\n    \"year\" : 2004\r\n  },\r\n  \"child2\" : {\r\n    \"name\" : \"Tobias\",\r\n    \"year\" : 2007\r\n  },\r\n  \"child3\" : {\r\n    \"name\" : \"Linus\",\r\n    \"year\" : 2011\r\n  }\r\n}\r\n\r\nprint(myfamily)', 54, 'demo_dictionary_nested'),
(285, 'child1 = {\r\n  \"name\" : \"Emil\",\r\n  \"year\" : 2004\r\n}\r\nchild2 = {\r\n  \"name\" : \"Tobias\",\r\n  \"year\" : 2007\r\n}\r\nchild3 = {\r\n  \"name\" : \"Linus\",\r\n  \"year\" : 2011\r\n}\r\n\r\nmyfamily = {\r\n  \"child1\" : child1,\r\n  \"child2\" : child2,\r\n  \"child3\" : child3\r\n}\r\n\r\nprint(myfamily)', 54, 'demo_dictionary_nested2'),
(286, 'child1 = {\r\n  \"name\" : \"Emil\",\r\n  \"year\" : 2004\r\n}\r\nchild2 = {\r\n  \"name\" : \"Tobias\",\r\n  \"year\" : 2007\r\n}\r\nchild3 = {\r\n  \"name\" : \"Linus\",\r\n  \"year\" : 2011\r\n}\r\n\r\nmyfamily = {\r\n  \"child1\" : child1,\r\n  \"child2\" : child2,\r\n  \"child3\" : child3\r\n}\r\n\r\nprint(myfamily[\"child2\"][\"name\"])', 54, 'demo_dictionary_nested3'),
(287, 'a = 33\r\nb = 200\r\n\r\nif b > a:\r\n    print(\"b is greater than a\")', 56, 'demo_if2'),
(288, 'a = 33\r\nb = 200\r\n\r\nif b > a:\r\nprint(\"b is greater than a\")', 56, 'demo_if_error'),
(289, 'a = 33\r\nb = 33\r\nif b > a:\r\n    print(\"b is greater than a\")\r\nelif a == b:\r\n    print(\"a and b are equal\")', 56, 'demo_if_elif'),
(290, 'a = 200\r\nb = 33\r\nif b > a:\r\n    print(\"b is greater than a\")\r\nelif a == b:\r\n    print(\"a and b are equal\")\r\nelse:\r\n    print(\"a is greater than b\")', 56, 'demo_if_else'),
(291, 'a = 200\r\nb = 33\r\nif b > a:\r\n    print(\"b is greater than a\")\r\nelse:\r\n    print(\"b is not greater than a\")', 56, 'demo_if_else2'),
(292, 'a = 200\r\nb = 33\r\n\r\nif a > b: print(\"a is greater than b\")', 56, 'demo_if_short'),
(293, 'a = 2\r\nb = 330\r\n\r\nprint(\"A\") if a > b else print(\"B\")', 56, 'demo_if_else_short'),
(294, 'a = 330\r\nb = 330\r\n\r\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")', 56, 'demo_if_else_short2'),
(295, 'a = 200\r\nb = 33\r\nc = 500\r\nif a > b and c > a:\r\n    print(\"Both conditions are True\")', 56, 'demo_if_and'),
(296, 'a = 200\r\nb = 33\r\nc = 500\r\nif a > b or a > c:\r\n    print(\"At least one of the conditions is True\")', 56, 'demo_if_or'),
(297, 'a = 33\r\nb = 200\r\nif not a > b:\r\n    print(\"a is NOT greater than b\")', 56, 'demo_if_not'),
(298, 'x = 41\r\n\r\nif x > 10:\r\n    print(\"Above ten,\")\r\n    if x > 20:\r\n        print(\"and also above 20!\")\r\n    else:\r\n        print(\"but not above 20.\")', 56, 'demo_if_nested'),
(299, 'a = 33\r\nb = 200\r\n\r\nif b > a:\r\n  pass\r\n\r\n# having an empty if statement like this, would raise an error without the pass statement', 56, 'demo_if_pass'),
(300, 'i = 1\r\nwhile i < 6:\r\n    print(i)\r\n    i += 1', 57, 'demo_while'),
(301, 'i = 1\r\nwhile i < 6:\r\n    print(i)\r\n    if (i == 3):\r\n        break\r\n    i += 1', 57, 'demo_while_break'),
(302, 'i = 0\r\nwhile i < 6:\r\n    i += 1\r\n    if i == 3:\r\n        continue\r\n    print(i)\r\n\r\n# Note that number 3 is missing in the result', 57, 'demo_while_continue'),
(303, 'i = 1\r\nwhile i < 6:\r\n    print(i)\r\n    i += 1\r\nelse:\r\n    print(\"i is no longer less than 6\")', 57, 'demo_while_else'),
(304, 'fruits = [\"apple\", \"banana\", \"cherry\"]\r\nfor x in fruits:\r\n    print(x)', 58, 'demo_for'),
(305, 'for x in \"banana\":\r\n    print(x)', 58, 'demo_for_string1'),
(306, 'fruits = [\"apple\", \"banana\", \"cherry\"]\r\nfor x in fruits:\r\n    print(x) \r\n    if x == \"banana\":\r\n        break', 58, 'demo_for_break'),
(307, 'fruits = [\"apple\", \"banana\", \"cherry\"]\r\nfor x in fruits:\r\n    if x == \"banana\":\r\n        break\r\n    print(x)', 58, 'demo_for_break2');
INSERT INTO `questions_learncodes` (`id`, `codes`, `learn_id`, `link`) VALUES
(308, 'fruits = [\"apple\", \"banana\", \"cherry\"]\r\nfor x in fruits:\r\n    if x == \"banana\":\r\n        continue\r\n    print(x)', 58, 'demo_for_continue'),
(309, 'for x in range(6):\r\n    print(x)', 58, 'demo_for_range'),
(310, 'for x in range(2, 6):\r\n    print(x)', 58, 'demo_for_range2'),
(311, 'for x in range(2, 30, 3):\r\n    print(x)', 58, 'demo_for_range3'),
(312, 'for x in range(6):\r\n    print(x)\r\nelse:\r\n    print(\"Finally finished!\")', 58, 'demo_for_else'),
(313, 'for x in range(6):\r\n    if x == 3: break\r\n    print(x)\r\nelse:\r\n    print(\"Finally finished!\")\r\n\r\n#If the loop breaks, the else block is not executed.', 58, 'demo_for_else_break'),
(314, 'adj = [\"red\", \"big\", \"tasty\"]\r\nfruits = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nfor x in adj:\r\n    for y in fruits:\r\n        print(x, y)', 58, 'demo_for_nested'),
(315, 'for x in [0, 1, 2]:\r\n    pass\r\n\r\n# having an empty for loop like this, would raise an error without the pass statement', 58, 'demo_for_pass'),
(316, 'def my_function():\r\n    print(\"Hello from a function\")\r\n\r\nmy_function( )', 59, 'demo_function'),
(317, 'def my_function(fname):\r\n    print(fname + \" Refsnes\")\r\n\r\nmy_function(\"Emil\")\r\nmy_function(\"Tobias\")\r\nmy_function(\"Linus\")', 59, 'demo_function_param'),
(318, 'def my_function(fname, lname):\r\n    print(fname + \" \" + lname)\r\n\r\nmy_function(\"Emil\", \"Refsnes\")', 59, 'demo_function_args_n'),
(319, 'def my_function(fname, lname):\r\n    print(fname + \" \" + lname)\r\n\r\nmy_function(\"Emil\")', 59, 'demo_function_args_error'),
(320, 'def my_function(*kids):\r\n    print(\"The youngest child is \" + kids[2])\r\n\r\nmy_function(\"Emil\", \"Tobias\", \"Linus\")', 59, 'demo_function_args'),
(321, 'def my_function(child3, child2, child1):\r\n    print(\"The youngest child is \" + child3)\r\n\r\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")', 59, 'demo_function_kwargs'),
(322, 'def my_function(**kid):\r\n    print(\"His last name is \" + kid[\"lname\"])\r\n\r\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")', 59, 'demo_function_kwargs_n'),
(323, 'def my_function(country = \"Norway\"):\r\n    print(\"I am from \" + country)\r\n\r\nmy_function(\"Sweden\")\r\nmy_function(\"India\")\r\nmy_function( )\r\nmy_function(\"Brazil\")', 59, 'demo_function_param2'),
(324, 'def my_function(food):\r\n    for x in food:\r\n        print(x)\r\n\r\nfruits = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nmy_function(fruits)', 59, 'demo_function_param3'),
(325, 'def my_function(x):\r\n    return 5 * x\r\n\r\nprint(my_function(3))\r\nprint(my_function(5))\r\nprint(my_function(9))', 59, 'demo_function_return'),
(326, 'def myfunction():\r\n    pass\r\n\r\n# having an empty function definition like this, would raise an error without the pass statement', 59, 'demo_function_pass'),
(327, 'def tri_recursion(k):\r\n    if(k > 0):\r\n        result = k + tri_recursion(k - 1)\r\n        print(result)\r\n    else:\r\n        result = 0\r\n    return result\r\n\r\nprint(\"Recursion Example Results\")\r\ntri_recursion(6)', 59, 'demo_recursion'),
(328, 'x = lambda a: a + 10\r\nprint(x(5))', 60, 'demo_lambda'),
(329, 'x = lambda a, b: a * b\r\nprint(x(5, 6))', 60, 'demo_lambda2'),
(330, 'x = lambda a, b, c: a + b + c\r\nprint(x(5, 6, 2))', 60, 'demo_lambda3'),
(331, 'def myfunc(n):\r\n    return lambda a : a * n\r\n\r\nmydoubler = myfunc(2)\r\n\r\nprint(mydoubler(11))', 60, 'demo_lambda_double'),
(332, 'def myfunc(n):\r\n    return lambda a : a * n\r\n\r\nmytripler = myfunc(3)\r\n\r\nprint(mytripler(11))', 60, 'demo_lambda_triple'),
(333, 'def myfunc(n):\r\n    return lambda a : a * n\r\n\r\nmydoubler = myfunc(2)\r\nmytripler = myfunc(3)\r\n\r\nprint(mydoubler(11)) \r\nprint(mytripler(11))', 60, 'demo_lambda_both'),
(334, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\nprint(cars)', 61, 'demo_array1'),
(335, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\nx = cars[0]\r\n\r\nprint(x)', 61, 'demo_array2'),
(336, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\ncars[0] = \"Toyota\"\r\n\r\nprint(cars)', 61, 'demo_array3'),
(337, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\nx = len(cars)\r\n\r\nprint(x)', 61, 'demo_array4'),
(338, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\nfor x in cars:\r\n    print(x)', 61, 'demo_array5'),
(339, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\ncars.append(\"Honda\")\r\n\r\nprint(cars)', 61, 'demo_array6'),
(340, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\ncars.pop(1)\r\n\r\nprint(cars)', 61, 'demo_array7'),
(341, 'cars = [\"Ford\", \"Volvo\", \"BMW\"]\r\n\r\ncars.remove(\"Volvo\")\r\n\r\nprint(cars)', 61, 'demo_array8'),
(342, 'class MyClass:\r\n  x = 5\r\n\r\nprint(MyClass)\r\nprint(\"Please try it in your local environment for proper output.\")', 62, 'demo_class1'),
(343, 'class MyClass:\r\n    x = 5\r\n\r\np1 = MyClass( )\r\nprint(p1.x)', 62, 'demo_class2'),
(344, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\np1 = Person(\"John\", 36)\r\n\r\nprint(p1.name)\r\nprint(p1.age)', 62, 'demo_class3'),
(345, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\np1 = Person(\"John\", 36)\r\n\r\nprint(p1)', 62, 'demo_class_str1'),
(346, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def __str__(self):\r\n        return f\"{self.name}({self.age})\"    \r\n\r\np1 = Person(\"John\", 36)\r\n\r\nprint(p1)', 62, 'demo_class_str2'),
(347, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def myfunc(self):\r\n        print(\"Hello my name is \" + self.name)\r\n\r\np1 = Person(\"John\", 36)\r\np1.myfunc()', 62, 'demo_class4'),
(348, 'class Person:\r\n    def __init__(mysillyobject, name, age):\r\n        mysillyobject.name = name\r\n        mysillyobject.age = age\r\n\r\n    def myfunc(abc):\r\n        print(\"Hello my name is \" + abc.name)\r\n\r\np1 = Person(\"John\", 36)\r\np1.myfunc( )', 62, 'demo_class5'),
(349, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def myfunc(self):\r\n        print(\"Hello my name is \" + self.name)\r\n\r\np1 = Person(\"John\", 36)\r\n\r\np1.age = 40\r\n\r\nprint(p1.age)', 62, 'demo_class6'),
(350, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def myfunc(self):\r\n        print(\"Hello my name is \" + self.name)\r\n\r\np1 = Person(\"John\", 36)\r\n\r\ndel p1.age\r\n\r\nprint(p1.age)', 62, 'demo_class7'),
(351, 'class Person:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def myfunc(self):\r\n        print(\"Hello my name is \" + self.name)\r\n\r\np1 = Person(\"John\", 36)\r\n\r\ndel p1\r\n\r\nprint(p1)', 62, 'demo_class8'),
(352, 'class Person:\r\n    pass\r\n\r\n# having an empty class definition like this, would raise an error without the pass statement', 62, 'demo_class_pass'),
(353, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\n#Use the Person class to create an object, and then execute the printname method:\r\n\r\nx = Person(\"John\", \"Doe\")\r\nx.printname()', 63, 'demo_inheritance_parent'),
(354, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    pass\r\n\r\nx = Student(\"Mike\", \"Olsen\")\r\nx.printname( )', 63, 'demo_inheritance_child'),
(355, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    def __init__(self, fname, lname):\r\n        Person.__init__(self, fname, lname)\r\n\r\nx = Student(\"Mike\", \"Olsen\")\r\nx.printname( )', 63, 'demo_inheritance_init'),
(356, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    def __init__(self, fname, lname):\r\n        super( ).__init__(fname, lname)\r\n\r\nx = Student(\"Mike\", \"Olsen\")\r\nx.printname( )', 63, 'demo_inheritance_super'),
(357, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    def __init__(self, fname, lname):\r\n        super( ).__init__(fname, lname)\r\n        self.graduationyear = 2019\r\n\r\nx = Student(\"Mike\", \"Olsen\")\r\nprint(x.graduationyear)', 63, 'demo_inheritance_add_prop'),
(358, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    def __init__(self, fname, lname, year):\r\n        super( ).__init__(fname, lname)\r\n        self.graduationyear = year\r\n\r\nx = Student(\"Mike\", \"Olsen\", 2019)\r\nprint(x.graduationyear)', 63, 'demo_inheritance_add_prop2'),
(359, 'class Person:\r\n    def __init__(self, fname, lname):\r\n        self.firstname = fname\r\n        self.lastname = lname\r\n\r\n    def printname(self):\r\n        print(self.firstname, self.lastname)\r\n\r\nclass Student(Person):\r\n    def __init__(self, fname, lname, year):\r\n        super( ).__init__(fname, lname)\r\n        self.graduationyear = year\r\n\r\n    def welcome(self):\r\n        print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)\r\n\r\nx = Student(\"Mike\", \"Olsen\", 2019)\r\nx.welcome( )', 63, 'demo_inheritance_add_method'),
(360, 'mytuple = (\"apple\", \"banana\", \"cherry\")\r\nmyit = iter(mytuple)\r\n\r\nprint(next(myit))\r\nprint(next(myit))\r\nprint(next(myit))', 64, 'demo_iterator'),
(361, 'mystr = \"banana\"\r\nmyit = iter(mystr)\r\n\r\nprint(next(myit))\r\nprint(next(myit))\r\nprint(next(myit))\r\nprint(next(myit))\r\nprint(next(myit))\r\nprint(next(myit))', 64, 'demo_iterator2'),
(362, 'mytuple = (\"apple\", \"banana\", \"cherry\")\r\n\r\nfor x in mytuple:\r\n    print(x)', 64, 'demo_iterator_loop'),
(363, 'mystr = \"banana\"\r\n\r\nfor x in mystr:\r\n    print(x)', 64, 'demo_iterator_loop2'),
(364, 'class MyNumbers:\r\n    def __iter__(self):\r\n        self.a = 1\r\n        return self\r\n\r\n    def __next__(self):\r\n        x = self.a\r\n        self.a += 1\r\n        return x\r\n\r\nmyclass = MyNumbers( )\r\nmyiter = iter(myclass)\r\n\r\nprint(next(myiter))\r\nprint(next(myiter))\r\nprint(next(myiter))\r\nprint(next(myiter))\r\nprint(next(myiter))', 64, 'demo_iterator_create'),
(365, 'class MyNumbers:\r\n    def __iter__(self):\r\n        self.a = 1\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self.a <= 20:\r\n            x = self.a\r\n            self.a += 1\r\n            return x\r\n        else:\r\n            raise StopIteration\r\n\r\nmyclass = MyNumbers()\r\nmyiter = iter(myclass)\r\n\r\nfor x in myiter:\r\n    print(x)', 64, 'demo_iterator_create2'),
(366, 'x = \"Hello World!\"\r\n\r\nprint(len(x))', 65, 'demo_poly_1'),
(367, 'mytuple = (\"apple\", \"banana\", \"cherry\")\r\n\r\nprint(len(mytuple))', 65, 'demo_poly_2'),
(368, 'thisdict = {\r\n  \"brand\": \"Ford\",\r\n  \"model\": \"Mustang\",\r\n  \"year\": 1964\r\n}\r\n\r\nprint(len(thisdict))', 65, 'demo_poly_3'),
(369, 'class Car:\r\n    def __init__(self, brand, model):\r\n        self.brand = brand\r\n        self.model = model\r\n\r\n    def move(self):\r\n        print(\"Drive!\")\r\n\r\nclass Boat:\r\n    def __init__(self, brand, model):\r\n        self.brand = brand\r\n        self.model = model\r\n\r\n    def move(self):\r\n        print(\"Sail!\")\r\n\r\nclass Plane:\r\n    def __init__(self, brand, model):\r\n        self.brand = brand\r\n        self.model = model\r\n\r\n    def move(self):\r\n        print(\"Fly!\")\r\n\r\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\r\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\r\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\r\n\r\nfor x in (car1, boat1, plane1):\r\n    x.move( )', 65, 'demo_poly_4'),
(370, 'class Vehicle:\r\n    def __init__(self, brand, model):\r\n        self.brand = brand\r\n        self.model = model\r\n\r\n    def move(self):\r\n        print(\"Move!\")\r\n\r\nclass Car(Vehicle):\r\n    pass\r\n\r\nclass Boat(Vehicle):\r\n    def move(self):\r\n        print(\"Sail!\")\r\n\r\nclass Plane(Vehicle):\r\n    def move(self):\r\n        print(\"Fly!\")\r\n\r\ncar1 = Car(\"Ford\", \"Mustang\") #Create a Car object\r\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\r\nplane1 = Plane(\"Boeing\", \"747\") #Create a Plane object\r\n\r\nfor x in (car1, boat1, plane1):\r\n    print(x.brand)\r\n    print(x.model)\r\n    x.move( )', 65, 'demo_poly_5'),
(371, 'def myfunc( ):\r\n    x = 300\r\n    print(x)\r\n\r\nmyfunc( )', 66, 'demo_scope1'),
(372, 'def myfunc( ):\r\n    x = 300\r\n    def myinnerfunc( ):\r\n        print(x)\r\n    myinnerfunc( )\r\n\r\nmyfunc( )', 66, 'demo_scope2'),
(373, 'x = 300\r\n\r\ndef myfunc( ):\r\n    print(x)\r\n\r\nmyfunc( )\r\n\r\nprint(x)', 66, 'demo_scope3'),
(374, 'x = 300\r\n\r\ndef myfunc( ):\r\n    x = 200\r\n    print(x)\r\n\r\nmyfunc( )\r\n\r\nprint(x)', 66, 'demo_scope4'),
(375, 'def myfunc( ):\r\n    global x\r\n    x = 300\r\n\r\nmyfunc( )\r\n\r\nprint(x)', 66, 'demo_scope5'),
(376, 'x = 300\r\n\r\ndef myfunc( ):\r\n    global x\r\n    x = 200\r\n\r\nmyfunc( )\r\n\r\nprint(x)', 66, 'demo_scope6'),
(377, 'import mymodule\r\n\r\nmymodule.greeting(\"Jonathan\")', 67, 'demo_module1'),
(378, 'import mymodule\r\n\r\na = mymodule.person1[\"age\"]\r\nprint(a)', 67, 'demo_module2'),
(379, 'import mymodule as mx\r\n\r\na = mx.person1[\"age\"]\r\nprint(a)', 67, 'demo_module3'),
(380, 'import platform\r\n\r\nx = platform.system( )\r\nprint(x)', 67, 'demo_module4'),
(381, 'import platform\r\n\r\nx = dir(platform)\r\nprint(x)', 67, 'demo_module5'),
(382, 'from mymodule import person1\r\n\r\nprint(person1[\"age\"])', 67, 'demo_module6'),
(383, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x)', 68, 'demo_datetime1'),
(384, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.year)\r\nprint(x.strftime(\"%A\"))', 68, 'demo_datetime2'),
(385, 'import datetime\r\n\r\nx = datetime.datetime(2020, 5, 17)\r\n\r\nprint(x)', 68, 'demo_datetime3'),
(386, 'import datetime\r\n\r\nx = datetime.datetime(2018, 6, 1)\r\n\r\nprint(x.strftime(\"%B\"))', 68, 'demo_datetime_strftime'),
(387, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%a\"))', 68, 'demo_datetime_strftime_a'),
(388, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%A\"))', 68, 'demo_datetime_strftime_a2'),
(389, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%w\"))', 68, 'demo_datetime_strftime_w'),
(390, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%d\"))', 68, 'demo_datetime_strftime_d'),
(391, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%b\"))', 68, 'demo_datetime_strftime_b'),
(392, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%B\"))', 68, 'demo_datetime_strftime_b2'),
(393, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%m\"))', 68, 'demo_datetime_strftime_m'),
(394, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%y\"))', 68, 'demo_datetime_strftime_y'),
(395, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%Y\"))', 68, 'demo_datetime_strftime_y2'),
(396, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%H\"))', 68, 'demo_datetime_strftime_h2'),
(397, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%I\"))', 68, 'demo_datetime_strftime_i2'),
(398, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%p\"))', 68, 'demo_datetime_strftime_p'),
(399, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%M\"))', 68, 'demo_datetime_strftime_m2'),
(400, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%S\"))', 68, 'demo_datetime_strftime_s2'),
(401, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%f\"))', 68, 'demo_datetime_strftime_f'),
(402, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%j\"))', 68, 'demo_datetime_strftime_j'),
(403, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%U\"))', 68, 'demo_datetime_strftime_u2'),
(404, 'import datetime\r\n\r\nx = datetime.datetime(2018, 5, 31)\r\n\r\nprint(x.strftime(\"%W\"))', 68, 'demo_datetime_strftime_w2'),
(405, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%c\"))', 68, 'demo_datetime_strftime_c'),
(406, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%C\"))', 68, 'demo_datetime_strftime_century'),
(407, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%x\"))', 68, 'demo_datetime_strftime_x'),
(408, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%X\"))', 68, 'demo_datetime_strftime_x2'),
(409, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%%\"))', 68, 'demo_datetime_strftime_percent'),
(410, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%G\"))', 68, 'demo_datetime_strftime_g'),
(411, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%u\"))', 68, 'demo_datetime_strftime_u'),
(412, 'import datetime\r\n\r\nx = datetime.datetime.now( )\r\n\r\nprint(x.strftime(\"%V\"))', 68, 'demo_datetime_strftime_v'),
(413, 'x = min(5, 10, 25)\r\ny = max(5, 10, 25)\r\n\r\nprint(x)\r\nprint(y)', 69, 'demo_math_min_max'),
(414, 'x = abs(-7.25)\r\n\r\nprint(x)', 69, 'demo_math_abs'),
(415, 'x = pow(4, 3)\r\n\r\nprint(x)', 69, 'demo_math_pow'),
(416, 'import math\r\n\r\nx = math.sqrt(64)\r\n\r\nprint(x)', 68, 'demo_math_sqrt'),
(417, '#Import math library\r\nimport math\r\n\r\n#Round a number upward to its nearest integer\r\nx = math.ceil(1.4)\r\n\r\n#Round a number downward to its nearest integer\r\ny = math.floor(1.4)\r\n\r\nprint(x)\r\nprint(y)', 69, 'demo_math_ceil_floor'),
(418, 'import math\r\n\r\nx = math.pi\r\n\r\nprint(x)', 69, 'demo_math_pi'),
(419, 'import json\r\n\r\n# some JSON:\r\nx = \'{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}\'\r\n\r\n# parse x:\r\ny = json.loads(x)\r\n\r\n# the result is a Python dictionary:\r\nprint(y[\"age\"])', 70, 'demo_json'),
(420, 'import json\r\n\r\n# a Python object (dict):\r\nx = {\r\n  \"name\": \"John\",\r\n  \"age\": 30,\r\n  \"city\": \"New York\"\r\n}\r\n\r\n# convert into JSON:\r\ny = json.dumps(x)\r\n\r\n# the result is a JSON string:\r\nprint(y)', 70, 'demo_json_from_python'),
(421, 'import json\r\n\r\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\r\nprint(json.dumps([\"apple\", \"bananas\"]))\r\nprint(json.dumps((\"apple\", \"bananas\")))\r\nprint(json.dumps(\"hello\"))\r\nprint(json.dumps(42))\r\nprint(json.dumps(31.76))\r\nprint(json.dumps(True))\r\nprint(json.dumps(False))\r\nprint(json.dumps(None))', 70, 'demo_json_from_python_all'),
(422, 'import json\r\n\r\nx = {\r\n  \"name\": \"John\",\r\n  \"age\": 30,\r\n  \"married\": True,\r\n  \"divorced\": False,\r\n  \"children\": (\"Ann\",\"Billy\"),\r\n  \"pets\": None,\r\n  \"cars\": [\r\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\r\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\r\n  ]\r\n}\r\n\r\n# convert into JSON:\r\ny = json.dumps(x)\r\n\r\n# the result is a JSON string:\r\nprint(y)', 70, 'demo_json_from_python_all_in_one'),
(423, 'import json\r\n\r\nx = {\r\n  \"name\": \"John\",\r\n  \"age\": 30,\r\n  \"married\": True,\r\n  \"divorced\": False,\r\n  \"children\": (\"Ann\",\"Billy\"),\r\n  \"pets\": None,\r\n  \"cars\": [\r\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\r\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\r\n  ]\r\n}\r\n\r\n# use four indents to make it easier to read the result:\r\nprint(json.dumps(x, indent=4))', 70, 'demo_json_from_python_indent'),
(424, 'import json\r\n\r\nx = {\r\n  \"name\": \"John\",\r\n  \"age\": 30,\r\n  \"married\": True,\r\n  \"divorced\": False,\r\n  \"children\": (\"Ann\",\"Billy\"),\r\n  \"pets\": None,\r\n  \"cars\": [\r\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\r\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\r\n  ]\r\n}\r\n\r\n# use . and a space to separate objects, and a space, a = and a space to separate keys from their values:\r\nprint(json.dumps(x, indent=4, separators=(\". \", \" = \")))', 70, 'demo_json_from_python_separators'),
(425, 'import json\r\n\r\nx = {\r\n  \"name\": \"John\",\r\n  \"age\": 30,\r\n  \"married\": True,\r\n  \"divorced\": False,\r\n  \"children\": (\"Ann\",\"Billy\"),\r\n  \"pets\": None,\r\n  \"cars\": [\r\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\r\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\r\n  ]\r\n}\r\n\r\n# sort the result alphabetically by keys:\r\nprint(json.dumps(x, indent=4, sort_keys=True))', 70, 'demo_json_from_python_sort_keys'),
(426, 'import re\r\n\r\n#Check if the string starts with \"The\" and ends with \"Spain\":\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(\"^The.*Spain$\", txt)\r\n\r\nif x:\r\n    print(\"YES! We have a match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex'),
(427, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Find all lower case characters alphabetically between \"a\" and \"m\":\r\n\r\nx = re.findall(\"[a-m]\", txt)\r\nprint(x)', 71, 'demo_regex_meta1'),
(428, 'import re\r\n\r\ntxt = \"That will be 59 dollars\"\r\n\r\n#Find all digit characters:\r\nx = re.findall(\"\\d\", txt)\r\nprint(x)', 71, 'demo_regex_meta2'),
(429, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Search for a sequence that starts with \"he\", followed by two (any) characters, and an \"o\":\r\n\r\nx = re.findall(\"he..o\", txt)\r\nprint(x)', 71, 'demo_regex_meta3'),
(430, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Check if the string starts with \'hello\':\r\n\r\nx = re.findall(\"^hello\", txt)\r\nif x:\r\n    print(\"Yes, the string starts with \'hello\'\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_meta4'),
(431, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Check if the string ends with \'planet\':\r\n\r\nx = re.findall(\"planet$\", txt)\r\nif x:\r\n    print(\"Yes, the string ends with \'planet\'\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_meta5'),
(432, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Search for a sequence that starts with \"he\", followed by 0 or more  (any) characters, and an \"o\":\r\n\r\nx = re.findall(\"he.*o\", txt)\r\nprint(x)', 71, 'demo_regex_meta6'),
(433, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Search for a sequence that starts with \"he\", followed by 1 or more  (any) characters, and an \"o\":\r\n\r\nx = re.findall(\"he.+o\", txt)\r\nprint(x)', 71, 'demo_regex_meta7'),
(434, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Search for a sequence that starts with \"he\", followed by 0 or 1  (any) character, and an \"o\":\r\n\r\nx = re.findall(\"he.?o\", txt)\r\n\r\nprint(x)\r\n\r\n#This time we got no match, because there were not zero, not one, but two characters between \"he\" and the \"o\"', 71, 'demo_regex_meta10'),
(435, 'import re\r\n\r\ntxt = \"hello planet\"\r\n\r\n#Search for a sequence that starts with \"he\", followed excactly 2 (any) characters, and an \"o\":\r\n\r\nx = re.findall(\"he.{2}o\", txt)\r\nprint(x)', 71, 'demo_regex_meta8'),
(436, 'import re\r\n\r\ntxt = \"The rain in Spain falls mainly in the plain!\"\r\n\r\n#Check if the string contains either \"falls\" or \"stays\":\r\n\r\nx = re.findall(\"falls|stays\", txt)\r\n\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_meta9'),
(437, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string starts with \"The\":\r\n\r\nx = re.findall(\"\\AThe\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is a match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq1'),
(438, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if \"ain\" is present at the beginning of a WORD:\r\n\r\nx = re.findall(r\"\\bain\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq2'),
(439, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if \"ain\" is present at the end of a WORD:\r\n\r\nx = re.findall(r\"ain\\b\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq2-2'),
(440, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if \"ain\" is present, but NOT at the beginning of a word:\r\n\r\nx = re.findall(r\"\\Bain\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq3'),
(441, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if \"ain\" is present, but NOT at the end of a word:\r\n\r\nx = re.findall(r\"ain\\B\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq3-2'),
(442, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string contains any digits (numbers from 0-9):\r\n\r\nx = re.findall(\"\\d\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq4'),
(443, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Return a match at every no-digit character:\r\n\r\nx = re.findall(\"\\D\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq5'),
(444, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Return a match at every white-space character:\r\n\r\nx = re.findall(\"\\s\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq6'),
(445, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Return a match at every NON white-space character:\r\n\r\nx = re.findall(\"\\S\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq7'),
(446, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Return a match at every word character (characters from a to Z, digits from 0-9, and the underscore _ character):\r\n\r\nx = re.findall(\"\\w\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq8'),
(447, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Return a match at every NON word character (characters NOT between a and Z. Like \"!\", \"?\" white-space etc.):\r\n\r\nx = re.findall(\"\\W\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq9'),
(448, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string ends with \"Spain\":\r\n\r\nx = re.findall(\"Spain\\Z\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is a match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_seq10'),
(449, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string has any a, r, or n characters:\r\n\r\nx = re.findall(\"[arn]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set1'),
(450, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string has any characters between a and n:\r\n\r\nx = re.findall(\"[a-n]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set2'),
(451, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string has other characters than a, r, or n:\r\n\r\nx = re.findall(\"[^arn]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set3'),
(452, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if the string has any 0, 1, 2, or 3 digits:\r\n\r\nx = re.findall(\"[0123]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set4'),
(453, 'import re\r\n\r\ntxt = \"8 times before 11:45 AM\"\r\n\r\n#Check if the string has any digits:\r\n\r\nx = re.findall(\"[0-9]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set5'),
(454, 'import re\r\n\r\ntxt = \"8 times before 11:45 AM\"\r\n\r\n#Check if the string has any two-digit numbers, from 00 to 59:\r\n\r\nx = re.findall(\"[0-5][0-9]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set6'),
(455, 'import re\r\n\r\ntxt = \"8 times before 11:45 AM\"\r\n\r\n#Check if the string has any characters from a to z lower case, and A to Z upper case:\r\n\r\nx = re.findall(\"[a-zA-Z]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set7'),
(456, 'import re\r\n\r\ntxt = \"8 times before 11:45 AM\"\r\n\r\n#Check if the string has any + characters:\r\n\r\nx = re.findall(\"[+]\", txt)\r\nprint(x)\r\n\r\nif x:\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_set8'),
(457, 'import re\r\n\r\n#Return a list containing every occurrence of \"ai\":\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.findall(\"ai\", txt)\r\nprint(x)', 71, 'demo_regex_findall'),
(458, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\n\r\n#Check if \"Portugal\" is in the string:\r\n\r\nx = re.findall(\"Portugal\", txt)\r\nprint(x)\r\n\r\nif (x):\r\n    print(\"Yes, there is at least one match!\")\r\nelse:\r\n    print(\"No match\")', 71, 'demo_regex_findall2'),
(459, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(\"\\s\", txt)\r\n\r\nprint(\"The first white-space character is located in position:\", x.start( ))', 71, 'demo_regex_search'),
(460, 'import re\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(\"Portugal\", txt)\r\nprint(x)', 71, 'demo_regex_search2'),
(461, 'import re\r\n\r\n#Split the string at every white-space character:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.split(\"\\s\", txt)\r\nprint(x)', 71, 'demo_regex_split'),
(462, 'import re\r\n\r\n#Split the string at the first white-space character:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.split(\"\\s\", txt, 1)\r\nprint(x)', 71, 'demo_regex_split2'),
(463, 'import re\r\n\r\n#Replace all white-space characters with the digit \"9\":\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.sub(\"\\s\", \"9\", txt)\r\nprint(x)', 71, 'demo_regex_sub'),
(464, 'import re\r\n\r\n#Replace the first two occurrences of a white-space character with the digit 9:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.sub(\"\\s\", \"9\", txt, 2)\r\nprint(x)', 71, 'demo_regex_sub2'),
(465, 'import re\r\n\r\n#The search( ) function returns a Match object:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(\"ai\", txt)\r\nprint(x)\r\nprint(\"Please try it in your local environment to get proper output.\")', 71, 'demo_regex_match'),
(466, 'import re\r\n\r\n#Search for an upper case \"S\" character in the beginning of a word, and print its position:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(r\"\\bS\\w+\", txt)\r\nprint(x.span( ))', 71, 'demo_regex_match_span'),
(467, 'import re\r\n\r\n#The string property returns the search string:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(r\"\\bS\\w+\", txt)\r\nprint(x.string)', 71, 'demo_regex_match_string'),
(468, 'import re\r\n\r\n#Search for an upper case \"S\" character in the beginning of a word, and print the word:\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(r\"\\bS\\w+\", txt)\r\nprint(x.group( ))', 71, 'demo_regex_match_group'),
(469, 'import camelcase\r\n\r\nc = camelcase.CamelCase( )\r\n\r\ntxt = \"lorem ipsum dolor sit amet\"\r\n\r\nprint(c.hump(txt))\r\n\r\n#This method capitalizes the first letter of each word.', 72, 'demo_camelcase'),
(470, '#The try block will generate an error, because x is not defined:\r\n\r\ntry:\r\n    print(x)\r\nexcept:\r\n    print(\"An exception occurred\")', 73, 'demo_try_except'),
(471, '#This will raise an exception, because x is not defined:\r\n\r\nprint(x)', 73, 'demo_try_except_error'),
(472, '#The try block will generate a NameError, because x is not defined:\r\n\r\ntry:\r\n    print(x)\r\nexcept NameError:\r\n    print(\"Variable x is not defined\")\r\nexcept:\r\n    print(\"Something else went wrong\")', 73, 'demo_try_except2'),
(473, '#The try block does not raise any errors, so the else block is executed:\r\n\r\ntry:\r\n    print(\"Hello\")\r\nexcept:\r\n    print(\"Something went wrong\")\r\nelse:\r\n    print(\"Nothing went wrong\")', 73, 'demo_try_except3'),
(474, '#The finally block gets executed no matter if the try block raises any errors or not:\r\n\r\ntry:\r\n    print(x)\r\nexcept:\r\n    print(\"Something went wrong\")\r\nfinally:\r\n    print(\"The \'try except\' is finished\")', 73, 'demo_try_except4'),
(475, '#The try block will raise an error when trying to write to a read-only file:\r\n\r\ntry:\r\n    f = open(\"demofile.txt\")\r\n    try:\r\n        f.write(\"Lorum Ipsum\")\r\n    except:\r\n        print(\"Something went wrong when writing to the file\")\r\n    finally:\r\n        f.close()\r\nexcept:\r\n    print(\"Something went wrong when opening the file\")', 73, 'demo_try_except5'),
(476, 'x = -1\r\n\r\nif x < 0:\r\n    raise Exception(\"Sorry, no numbers below zero\")', 73, 'demo_ref_keyword_raise'),
(477, 'x = \"hello\"\r\n\r\nif not type(x) is int:\r\n    raise TypeError(\"Only integers are allowed\")', 73, 'demo_ref_keyword_raise2'),
(478, '# Enter username:\r\nusername = input( )\r\nprint(\"Username is: \" + username)', 74, 'demo_user_input3'),
(479, '# Please try it in your local environment to get proper output.\r\n# it will give an error here.\r\nusername = raw_input(\"Enter username:\")\r\nprint(\"Username is: \" + username)', 74, 'demo_user_input2'),
(480, 'price = 49\r\ntxt = \"The price is {} dollars\"\r\nprint(txt.format(price))', 75, 'demo_string_formatting1'),
(481, 'price = 49\r\ntxt = \"The price is {:.2f} dollars\"\r\nprint(txt.format(price))', 75, 'demo_string_formatting2'),
(482, 'quantity = 3\r\nitemno = 567\r\nprice = 49\r\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\r\nprint(myorder.format(quantity, itemno, price))', 75, 'demo_string_formatting3'),
(483, 'quantity = 3\r\nitemno = 567\r\nprice = 49\r\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\r\nprint(myorder.format(quantity, itemno, price))', 75, 'demo_string_formatting4'),
(484, 'age = 36\r\nname = \"John\"\r\ntxt = \"His name is {1}. {1} is {0} years old.\"\r\nprint(txt.format(age, name))', 75, 'demo_string_formatting5'),
(485, 'myorder = \"I have a {carname}, it is a {model}.\"\r\nprint(myorder.format(carname = \"Ford\", model = \"Mustang\"))', 75, 'demo_string_formatting6'),
(486, 'x = 5\r\nprint(type(x))\r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type'),
(487, 'x = \"Hello World\"\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_str'),
(488, 'x = 20\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_int'),
(489, 'x = 20.5\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_float'),
(490, 'x = 1j\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_complex'),
(491, 'x = [\"apple\", \"banana\", \"cherry\"]\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_list'),
(492, 'x = (\"apple\", \"banana\", \"cherry\")\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_tuple'),
(493, 'x = range(6)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_range'),
(494, 'x = {\"name\" : \"John\", \"age\" : 36}\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_dict'),
(495, 'x = {\"apple\", \"banana\", \"cherry\"}\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_set'),
(496, 'x = frozenset({\"apple\", \"banana\", \"cherry\"})\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_frozenset'),
(497, 'x = True\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bool'),
(498, 'x = b\"Hello\"\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bytes'),
(499, 'x = bytearray(5)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bytearray'),
(500, 'x = memoryview(bytes(5))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_memoryview'),
(501, 'x = None\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_nonetype'),
(502, 'x = str(\"Hello World\")\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_str2'),
(503, 'x = int(20)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_int2'),
(504, 'x = float(20.5)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_float2'),
(505, 'x = complex(1j)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_complex2'),
(506, 'x = list((\"apple\", \"banana\", \"cherry\"))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_list2'),
(507, 'x = tuple((\"apple\", \"banana\", \"cherry\"))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_tuple2'),
(508, 'x = range(6)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_range2'),
(509, 'x = dict(name=\"John\", age=36)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_dict2'),
(510, 'x = set((\"apple\", \"banana\", \"cherry\"))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_set2'),
(511, 'x = frozenset((\"apple\", \"banana\", \"cherry\"))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_frozenset2'),
(512, 'x = bool(5)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bool2'),
(513, 'x = bytes(5)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bytes2'),
(514, 'x = bytearray(5)\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_bytearray2'),
(515, 'x = memoryview(bytes(5))\r\n\r\n#display x:\r\nprint(x)\r\n\r\n#display the data type of x:\r\nprint(type(x)) \r\nprint(\"Please try it in your local environment to get proper output.\")', 10, 'demo_type_memoryview2'),
(516, 'x = 1\r\ny = 2.8\r\nz = 1j\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers'),
(517, 'x = 1\r\ny = 35656222554887711\r\nz = -3255522\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers_int'),
(518, 'x = 1.10\r\ny = 1.0\r\nz = -35.59\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers_float'),
(519, 'x = 35e3\r\ny = 12E4\r\nz = -87.7e100\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers_float2'),
(520, 'x = 3+5j\r\ny = 5j\r\nz = -5j\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\n\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers_complex'),
(521, '#convert from int to float:\r\nx = float(1)\r\n\r\n#convert from float to int:\r\ny = int(2.8)\r\n\r\n#convert from int to complex:\r\nz = complex(1)\r\n\r\nprint(x)\r\nprint(y)\r\nprint(z)\r\n\r\nprint(type(x))\r\nprint(type(y))\r\nprint(type(z))\r\nprint(\"Please try it in your local environment to get proper output.\")', 11, 'demo_numbers_convert'),
(522, 'import random\r\n\r\nprint(random.randrange(1, 10))', 11, 'demo_numbers_random');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `questions_learncodes`
--
ALTER TABLE `questions_learncodes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `questions_learncodes_learn_id_a7c15bed_fk_questions_learn_id` (`learn_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `questions_learncodes`
--
ALTER TABLE `questions_learncodes`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=523;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `questions_learncodes`
--
ALTER TABLE `questions_learncodes`
  ADD CONSTRAINT `questions_learncodes_learn_id_a7c15bed_fk_questions_learn_id` FOREIGN KEY (`learn_id`) REFERENCES `questions_learn` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
