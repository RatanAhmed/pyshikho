-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Aug 11, 2023 at 09:44 AM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `pyshikho-django`
--

-- --------------------------------------------------------

--
-- Table structure for table `auth_group`
--

CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL,
  `name` varchar(150) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `auth_group_permissions`
--

CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `auth_permission`
--

CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `auth_permission`
--

INSERT INTO `auth_permission` (`id`, `name`, `content_type_id`, `codename`) VALUES
(1, 'Can add log entry', 1, 'add_logentry'),
(2, 'Can change log entry', 1, 'change_logentry'),
(3, 'Can delete log entry', 1, 'delete_logentry'),
(4, 'Can add permission', 2, 'add_permission'),
(5, 'Can change permission', 2, 'change_permission'),
(6, 'Can delete permission', 2, 'delete_permission'),
(7, 'Can add group', 3, 'add_group'),
(8, 'Can change group', 3, 'change_group'),
(9, 'Can delete group', 3, 'delete_group'),
(10, 'Can add user', 4, 'add_user'),
(11, 'Can change user', 4, 'change_user'),
(12, 'Can delete user', 4, 'delete_user'),
(13, 'Can add content type', 5, 'add_contenttype'),
(14, 'Can change content type', 5, 'change_contenttype'),
(15, 'Can delete content type', 5, 'delete_contenttype'),
(16, 'Can add session', 6, 'add_session'),
(17, 'Can change session', 6, 'change_session'),
(18, 'Can delete session', 6, 'delete_session'),
(19, 'Can add questions', 7, 'add_questions'),
(20, 'Can change questions', 7, 'change_questions'),
(21, 'Can delete questions', 7, 'delete_questions'),
(22, 'Can view log entry', 1, 'view_logentry'),
(23, 'Can view permission', 2, 'view_permission'),
(24, 'Can view group', 3, 'view_group'),
(25, 'Can view user', 4, 'view_user'),
(26, 'Can view content type', 5, 'view_contenttype'),
(27, 'Can view session', 6, 'view_session'),
(28, 'Can view questions', 7, 'view_questions'),
(29, 'Can add learn', 8, 'add_learn'),
(30, 'Can change learn', 8, 'change_learn'),
(31, 'Can delete learn', 8, 'delete_learn'),
(32, 'Can view learn', 8, 'view_learn');

-- --------------------------------------------------------

--
-- Table structure for table `auth_user`
--

CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL,
  `password` varchar(128) NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) NOT NULL,
  `first_name` varchar(150) NOT NULL,
  `last_name` varchar(150) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `auth_user`
--

INSERT INTO `auth_user` (`id`, `password`, `last_login`, `is_superuser`, `username`, `first_name`, `last_name`, `email`, `is_staff`, `is_active`, `date_joined`) VALUES
(1, 'pbkdf2_sha256$600000$qUx6vmESsQ6m0CpQSUkhFW$PbEkZNmrkluD4zypWEY/9L8GUOY1gN50aSlWSgbnBwc=', '2023-08-04 05:58:14.996460', 1, 'admin', '', '', 'admin@pyshikho.com', 1, 1, '2023-04-11 23:29:33.317954');

-- --------------------------------------------------------

--
-- Table structure for table `auth_user_groups`
--

CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `auth_user_user_permissions`
--

CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `django_admin_log`
--

CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext DEFAULT NULL,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) UNSIGNED NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `django_admin_log`
--

INSERT INTO `django_admin_log` (`id`, `action_time`, `object_id`, `object_repr`, `action_flag`, `change_message`, `content_type_id`, `user_id`) VALUES
(1, '2023-04-11 23:34:11.306855', '3', 'Subtract two numbers which accept by the user.', 2, '[{\"changed\": {\"fields\": [\"solution\"]}}]', 7, 1),
(2, '2023-05-24 12:44:59.718193', '16', 'Write a Python program that prints the calendar for a given month and year. Note : Use \'calendar\' module.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\"]}}]', 7, 1),
(3, '2023-05-24 13:06:01.437171', '16', 'Write a Python program that prints the calendar for a given month and year. Note : Use \'calendar\' module.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(4, '2023-05-24 13:07:08.474068', '16', 'Write a Python program that prints the calendar for a given month and year. Note : Use \'calendar\' module.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(5, '2023-05-24 13:34:10.338744', '18', 'Write a Python program to calculate the number of days between two dates.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(6, '2023-05-24 13:37:01.381227', '18', 'Write a Python program to calculate the number of days between two dates.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(7, '2023-05-24 13:42:25.508283', '18', 'Write a Python program to calculate the number of days between two dates.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(8, '2023-06-02 19:01:15.647044', '2', 'Add two numbers which accept by the user.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(9, '2023-06-02 19:02:18.618170', '3', 'Subtract two numbers which accept by the user.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(10, '2023-06-02 19:03:26.568690', '4', 'Multiplication / Product of two numbers which accepts by the user.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(11, '2023-06-02 19:04:00.216992', '5', 'Division of two numbers which accepts by the user.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(12, '2023-06-02 19:05:10.965883', '7', 'Write a Python program to display the current date and time.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(13, '2023-06-02 19:06:37.261987', '9', 'Write a Python program that accepts the user\'s first and last name and prints them in reverse order with a space between them.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(14, '2023-06-02 19:09:06.239106', '8', 'Write a Python program that calculates the area of a circle based on the radius entered by the user.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\"]}}]', 7, 1),
(15, '2023-06-02 19:11:11.074602', '9', 'Write a Python program that accepts the user\'s first and last name and prints them in reverse order with a space between them.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(16, '2023-06-02 19:13:24.281091', '10', 'Write a Python program that accepts a sequence of comma-separated numbers from the user and generates a list and a tuple of those numbers.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(17, '2023-06-02 19:14:14.096999', '10', 'Write a Python program that accepts a sequence of comma-separated numbers from the user and generates a list and a tuple of those numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(18, '2023-06-02 19:15:49.921459', '11', 'Write a Python program to find out what version of Python you are using.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(19, '2023-06-02 19:17:55.953455', '12', 'Write a Python program that accepts a filename from the user and prints the extension of the file.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\"]}}]', 7, 1),
(20, '2023-06-02 19:18:27.172730', '12', 'Write a Python program that accepts a filename from the user and prints the extension of the file.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(21, '2023-06-02 19:20:55.221295', '13', 'Write a Python program to display the first and last colors from the following list. color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(22, '2023-06-02 19:21:41.600995', '14', 'Write a Python program to display the examination schedule. (extract the date from exam_st_date). exam_st_date = (11, 12, 2014)', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(23, '2023-06-02 19:22:33.178561', '15', 'Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(24, '2023-06-02 19:31:59.126741', '25', 'Write a Python program that determines whether a given number (accepted from the user) is even or odd, and prints an appropriate message to the user.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\"]}}]', 7, 1),
(25, '2023-06-02 19:36:55.023258', '27', 'Write a Python program to get n (non-negative integer) copies of the first 2 characters of a given string. Return n copies of the whole string if the length is less than 2.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(26, '2023-06-02 19:45:26.627217', '30', 'Write a Python program to create a histogram from a given list of integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(27, '2023-06-02 19:49:47.245645', '31', 'Write a Python program that concatenates all elements in a list into a string and returns it.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(28, '2023-06-02 19:54:14.036502', '32', 'Write a Python program to print all even numbers from a given list of numbers in the same order and stop printing any after 237 in the sequence.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(29, '2023-06-03 02:31:37.661037', '33', 'Write a Python program that prints out all colors from color_list_1 that are not present in color_list_2. Test Data: color_list_1 = set([\"White\", \"Black\", \"Red\"]) color_list_2 = set([\"Red\", \"Green\"]) ', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(30, '2023-06-03 02:32:32.061310', '33', 'Write a Python program that prints out all colors from color_list_1 that are not present in color_list_2. Test Data: color_list_1 = set([\"White\", \"Black\", \"Red\"]) color_list_2 = set([\"Red\", \"Green\"]) ', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(31, '2023-06-03 02:41:01.794894', '33', 'Write a Python program that prints out all colors from color_list_1 that are not present in color_list_2. Test Data: color_list_1 = set([\"White\", \"Black\", \"Red\"]) color_list_2 = set([\"Red\", \"Green\"]) ', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(32, '2023-06-03 02:44:31.053494', '34', 'Write a Python program that will accept the base and height of a triangle and compute its area.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(33, '2023-06-03 02:46:07.461863', '34', 'Write a Python program that will accept the base and height of a triangle and compute its area.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(34, '2023-06-03 02:54:43.173295', '35', 'Write a Python program that computes the greatest common divisor (GCD) of two positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(35, '2023-06-03 02:56:00.408866', '35', 'Write a Python program that computes the greatest common divisor (GCD) of two positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(36, '2023-06-03 03:11:16.645125', '35', 'Write a Python program that computes the greatest common divisor (GCD) of two positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(37, '2023-06-03 03:14:25.712814', '36', 'Write a Python program to find the least common multiple (LCM) of two positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(38, '2023-06-03 03:22:04.967982', '37', 'Write a Python program to sum three given integers. However, if two values are equal, the sum will be zero.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(39, '2023-06-03 03:35:03.522552', '38', 'Write a Python program to sum two given integers. However, if the sum is between 15 and 20 it will return 20.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(40, '2023-06-03 03:42:50.923092', '39', 'Write a Python program that returns true if the two given integer values are equal or their sum or difference is 5.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(41, '2023-06-03 04:02:02.438747', '40', 'Write a Python program to add two objects if both objects are integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(42, '2023-06-03 04:09:37.291201', '41', 'Write a Python program that displays your name, age, and address on three different lines.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(43, '2023-06-03 04:38:40.095151', '42', 'Write a Python program to solve (x + y) * (x + y).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Is input required\"]}}]', 7, 1),
(44, '2023-06-03 04:40:51.472574', '42', 'Write a Python program to solve (x + y) * (x + y).', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(45, '2023-06-03 04:43:43.096498', '42', 'Write a Python program to solve (x + y) * (x + y).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(46, '2023-06-03 04:44:24.447114', '42', 'Write a Python program to solve (x + y) * (x + y).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(47, '2023-06-03 05:08:55.649038', '43', 'Write a Python program to compute the future value of a specified principal amount, rate of interest, and the number of years.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Is input required\"]}}]', 7, 1),
(48, '2023-06-03 05:10:55.423479', '43', 'Write a Python program to compute the future value of a specified principal amount, rate of interest, and the number of years.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(49, '2023-06-03 05:13:04.612473', '44', 'Write a Python program to calculate the distance between the points (x1, y1) and (x2, y2).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(50, '2023-06-03 05:20:35.273601', '47', 'Write a Python program to get OS name, platform and release information.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(51, '2023-06-03 06:07:32.159276', '52', 'Write a Python program to parse a string to float or integer.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(52, '2023-06-03 06:29:42.129915', '53', 'Write a Python program to list all files in a directory.', 3, '', 7, 1),
(53, '2023-06-03 06:37:31.009977', '54', 'Write a Python program to print without a newline or space.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(54, '2023-06-03 06:54:50.188047', '55', 'Write a Python program to determine the profiling of Python programs.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(55, '2023-06-03 07:00:43.269662', '57', 'Write a Python program to access environment variables.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(56, '2023-06-03 07:05:24.394901', '59', 'Write a Python program to find local IP addresses using Python\'s stdlib.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(57, '2023-06-03 07:10:46.232939', '61', 'Write a Python program to get the execution time of a Python method.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(58, '2023-06-03 07:14:59.466492', '62', 'Write a Python program to sum the first n positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(59, '2023-06-03 07:18:50.951479', '63', 'Write a Python program to convert height (in feet and inches) to centimeters.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(60, '2023-06-03 07:21:58.928220', '63', 'Write a Python program to convert height (in feet and inches) to centimeters.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(61, '2023-06-03 10:10:55.292333', '64', 'Write a Python program to calculate the hypotenuse of a right angled triangle.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(62, '2023-06-03 10:15:01.013365', '65', 'Write a Python program to convert the distance (in feet) to inches, yards, and miles.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(63, '2023-06-03 10:21:00.965925', '66', 'Write a Python program to convert all units of time into seconds.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(64, '2023-06-03 10:32:11.976046', '68', 'Write a Python program that retrieves the date and time of file creation and modification.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(65, '2023-06-03 10:37:48.210903', '69', 'Write a Python program that converts seconds into days, hours, minutes, and seconds.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(66, '2023-06-03 10:43:17.931249', '70', 'Write a Python program to calculate the body mass index.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(67, '2023-06-03 10:47:52.312451', '71', 'Write a Python program to convert pressure in kilopascals to pounds per square inch,a millimeter of mercury (mmHg) and atmosphere pressure.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(68, '2023-06-03 10:51:13.184648', '72', 'Write a Python program to calculate sum of digits of a number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(69, '2023-06-03 10:54:28.828620', '73', 'Write a Python program to sort three integers without using conditional statements and loops.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(70, '2023-06-03 10:57:42.091324', '74', 'Write a Python program to sort files by date.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\"]}}]', 7, 1),
(71, '2023-06-03 10:59:17.290373', '74', 'Write a Python program to sort files by date.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(72, '2023-06-03 10:59:40.695598', '74', 'Write a Python program to sort files by date.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(73, '2023-06-03 11:06:14.875081', '75', 'Write a Python program to get a directory listing, sorted by creation date.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(74, '2023-06-03 11:11:31.965015', '76', 'Write a Python program to get the details of the math module.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(75, '2023-06-03 11:22:30.904689', '77', 'Write a Python program to calculate the midpoints of a line.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(76, '2023-06-03 11:30:07.913686', '78', 'Write a Python program to hash a word.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(77, '2023-06-03 11:32:43.413424', '79', 'Write a Python program to get the copyright information and write Copyright information in Python code.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(78, '2023-06-03 12:09:05.747069', '269', 'Write a Python program to identify prime numbers between 1 and 100 (integers). Print the prime numbers.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\"]}}]', 7, 1),
(79, '2023-06-03 18:29:42.448324', '81', 'Write a Python program to test whether the system is a big-endian platform or a little-endian platform.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(80, '2023-06-03 18:31:26.888669', '82', 'Write a Python program to find the available built-in modules.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(81, '2023-06-03 18:37:50.411453', '83', 'Write a Python program to get the size of an object in bytes.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(82, '2023-06-03 18:41:30.833135', '84', 'Write a Python program to get the current value of the recursion limit.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(83, '2023-06-03 18:44:53.203268', '85', 'Write a Python program to concatenate N strings.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(84, '2023-06-03 18:49:45.759099', '86', 'Write a Python program to calculate the sum of all items of a container (list).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(85, '2023-06-03 18:54:18.543344', '87', 'Write a Python program to calculate the sum of all items of a container (dictionary).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(86, '2023-06-03 18:56:40.288881', '88', 'Write a Python program to calculate the sum of all items of a container (tuple).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(87, '2023-06-03 18:58:53.002364', '89', 'Write a Python program to calculate the sum of all items of a container (set).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(88, '2023-06-03 19:03:32.113018', '90', 'Write a Python program to test whether all numbers in a list are greater than a certain number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(89, '2023-06-03 19:09:49.533122', '91', 'Write a Python program to count the number of occurrences of a specific character in a string using count() function.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(90, '2023-06-03 19:14:58.209494', '92', 'Write a Python program to count the number of occurrences of a specific character in a string using loop.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(91, '2023-06-03 19:19:07.251622', '93', 'Write a Python program to count the number of occurrences of a specific character in a string using collections.Counter().', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(92, '2023-06-03 19:23:19.457026', '94', 'Write a Python program to count the number of occurrences of a specific character in a string using Lambda functions.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(93, '2023-06-03 19:25:40.597932', '95', 'Write a Python program to count the number of occurrences of a specific character in a string using Regular Expressions.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(94, '2023-06-03 19:31:33.394560', '96', 'Write a Python program to check whether a file path is a file or a directory.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(95, '2023-06-03 19:33:31.580831', '97', 'Write a Python program to get the ASCII value of a character.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(96, '2023-06-03 19:37:48.071316', '98', 'Write a Python program to get the size of a file.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(97, '2023-06-03 19:39:16.193418', '99', 'Given variables x=30 and y=20, write a Python program to print \"30+20=50\".', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(98, '2023-06-03 19:40:52.518897', '100', 'Write a Python program to perform an action if a condition is true.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(99, '2023-06-03 20:00:35.585413', '102', 'Write a Python program to swap two variables.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(100, '2023-06-03 20:06:02.823977', '104', 'Write a Python program to get the Identity, Type, and Value of an object.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(101, '2023-06-03 20:08:41.093167', '105', 'Write a Python program to convert the bytes in a given string to a list of integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(102, '2023-06-03 20:15:06.328178', '106', 'Write a Python program to check whether a string is numeric.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(103, '2023-06-04 07:37:45.364556', '629', 'Test', 1, '[{\"added\": {}}]', 7, 1),
(104, '2023-06-10 21:57:11.458828', '53', 'Print Hello world! in Python Program.', 2, '[{\"changed\": {\"fields\": [\"learn_or_practice\"]}}]', 7, 1),
(105, '2023-06-10 22:00:37.965505', '1', 'Print Hello world! in Python Program.', 2, '[{\"changed\": {\"fields\": [\"solution\", \"learn_or_practice\"]}}]', 7, 1),
(106, '2023-06-21 16:51:59.777282', '115', 'Write a Python program to get the user\'s environment.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(107, '2023-06-21 16:52:33.906716', '115', 'Write a Python program to get the user\'s environment.', 2, '[{\"changed\": {\"fields\": [\"Learn or practice\"]}}]', 7, 1),
(108, '2023-06-21 17:10:46.691454', '116', 'Write a Python program to divide a path by the extension separator.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(109, '2023-06-21 17:20:24.055909', '117', 'Write a Python program to retrieve file properties.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(110, '2023-06-21 17:23:37.731302', '118', 'Write a Python program to find the path to a file or directory when you encounter a path name.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(111, '2023-06-21 17:32:51.729553', '119', 'Write a Python program to check if a number is positive, negative or zero.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(112, '2023-06-21 17:51:20.210628', '120', 'Write a Python program to get numbers divisible by fifteen from a list using an anonymous function.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(113, '2023-06-21 19:55:11.525333', '121', 'Write a Python program to make file lists from the current directory using a wildcard.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(114, '2023-06-21 19:56:49.727836', '122', 'Write a Python program to remove the first item from a specified list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(115, '2023-06-21 19:59:43.663654', '123', 'Write a Python program that inputs a number and generates an error message if it is not a number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(116, '2023-06-21 20:03:20.950558', '124', 'Write a Python program to filter positive numbers from a list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(117, '2023-06-21 20:06:57.666279', '125', 'Write a Python program to compute the product of a list of integers (without using for loop).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(118, '2023-06-21 20:22:59.720325', '126', 'Write a Python program to print Unicode characters.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(119, '2023-06-21 20:25:54.708299', '127', 'Write a Python program to prove that two string variables of the same value point to the same memory location.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(120, '2023-06-21 20:33:37.234900', '128', 'Write a Python program to create a bytearray from a list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(121, '2023-06-21 20:39:36.436308', '129', 'Write a Python program to round a floating-point number to a specified number of decimal places.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(122, '2023-06-21 20:43:22.721224', '130', 'Write a Python program to format a specified string and limit the length of a string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(123, '2023-06-21 20:46:19.564255', '131', 'Write a Python program to determine if a variable is defined or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(124, '2023-06-21 20:51:46.300747', '132', 'Write a Python program to empty a variable without destroying it.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(125, '2023-06-21 20:57:41.898224', '133', 'Write a Python program to determine the largest and smallest integers, longs, and floats.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(126, '2023-06-21 21:00:05.160985', '134', 'Write a Python program to check whether multiple variables have the same value.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(127, '2023-06-21 21:05:20.073325', '135', 'Write a Python program to sum all counts in a collection.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(128, '2023-06-21 21:10:25.647349', '136', 'Write a Python program to get the actual module object for a given object.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(129, '2023-06-21 21:16:04.407713', '137', 'Write a Python program to check whether an integer fits in 64 bits.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(130, '2023-06-21 21:19:47.144121', '138', 'Write a Python program to check whether lowercase letters exist in a string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(131, '2023-06-21 21:24:57.593994', '139', 'Write a Python program to add leading zeroes to a string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(132, '2023-06-21 21:27:04.392596', '139', 'Write a Python program to add leading zeroes to a string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(133, '2023-06-21 21:32:01.674392', '140', 'Write a Python program that uses double quotes to display strings.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(134, '2023-06-21 21:34:57.102844', '141', 'Write a Python program to split a variable length string into variables.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(135, '2023-06-21 21:48:47.676796', '143', 'Write a Python program to calculate the time runs (difference between start and current time)of a program.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(136, '2023-06-21 21:58:51.963061', '144', 'Write a Python program to input two integers on a single line.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(137, '2023-06-21 22:05:47.828455', '144', 'Write a Python program to input two integers on a single line.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(138, '2023-06-21 22:07:47.383878', '144', 'Write a Python program to input two integers on a single line.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(139, '2023-06-21 22:11:55.554013', '145', 'Write a Python program to print a variable without spaces between values.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(140, '2023-06-21 22:13:13.179862', '146', 'Write a Python program to find files and skip directories in a given directory.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(141, '2023-06-21 22:15:38.239896', '147', 'Write a Python program to extract a single key-value pair from a dictionary into variables.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(142, '2023-06-21 22:17:15.913973', '148', 'Write a Python program to convert true to 1 and false to 0.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(143, '2023-06-21 22:32:47.033150', '149', 'Write a Python program to validate an IP address.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(144, '2023-06-21 22:33:39.295664', '149', 'Write a Python program to validate an IP address.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(145, '2023-06-21 22:34:04.296741', '149', 'Write a Python program to validate an IP address.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(146, '2023-06-21 22:36:03.783464', '150', 'Write a Python program to convert an integer to binary that keeps leading zeros.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(147, '2023-06-22 23:00:47.193249', '151', 'Write a python program to convert decimal to hexadecimal.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(148, '2023-06-22 23:05:27.671433', '152', 'Write a Python program to check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones of same length in a given string. Return True/False.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(149, '2023-06-22 23:10:52.521602', '155', 'Write a Python program to test if a variable is a list, tuple, or set.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(150, '2023-06-22 23:19:33.431482', '156', 'Write a Python program to find the location of Python module sources.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(151, '2023-06-22 23:23:03.605820', '157', 'Write a Python function to check whether a number is divisible by another number. Accept two integer values from the user.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(152, '2023-06-22 23:31:29.445306', '158', 'Write a Python function to find the maximum and minimum numbers from a sequence of numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(153, '2023-06-22 23:35:47.998267', '159', 'Write a Python function that takes a positive integer and returns the sum of the cube of all positive integers smaller than the specified number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(154, '2023-06-22 23:49:07.225290', '160', 'Write a Python function to check whether a distinct pair of numbers whose product is odd is present in a sequence of integer values.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(155, '2023-06-22 23:54:47.511503', '161', 'Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(156, '2023-06-23 13:32:37.219746', '162', 'Write a Python program that creates all possible strings using the letters \'a\', \'e\', \'i\', \'o\', and \'I\'. Ensure that each character is used only once.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(157, '2023-06-23 13:48:04.129497', '163', 'Write a Python program that removes and prints every third number from a list of numbers until the list is empty.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(158, '2023-08-04 13:47:28.546779', '164', 'Write a Python program to identify unique triplets whose three elements sum to zero from an array of n integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(159, '2023-08-04 13:56:11.306265', '165', 'Write a Python program to make combinations of 3 digits.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(160, '2023-08-04 14:07:09.696181', '166', 'Write a Python program that prints long text, converts it to a list, and prints all the words and the frequency of each word.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(161, '2023-08-04 14:12:30.620306', '167', 'Write a Python program that retrieves the top stories from Google News.', 2, '[{\"changed\": {\"fields\": [\"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(162, '2023-08-04 14:18:38.370547', '168', 'Write a Python program to get a list of locally installed Python modules.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(163, '2023-08-04 14:20:07.942937', '168', 'Write a Python program to get a list of locally installed Python modules.', 2, '[]', 7, 1),
(164, '2023-08-04 14:30:03.872578', '169', 'Write a Python program to display some information about the OS where the script is running.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(165, '2023-08-04 14:40:19.914936', '170', 'Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(166, '2023-08-04 14:44:56.956737', '171', 'Write a Python program that generates a list of all possible permutations from a given collection of distinct numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(167, '2023-08-04 14:49:46.285026', '172', 'Write a Python program to get all possible two-digit letter combinations from a 1-9 digit string', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(168, '2023-08-04 14:56:26.509887', '173', 'Write a Python program to add two positive integers without using the \'+\' operator.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(169, '2023-08-04 14:59:22.635322', '174', 'Write a Python program to check the priority of the four operators (+, -, *, /).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(170, '2023-08-04 15:06:08.564840', '175', 'Write a Python program to get the third side of a right-angled triangle from two given sides.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(171, '2023-08-04 15:14:25.251595', '176', 'Write a Python program to get all strobogrammatic numbers that are of length n.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(172, '2023-08-04 15:22:20.887356', '177', 'Write a Python program to find the median among three given numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(173, '2023-08-04 15:26:11.005197', '178', 'Write a Python program that finds the value of n when n degrees of number 2 are written sequentially on a line without spaces between them.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(174, '2023-08-04 15:28:52.304915', '179', 'Write a Python program to find the number of zeros at the end of a factorial of a given positive number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(175, '2023-08-04 15:32:27.757363', '180', 'Write a Python program to find the number of notes (Samples of notes: 10, 20, 50, 100, 200, 500) against an amount.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(176, '2023-08-04 18:41:35.028524', '181', 'Write a Python program to create a sequence where the first four members of the sequence are equal to one. Each successive term of the sequence is equal to the sum of the four previous ones. Find the ', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(177, '2023-08-04 18:53:19.410528', '182', 'Write a Python program that accepts a positive number and subtracts from it the sum of its digits, and so on. Continue this operation until the number is positive.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(178, '2023-08-04 18:57:34.447645', '183', 'Write a Python program to find the total number of even or odd divisors of a given integer.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(179, '2023-08-04 19:05:58.515442', '184', 'Write a Python program to find the digits that are missing from a given mobile number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(180, '2023-08-04 19:13:43.609671', '185', 'Write a Python program to compute the summation of the absolute difference of all distinct pairs in a given array (non-decreasing order).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(181, '2023-08-04 19:19:51.437174', '186', 'Write a Python program to find the type of the progression (arithmetic progression / geometric progression) and the next successive member of the three successive members of a sequence.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(182, '2023-08-04 19:32:10.519006', '187', 'Write a Python program to print the length of the series and the series from the given 3rd term, 3rd last term and the sum of a series.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(183, '2023-08-04 19:38:18.673667', '188', 'Write a Python program to find common divisors between two numbers in a given pair.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(184, '2023-08-04 19:42:07.028779', '189', 'Write a Python program to reverse the digits of a given number and add them to the original. Repeat this procedure if the sum is not a palindrome.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(185, '2023-08-04 19:47:22.789107', '190', 'Write a Python program to count the number of carry operations for each addition problem.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(186, '2023-08-04 19:52:36.331640', '191', 'Write a Python program to find the heights of the top three buildings in descending order from eight given buildings.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(187, '2023-08-04 19:59:02.179091', '192', 'Write a Python program to compute the digit number of the sum of two given integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(188, '2023-08-04 20:05:12.251213', '193', 'Write a Python program to check whether three given lengths (integers) of three sides form a right triangle. Print \"Yes\" if the given sides form a right triangle otherwise print \"No\".', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(189, '2023-08-04 20:10:04.162076', '194', 'Write a Python program which solve the equation:\r\nax+by=c\r\ndx+ey=f\r\nPrint the values of x, y where a, b, c, d, e and f are given.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(190, '2023-08-04 20:16:16.877856', '195', 'Write a Python program to compute the amount of debt in n months. Each month, the loan adds 5% interest to the $100,000 debt and rounds to the nearest 1,000 above.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(191, '2023-08-04 20:16:57.994909', '195', 'Write a Python program to compute the amount of debt in n months. Each month, the loan adds 5% interest to the $100,000 debt and rounds to the nearest 1,000 above.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(192, '2023-08-04 20:21:33.320327', '196', 'Write a Python program that reads an integer n and finds the number of combinations of a,b,c and d (0 = a,b,c,d = 9) where (a + b + c + d) will be equal to n.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(193, '2023-08-04 20:27:00.284571', '197', 'Write a Python program to print the number of prime numbers that are less than or equal to a given number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(194, '2023-08-05 07:06:50.382223', '198', 'Write a program to compute the radius and the central coordinate (x, y) of a circle which is constructed from three given points on the plane surface.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(195, '2023-08-05 07:16:24.245857', '199', 'Write a Python program to check if a point (x,y) is in a triangle or not. A triangle is formed by three points.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(196, '2023-08-05 07:22:54.388562', '200', 'Write a Python program to compute and print the sum of two given integers (greater or equal to zero). In the event that the given integers or the sum exceed 80 digits, print \"overflow\".', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(197, '2023-08-05 07:28:47.739652', '201', 'Write a Python program that accepts six numbers as input and sorts them in descending order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(198, '2023-08-06 06:21:05.922344', '202', 'Write a Python program to test whether two lines PQ and RS are parallel. The four points are P(x1, y1), Q(x2, y2), R(x3, y3), S(x4, y4).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(199, '2023-08-06 06:29:27.614632', '203', 'Write a Python program to find the maximum sum of a contiguous subsequence from a given sequence of numbers a1, a2, a3, ... an. A subsequence of one element is also a continuous subsequence.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(200, '2023-08-06 06:34:48.512489', '204', 'Write a Python program that reads a date (from 2016/1/1 to 2016/12/31) and prints the day of the date. Jan. 1, 2016, is Friday. Note that 2016 is a leap year.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(201, '2023-08-06 06:47:58.350953', '205', 'Write a Python program that reads n digits (given) chosen from 0 to 9 and prints the number of combinations where the sum of the digits equals another given number (s). Do not use the same digits in a', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(202, '2023-08-06 06:53:52.013745', '206', 'Write a Python program that reads the two adjoining sides and the diagonal of a parallelogram and checks whether the parallelogram is a rectangle or a rhombus.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(203, '2023-08-06 06:59:23.377415', '207', 'Write a Python program to replace a string \"Python\" with \"Java\" and \"Java\" with \"Python\" in a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(204, '2023-08-06 07:09:36.668696', '208', 'Write a Python program that determines the difference between the largest and smallest integers created by 8 numbers from 0 to 9. The number that can be rearranged shall start with 0 as in 00135668.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(205, '2023-08-06 07:22:18.813705', '209', 'Write a Python program to compute the sum of the first n prime numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(206, '2023-08-06 07:29:07.351373', '210', 'Write a Python program which accepts an even number (>=4, Goldbach number) from the user and creates combinations which express the given number as a sum of two prime numbers. Print the number of comb', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(207, '2023-08-06 11:04:40.043921', '211', 'Write a Python program to create the maximum number of regions obtained by drawing n given straight lines.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(208, '2023-08-06 11:19:44.869293', '212', 'There are four different points on a plane, P(xp,yp), Q(xq, yq), R(xr, yr) and S(xs, ys). Write a Python program to determine whether AB and CD are orthogonal.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(209, '2023-08-06 11:42:54.204137', '213', 'Write a Python program to sum all numerical values (positive integers) embedded in a sentence.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(210, '2023-08-06 11:45:19.266747', '213', 'Write a Python program to sum all numerical values (positive integers) embedded in a sentence.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(211, '2023-08-06 12:55:10.703656', '212', 'There are four different points on a plane, P(xp,yp), Q(xq, yq), R(xr, yr) and S(xs, ys). Write a Python program to determine whether AB and CD are orthogonal.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(212, '2023-08-06 13:00:49.904027', '214', 'Write a Python program to restore the original string by entering the compressed string with this rule. However, the # character does not appear in the restored character string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(213, '2023-08-06 13:58:01.954351', '215', 'Write a Python program that compute the area of the polygon . The vertices have the names vertex 1, vertex 2, vertex 3, ... vertex n according to the order of edge connections', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(214, '2023-08-06 14:17:13.042210', '216', 'Write a Python program to cut out words of 3 to 6 characters length from a given sentence not more than 1024 characters.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1);
INSERT INTO `django_admin_log` (`id`, `action_time`, `object_id`, `object_repr`, `action_flag`, `change_message`, `content_type_id`, `user_id`) VALUES
(215, '2023-08-06 15:14:38.739934', '217', 'Write a Python program that compute the maximum value of the sum of the passing integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(216, '2023-08-06 17:24:53.210040', '218', 'Write a Python program to find the number of combinations that satisfy p + q + r + s = n where n is a given number <= 4000 and p, q, r, s are between 0 to 1000.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(217, '2023-08-06 17:34:05.961153', '219', 'Write a Python program that adds up the columns and rows of the given table as shown in a specified figure.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(218, '2023-08-06 17:35:43.312307', '220', 'Given a list of numbers and a number k, write a Python program to check whether the sum of any two numbers from the list is equal to k or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(219, '2023-08-06 17:36:15.442632', '220', 'Given a list of numbers and a number k, write a Python program to check whether the sum of any two numbers from the list is equal to k or not.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(220, '2023-08-06 17:43:12.481224', '221', 'Write a Python program to find the longest word in a set of words which is a subsequence of a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(221, '2023-08-06 17:45:25.430425', '222', 'Write a Python program to check whether a number is \"happy\" or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(222, '2023-08-06 17:47:52.025285', '223', 'Write a Python program to find and print the first 10 happy numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(223, '2023-08-06 17:51:25.422798', '224', 'Write a Python program that counts the number of prime numbers that are less than a given non-negative number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(224, '2023-08-06 17:52:10.379418', '224', 'Write a Python program that counts the number of prime numbers that are less than a given non-negative number.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(225, '2023-08-06 17:58:24.927319', '225', 'Write a Python program to check if two given strings are isomorphic to each other or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(226, '2023-08-06 18:08:27.263296', '226', 'Write a Python program to find the longest common prefix string among a given array of strings. Return false if there is no common prefix.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(227, '2023-08-06 18:32:33.240722', '227', 'Write a Python program to reverse only the vowels of a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(228, '2023-08-06 18:35:35.280007', '228', 'Write a Python program to check whether a given integer is a palindrome or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(229, '2023-08-06 18:39:37.890844', '229', 'Write a Python program that removes duplicate elements from a given array of numbers so that each element appears only once and returns the new length of the array.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(230, '2023-08-06 18:56:54.824312', '230', 'Write a Python program to calculate the maximum profit from selling and buying values of stock. An array of numbers represent the stock prices in chronological order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(231, '2023-08-07 04:48:29.142845', '231', 'Write a Python program to remove all instances of a given value from a given array of integers and find the length of the newly created array.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(232, '2023-08-07 04:52:13.688724', '232', 'Write a Python program to find the starting and ending position of a given value in a given array of integers, sorted in ascending order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(233, '2023-08-07 05:12:36.145660', '233', 'Write a Python program to find the maximum profit in one transaction i.e., buy one and sell one share of the stock from the given price value of the said array. You cannot sell a stock before you buy ', 2, '[{\"changed\": {\"fields\": [\"Slug\", \"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(234, '2023-08-07 05:20:37.789218', '234', 'Write a Python program to print a given N by M matrix of numbers line by line in forward > backwards > forward >... order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(235, '2023-08-07 05:23:40.708931', '235', 'Write a Python program to calculate the median from a list of numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(236, '2023-08-07 05:27:06.390427', '235', 'Write a Python program to calculate the median from a list of numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(237, '2023-08-07 05:32:19.374384', '236', 'Write a Python program to test whether a given number is symmetrical or not. A number is symmetrical when it is equal to its reverse.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(238, '2023-08-07 05:32:45.477643', '236', 'Write a Python program to test whether a given number is symmetrical or not. A number is symmetrical when it is equal to its reverse.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(239, '2023-08-07 05:34:34.504128', '235', 'Write a Python program to calculate the median from a list of numbers.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(240, '2023-08-07 05:43:13.808752', '237', 'Write a Python program that accepts a list of numbers. Count the negative numbers and compute the sum of the positive numbers of the said list. Return these values through a list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(241, '2023-08-07 05:43:54.061035', '237', 'Write a Python program that accepts a list of numbers. Count the negative numbers and compute the sum of the positive numbers of the said list. Return these values through a list.', 2, '[]', 7, 1),
(242, '2023-08-07 05:49:15.066081', '238', 'Write a Python program to check whether a given string is an \"isogram\" or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(243, '2023-08-07 05:53:45.771588', '226', 'Write a Python program to find the longest common prefix string among a given array of strings. Return false if there is no common prefix.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(244, '2023-08-07 05:54:22.774918', '227', 'Write a Python program to reverse only the vowels of a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(245, '2023-08-07 05:58:38.597530', '239', 'Write a Python program to count the number of equal numbers from three given integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(246, '2023-08-07 06:01:19.030051', '240', 'Write a Python program to check whether a given employee code is exactly 8 digits or 12 digits. Return True if the employee code is valid and False if it\'s not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(247, '2023-08-07 07:50:02.301295', '241', 'Write a Python program that accepts two strings and determines whether the letters in the second string are present in the first string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(248, '2023-08-07 07:51:42.993007', '241', 'Write a Python program that accepts two strings and determines whether the letters in the second string are present in the first string.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(249, '2023-08-07 08:00:46.590577', '242', 'Write a Python program to compute the sum of the three lowest positive numbers from a given list of numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(250, '2023-08-07 08:05:03.244428', '243', 'Write a Python program that replaces all but the last five characters of a string with \"*\" and returns the modified string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(251, '2023-08-07 08:15:44.767857', '244', 'Write a Python program to count the number of arguments in a given function.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(252, '2023-08-07 08:31:26.914385', '245', 'Write a Python program to compute the cumulative sum of numbers in a given list. Note: Cumulative sum = sum of itself + all previous numbers in the said list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(253, '2023-08-07 08:39:20.122993', '246', 'Write a Python program to find the central character(s) of a given string. Return the two middle characters if the length of the string is even. Return the middle character if the length of the string', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(254, '2023-08-07 08:48:02.045912', '247', 'Write a Python program to find the largest product of a pair of adjacent elements from a given list of integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(255, '2023-08-07 09:06:50.528874', '248', 'Write a Python program that checks whether every even index contains an even number and every odd index contains an odd number of a given list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(256, '2023-08-07 09:15:10.289026', '249', 'Write a Python program to check whether a given number is a narcissistic number or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(257, '2023-08-07 09:17:38.246697', '250', 'Write a Python program to find the highest and lowest number from a given string of space-separated integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(258, '2023-08-07 09:23:15.935250', '251', 'Write a Python program to check whether a sequence of numbers has an increasing trend or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(259, '2023-08-07 09:28:31.837309', '252', 'Write a Python program to find the position of the second occurrence of a given string in another given string. If there is no such string return -1.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(260, '2023-08-07 09:33:17.833244', '253', 'Write a Python program to compute the sum of all items in a given array of integers where each integer is multiplied by its index. Return 0 if there is no number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(261, '2023-08-07 09:42:33.398088', '254', 'Write a Python program to find the name of the oldest student in a given dictionary containing the names and ages of a group of students.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(262, '2023-08-07 09:47:04.373405', '255', 'Write a Python program to create a string with no duplicate consecutive letters from a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(263, '2023-08-07 09:49:10.954655', '256', 'Write a Python program to check whether two given lines are parallel or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(264, '2023-08-07 09:54:50.661519', '257', 'Write a Python program to find a number in a given matrix that is maximum in its column and minimum in its row.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(265, '2023-08-07 09:55:22.991019', '257', 'Write a Python program to find a number in a given matrix that is maximum in its column and minimum in its row.', 2, '[]', 7, 1),
(266, '2023-08-07 10:00:58.941776', '258', 'Write a Python program to check whether a given sequence is linear, quadratic or cubic.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(267, '2023-08-07 10:04:50.029584', '259', 'Write a Python program to test whether a given integer is a Pandigital number or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(268, '2023-08-07 10:16:08.737605', '260', 'Write a Python program to check whether a given number is Oddish or Evenish.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(269, '2023-08-07 15:14:28.028077', '261', 'Write a Python program that takes three integers and checks whether the sum of the last digit of the first number and the last digit of the second number equals the last digit of the third number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(270, '2023-08-07 15:18:56.684970', '262', 'Write a Python program to find the indices of all occurrences of a given item in a given list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(271, '2023-08-07 15:19:59.665321', '262', 'Write a Python program to find the indices of all occurrences of a given item in a given list.', 2, '[]', 7, 1),
(272, '2023-08-07 15:22:34.549845', '263', 'Write a Python program to remove duplicate numbers from a given list of numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(273, '2023-08-07 15:26:07.905012', '264', 'Write a Python program which checks whether two circles in the same plane (with the same center (x,y) and radius) intersect. If intersection occurs, return true, otherwise return false.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(274, '2023-08-07 15:39:00.532635', '265', 'Write a Python program to compute the digit distance between two integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(275, '2023-08-07 15:43:34.243646', '266', 'Write a Python program to reverse all words of even lengths.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(276, '2023-08-07 15:48:50.413216', '267', 'Write a Python program to print letters from the English alphabet from a-z and A-Z.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(277, '2023-08-07 15:52:06.224290', '268', 'Write a Python program to generate and print a list of numbers from 1 to 10.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(278, '2023-08-07 16:10:36.652417', '269', 'Write a Python program to identify non-prime numbers between 1 and 100 (integers). Print the non-prime numbers.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(279, '2023-08-07 16:26:34.400645', '270', 'Write a Python program to identify prime numbers between 1 and 100 (integers). Print the prime numbers.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Solution\", \"Is input required\", \"Learn or practice\"]}}]', 7, 1),
(280, '2023-08-07 16:44:12.946370', '270', 'Write a Python program to identify prime numbers between 1 and 100 (integers). Print the prime numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\"]}}]', 7, 1),
(281, '2023-08-07 18:50:53.225236', '271', 'In multiprocessing, processes are spawned by creating a Process object.Write a Python program to show the individual process IDs (parent process, process ID etc.) involved.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(282, '2023-08-07 18:57:09.843246', '272', 'Write a Python program to check if two given numbers are Co Prime or not. Return True if two numbers are Co Prime otherwise return false.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(283, '2023-08-07 19:05:49.961660', '273', 'Write a Python program to calculate Euclid\'s totient function for a given integer. Use a primitive method to calculate Euclid\'s totient function.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(284, '2023-08-07 19:08:57.848430', '274', 'Write a Python program to create a coded string from a given string, using a specified formula.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(285, '2023-08-07 19:13:44.638062', '275', 'Write a Python program to check if a given string contains only lowercase or uppercase characters.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(286, '2023-08-07 19:14:05.027366', '275', 'Write a Python program to check if a given string contains only lowercase or uppercase characters.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(287, '2023-08-07 19:17:45.434218', '276', 'Write a Python program to remove the first and last elements from a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(288, '2023-08-07 19:20:24.593467', '277', 'Write a Python program to check if a given string contains two similar consecutive letters.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(289, '2023-08-07 19:22:33.249004', '278', 'Write a Python program to reverse a given string in lower case.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(290, '2023-08-07 19:31:34.030229', '279', 'Write a Python program to convert the letters of a given string (same case-upper/lower) into alphabetical order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(291, '2023-08-07 19:55:22.455767', '280', 'Write a Python program to check whether the average value of the elements of a given array of numbers is a whole number or not.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(292, '2023-08-07 19:56:03.046279', '280', 'Write a Python program to check whether the average value of the elements of a given array of numbers is a whole number or not.', 2, '[]', 7, 1),
(293, '2023-08-08 07:45:26.067917', '281', 'Write a Python program to remove all vowels from a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(294, '2023-08-08 07:51:44.372853', '282', 'Write a Python program to get the index number of all lower case letters in a given string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(295, '2023-08-08 07:58:10.830459', '283', 'Write a Python program to check whether a given month and year contains a Monday 13th.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(296, '2023-08-08 07:58:34.477807', '283', 'Write a Python program to check whether a given month and year contains a Monday 13th.', 2, '[]', 7, 1),
(297, '2023-08-08 08:03:46.568303', '284', 'Write a Python program to count the number of zeros and ones in the binary representation of a given integer.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(298, '2023-08-08 08:19:09.726749', '285', 'Write a Python program to find all the factors of a given natural number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(299, '2023-08-08 08:30:38.691662', '286', 'Write a Python program to compute the sum of the negative and positive numbers in an array of integers and display the largest sum.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(300, '2023-08-08 08:43:18.450316', '287', 'Write a Python program that alternates the case of each letter in a given string, with the first letter in the string being uppercase.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(301, '2023-08-08 08:55:46.889927', '288', 'Write a Python program that calculates the Least Common Multiple (LCM) of more than two numbers. The numbers should be taken from a given list of positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(302, '2023-08-08 08:56:26.082627', '288', 'Write a Python program that calculates the Least Common Multiple (LCM) of more than two numbers. The numbers should be taken from a given list of positive integers.', 2, '[]', 7, 1),
(303, '2023-08-08 08:59:06.110886', '289', 'Write a Python program to reverse all words of odd lengths.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(304, '2023-08-08 09:04:01.372662', '290', 'Write a Python program to find the longest common ending between two given strings.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(305, '2023-08-08 10:16:59.318651', '291', 'Write a Python program to reverse the binary representation of a given number and convert the reversed binary number into an integer.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(306, '2023-08-08 10:24:21.016494', '292', 'Write a Python program to find the closest palindrome number to a given integer. If there are two palindrome numbers in absolute distance return the smaller number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(307, '2023-08-08 10:34:01.244024', '293', 'Write a Python program to convert all items in a given list to float values.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(308, '2023-08-08 10:37:37.645886', '294', 'Write a Python program to get the domain name using PTR DNS records from a given IP address.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(309, '2023-08-08 10:44:42.466559', '295', 'Write a Python program to check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones of the same length in a given string. Return True/False.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(310, '2023-08-08 10:52:22.098074', '296', 'Write a Python program to print Emojis using Unicode characters or CLDR (Common Locale Data Repository) short names.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(311, '2023-08-08 10:54:08.484357', '297', 'Write a Python program to convert integer to string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(312, '2023-08-08 11:11:38.306311', '298', 'Write a Python program to find the largest and smallest digits of a given number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(313, '2023-08-08 11:14:40.153535', '298', 'Write a Python program to find the largest and smallest digits of a given number.', 2, '[{\"changed\": {\"fields\": [\"Description\"]}}]', 7, 1),
(314, '2023-08-08 11:24:07.771189', '299', 'A Python list contains two positive integers. Write a Python program to check whether the cube root of the first number is equal to the square root of the second number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(315, '2023-08-08 11:28:33.301083', '300', 'A Python list contains three positive integers. Write a Python program to check whether the sum of the digits in each number is equal or not. Return true otherwise false.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(316, '2023-08-08 17:38:12.336712', '301', 'A Python list contains some positive integers. Write a Python program to count the numbers that are greater than the previous number on the list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(317, '2023-08-08 17:42:41.487305', '302', 'Write a Python program that takes a positive integer and creates an N x N square filled with the integer N. Display the N x N square.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(318, '2023-08-08 17:44:52.698380', '302', 'Write a Python program that takes a positive integer and creates an N x N square filled with the integer N. Display the N x N square.', 2, '[{\"changed\": {\"fields\": [\"Solution\"]}}]', 7, 1),
(319, '2023-08-08 17:54:06.967399', '303', 'Write a Python program that takes a positive integer and calculates the cube root of the number until the number is less than three. Count the number of steps to complete the task.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(320, '2023-08-08 17:59:45.541582', '304', 'Write a Python program to convert degrees to radians.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(321, '2023-08-08 18:04:21.868912', '305', 'Write a Python program to convert radians to degrees.', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Slug\", \"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(322, '2023-08-08 18:09:32.440843', '306', 'Write a Python program to calculate the area of a trapezoid.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(323, '2023-08-08 18:11:38.227275', '307', 'Write a Python program to calculate the area of a parallelogram.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(324, '2023-08-08 18:17:20.702158', '308', 'Write a Python program to calculate the surface volume and area of a cylinder.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(325, '2023-08-08 18:21:06.624446', '309', 'Write a Python program to calculate the surface volume and area of a sphere.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(326, '2023-08-08 18:28:52.930437', '310', 'Write a Python program to calculate the arc length of an angle.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(327, '2023-08-08 18:35:54.613066', '311', 'Write a Python program to calculate the area of a sector.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(328, '2023-08-08 18:44:09.266768', '312', 'Write a Python program to calculate the discriminant value.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(329, '2023-08-08 18:53:05.587749', '313', 'Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(330, '2023-08-08 19:00:04.742392', '314', 'Write a Python program to calculate the difference between the squared sum of the first n natural numbers and the sum of squared first n natural numbers.(default value of number=2).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(331, '2023-08-09 15:34:24.744344', '315', 'Write a Python program to calculate the sum of all digits of the base to the specified power.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(332, '2023-08-09 15:36:44.277774', '316', 'Write a Python program to find out if the given number is abundant.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(333, '2023-08-09 15:52:01.598137', '317', 'Write a Python program to sum all amicable numbers from 1 to specified numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Is input required\", \"Learn or practice\"]}}]', 7, 1),
(334, '2023-08-09 15:54:58.987537', '318', 'Write a Python program to return the sum of all divisors of a number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(335, '2023-08-09 15:55:30.700533', '317', 'Write a Python program to sum all amicable numbers from 1 to specified numbers.', 2, '[]', 7, 1),
(336, '2023-08-09 16:07:06.113964', '319', 'Write a Python program to print all permutations of a given string (including duplicates).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(337, '2023-08-09 16:07:53.001981', '319', 'Write a Python program to print all permutations of a given string (including duplicates).', 2, '[]', 7, 1),
(338, '2023-08-09 16:11:51.271204', '320', 'Write a Python program to print the first n lucky numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(339, '2023-08-09 16:20:26.779407', '321', 'Write a Python program to compute square roots using the Babylonian method.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(340, '2023-08-09 16:21:38.580558', '321', 'Write a Python program to compute square roots using the Babylonian method.', 2, '[]', 7, 1),
(341, '2023-08-09 16:25:23.271256', '322', 'Write a Python program to multiply two integers without using the * operator.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(342, '2023-08-09 16:43:42.552174', '323', 'Write a Python program to calculate the magic square.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(343, '2023-08-09 16:58:22.892404', '324', 'Write a Python program to print all primes (Sieve of Eratosthenes) smaller than or equal to a specified number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(344, '2023-08-09 17:01:22.525803', '325', 'Write a Python program to find the next smallest palindrome of a specified number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(345, '2023-08-09 17:05:02.086039', '326', 'Write a Python program to find the next and previous palindromes of a specified number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(346, '2023-08-09 17:07:03.243008', '327', 'Write a Python program to convert a float to ratio.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(347, '2023-08-09 17:17:24.680014', '328', 'Write a Python program for the nth Catalan numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(348, '2023-08-09 17:28:40.261331', '329', 'Write a Python program to display numbers separated by commas as thousands.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(349, '2023-08-09 17:36:38.425717', '330', 'Write a Python program to calculate distance between two points using latitude and longitude.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(350, '2023-08-09 17:39:19.821703', '331', 'Write a Python program to calculate the area of a regular polygon.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(351, '2023-08-09 17:48:20.193535', '332', 'Write a Python program to calculate the wind chill index.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(352, '2023-08-09 17:58:08.681369', '333', 'Write a Python program to find the roots of a quadratic function.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(353, '2023-08-09 18:02:29.199755', '334', 'Write a Python program to convert a decimal number to a binary number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(354, '2023-08-09 18:10:26.020393', '335', 'Write a Python program to print a complex number and its real and imaginary parts.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(355, '2023-08-09 18:12:08.887403', '336', 'Write a Python program to add, subtract, multiply, and divide two complex numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(356, '2023-08-09 18:17:07.617577', '337', 'Write a Python program to get the length and the angle of a complex number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(357, '2023-08-09 18:39:00.506255', '338', 'Write a Python program to convert Polar coordinates to rectangular coordinates.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Is input required\", \"Learn or practice\"]}}]', 7, 1),
(358, '2023-08-09 18:41:24.457231', '338', 'Write a Python program to convert Polar coordinates to rectangular coordinates.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\"]}}]', 7, 1),
(359, '2023-08-09 18:42:25.530969', '339', 'Write a Python program to find the maximum and minimum numbers from the specified decimal numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(360, '2023-08-09 18:43:40.767724', '340', 'Write a Python program to find the sum of the following decimal numbers and display the numbers in sorted order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(361, '2023-08-09 18:44:26.251438', '341', 'Write a Python program to get the square root and exponential of a given decimal number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(362, '2023-08-09 18:50:16.566555', '342', 'Write a Python program to retrieve the current global context (public properties) for all decimal.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(363, '2023-08-09 18:52:43.517624', '343', 'Write a Python program to round a specified decimal by setting precision (between 1 and 4).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(364, '2023-08-09 18:58:27.517076', '344', 'Write a Python program to round a specified number upwards towards infinity and down towards negative infinity with precision 4.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(365, '2023-08-09 19:03:17.767899', '345', 'Write a Python program to get the local and default precision.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(366, '2023-08-09 19:06:20.434213', '346', 'Write a Python program to display fraction instances of the string representation of a number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(367, '2023-08-09 19:07:34.141859', '347', 'Write a Python program to create fraction instances of float numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(368, '2023-08-10 06:22:33.750030', '348', 'Write a Python program to create fraction instances of decimal numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(369, '2023-08-10 06:25:03.752088', '349', 'Write a Python program to add, subtract, multiply and divide two fractions.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(370, '2023-08-10 06:31:51.779644', '350', 'Write a Python program to convert a floating point number (PI) to an approximate rational value on the various denominators.\r\nNote: max_denominator = 1000000', 2, '[{\"changed\": {\"fields\": [\"Title\", \"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(371, '2023-08-10 06:33:30.241319', '351', 'Write a Python program to generate random floating numbers in a specific numerical range.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(372, '2023-08-10 06:41:31.001689', '352', 'Write a Python program to generate random integers in a specific numerical range.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(373, '2023-08-10 06:43:10.215389', '353', 'Write a Python program to generate random even integers in a specific numerical range.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(374, '2023-08-10 06:44:01.677458', '354', 'Write a Python program to get a single random element from a specified string', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(375, '2023-08-10 06:49:34.183527', '355', 'Write a Python program to shuffle the following elements randomly.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(376, '2023-08-10 07:00:54.794584', '356', 'Write a Python program to flip a coin 1000 times and count heads and tails.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(377, '2023-08-10 07:12:03.723918', '357', 'Write a Python program to print a random sample of words from the system dictionary.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(378, '2023-08-10 07:13:44.279823', '358', 'Write a Python program to randomly select an item from a list.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(379, '2023-08-10 07:14:58.740185', '359', 'Write a Python program to calculate the absolute value of a floating point number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(380, '2023-08-10 07:22:52.296437', '360', 'Write a Python program to calculate the standard deviation of the following data.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(381, '2023-08-10 07:30:29.479724', '361', 'Write a Python program to print the floating point of the mantissa, exponent pair.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(382, '2023-08-10 07:33:52.081652', '362', 'Write a Python program to split the fractional and integer parts of a floating point number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(383, '2023-08-10 08:28:48.146530', '363', 'Write a Python program to parse math formulas and put parentheses around multiplication and division.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(384, '2023-08-10 08:48:12.540013', '364', 'Write a Python program to describe linear regression.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(385, '2023-08-10 09:29:30.743261', '365', 'Write a Python program to calculate a grid of hexagon coordinates of the given radius given lower-left and upper-right coordinates. The function will return a list of lists containing 6 tuples of x, y', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(386, '2023-08-10 09:38:07.747686', '367', 'Write a Python program to calculate the volume of a tetrahedron.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(387, '2023-08-10 18:36:51.637850', '368', 'Write a Python program to compute the value of e(2.718281827...) using an infinite series.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(388, '2023-08-10 18:42:42.361042', '369', 'Write a Python program to create an ASCII waveform.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(389, '2023-08-10 18:44:48.816709', '370', 'Write a Python program to create a dot string.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(390, '2023-08-10 19:16:20.896880', '371', 'Write a Python program to create a Pythagorean theorem calculator.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(391, '2023-08-10 19:49:27.779695', '372', 'Write a Python function to round up a number to specified digits.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(392, '2023-08-10 20:06:43.718828', '373', 'Write a Python program for a casino simulation.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(393, '2023-08-10 20:12:10.692324', '374', 'Write a Python program to reverse a range.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(394, '2023-08-10 20:17:48.580117', '375', 'Write a Python program to create a range for floating numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(395, '2023-08-10 20:32:35.812004', '376', 'Write a Python program to generate (given an integer n) a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(396, '2023-08-10 20:34:14.488540', '377', 'Write a Python program to select a random date in the current year.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(397, '2023-08-11 05:46:27.068112', '378', 'Write a Python program to calculate clusters using the Hierarchical Clustering method.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(398, '2023-08-11 06:07:47.385027', '379', 'Write a Python program to implement the Euclidean Algorithm to compute the greatest common divisor (GCD).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(399, '2023-08-11 06:30:39.466830', '380', 'Write a Python program to convert RGB color to HSV color.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(400, '2023-08-11 06:36:20.717842', '381', 'Write a Python program to find perfect squares between two given numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(401, '2023-08-11 06:38:10.251131', '382', 'Write a Python program to compute Euclidean distances.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(402, '2023-08-11 06:39:36.672062', '383', 'Write a Python program to convert an integer to a 2 byte Hex value.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(403, '2023-08-11 06:46:28.366303', '384', 'Write a Python program to generate a series of distinct random numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Is input required\", \"Learn or practice\"]}}]', 7, 1),
(404, '2023-08-11 06:51:14.557806', '385', 'Write a Python program to convert a given float value to a ratio.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(405, '2023-08-11 06:59:40.677880', '386', 'Write a Python program to calculate the aliquot sum of a given number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Is input required\", \"Learn or practice\"]}}]', 7, 1),
(406, '2023-08-11 07:03:08.071388', '387', 'Write a Python program to get the nth tetrahedral number from a given integer(n) value.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(407, '2023-08-11 07:05:59.930485', '388', 'Write a Python program to get the sum of the powers of all the numbers from start to end (both inclusive).', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(408, '2023-08-11 07:07:44.796715', '389', 'Write a Python program to calculate the Hamming distance between two given values.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(409, '2023-08-11 07:09:40.225987', '390', 'Write a Python program to cap a number within the inclusive range specified by the given boundary values x and y.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(410, '2023-08-11 07:16:28.460623', '391', 'Write a Python program to check whether a given number is a Disarium number or an unhappy number.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1),
(411, '2023-08-11 07:18:10.125740', '391', 'Write a Python program to check whether a given number is a Disarium number or an unhappy number.', 2, '[]', 7, 1),
(412, '2023-08-11 07:20:23.249560', '392', 'Write a Python program to check if a given number is a repdigit number or not. If the given number is repdigit return true otherwise false.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(413, '2023-08-11 07:24:44.873670', '393', 'Write a Python program to check if a given number is a Harshad number or not. Return True if the number is Harshad otherwise False.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(414, '2023-08-11 07:29:44.871255', '394', 'Write a Python program that accepts an integer number with distinct digits and displays the next number containing only distinct digits.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(415, '2023-08-11 07:32:19.661953', '395', 'Write a Python program that checks whether the absolute difference between two consecutive digits is two or not. Return true otherwise false.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1),
(416, '2023-08-11 07:36:39.878811', '396', 'Write a Python program that takes an integer and rearranges the digits to create two maximum and minimum numbers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Learn or practice\"]}}]', 7, 1);
INSERT INTO `django_admin_log` (`id`, `action_time`, `object_id`, `object_repr`, `action_flag`, `change_message`, `content_type_id`, `user_id`) VALUES
(417, '2023-08-11 07:39:49.277205', '397', 'Write a Python program to calculate the sum of all prime numbers in a given list of positive integers.', 2, '[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Search count\", \"Learn or practice\"]}}]', 7, 1);

-- --------------------------------------------------------

--
-- Table structure for table `django_content_type`
--

CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `django_content_type`
--

INSERT INTO `django_content_type` (`id`, `app_label`, `model`) VALUES
(1, 'admin', 'logentry'),
(3, 'auth', 'group'),
(2, 'auth', 'permission'),
(4, 'auth', 'user'),
(5, 'contenttypes', 'contenttype'),
(8, 'questions', 'learn'),
(7, 'questions', 'questions'),
(6, 'sessions', 'session');

-- --------------------------------------------------------

--
-- Table structure for table `django_migrations`
--

CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `django_migrations`
--

INSERT INTO `django_migrations` (`id`, `app`, `name`, `applied`) VALUES
(1, 'contenttypes', '0001_initial', '2023-04-08 04:43:05.744935'),
(2, 'auth', '0001_initial', '2023-04-08 04:43:06.444789'),
(3, 'admin', '0001_initial', '2023-04-08 04:43:06.603349'),
(4, 'admin', '0002_logentry_remove_auto_add', '2023-04-08 04:43:06.619157'),
(5, 'contenttypes', '0002_remove_content_type_name', '2023-04-08 04:43:06.723913'),
(6, 'auth', '0002_alter_permission_name_max_length', '2023-04-08 04:43:06.778675'),
(7, 'auth', '0003_alter_user_email_max_length', '2023-04-08 04:43:06.818236'),
(8, 'auth', '0004_alter_user_username_opts', '2023-04-08 04:43:06.835594'),
(9, 'auth', '0005_alter_user_last_login_null', '2023-04-08 04:43:06.881420'),
(10, 'auth', '0006_require_contenttypes_0002', '2023-04-08 04:43:06.886423'),
(11, 'auth', '0007_alter_validators_add_error_messages', '2023-04-08 04:43:06.903399'),
(12, 'auth', '0008_alter_user_username_max_length', '2023-04-08 04:43:06.998660'),
(13, 'auth', '0009_alter_user_last_name_max_length', '2023-04-08 04:43:07.034785'),
(16, 'sessions', '0001_initial', '2023-04-08 04:43:07.241843'),
(19, 'questions', '0001_initial', '2023-04-08 04:46:18.456355'),
(20, 'questions', '0002_auto_20230408_1034', '2023-04-08 04:46:18.514043'),
(21, 'questions', '0003_auto_20230408_1046', '2023-04-08 04:46:18.561905'),
(22, 'questions', '0004_auto_20230408_1050', '2023-04-08 04:50:39.027700'),
(23, 'admin', '0003_logentry_add_action_flag_choices', '2023-06-02 17:51:19.894100'),
(24, 'auth', '0010_alter_group_name_max_length', '2023-06-02 17:51:20.128351'),
(25, 'auth', '0011_update_proxy_permissions', '2023-06-02 17:51:20.218833'),
(26, 'auth', '0012_alter_user_first_name_max_length', '2023-06-02 17:51:20.309859'),
(27, 'questions', '0002_questions_learn_or_practice', '2023-06-06 04:28:03.933053'),
(28, 'questions', '0003_learn', '2023-06-14 09:07:58.711057');

-- --------------------------------------------------------

--
-- Table structure for table `django_session`
--

CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `django_session`
--

INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES
('2vi42khnnzohfw7yjt5s2477a6hprruk', '.eJxVjDsOwjAQBe_iGll4_aekzxmstXeDA8iR4qRC3B0ipYD2zcx7iYTbWtPWeUkTiYtQ4vS7ZSwPbjugO7bbLMvc1mXKclfkQbscZuLn9XD_Dir2-q2LB3PWMCLlGEBbHYoerVXGA2bw2YbobHHKESqHFHxmbziyMkgWQYn3B8jQN3A:1q59vq:4VLpbir88CuvlzizKSt23vf0_txICbkIu8fQgSbVdKA', '2023-06-16 18:55:26.931360'),
('7djdvi8ki4gyhadm1eew7uoov2ttqwku', '.eJxVjDsOwjAQBe_iGln-fyjpcwZrd21wANlSnFSIu0OkFNC-mXkvlmBba9pGWdKc2ZlJdvrdEOhR2g7yHdqtc-ptXWbku8IPOvjUc3leDvfvoMKo3xq1jy4oMC54b1TOxokYopOGAEIGHUGWIiz6AFFcVbCKLBEgOW-1Rfb-AMOBN4E:1qRnpH:RdUhAJhBErDxEIhx73ZWnwOuwSJpV15WQY2mismfQ4g', '2023-08-18 05:58:15.032736'),
('d19gjud66q2nsah4rpdqrgkuqvvu67l3', 'OWNhZjUwOTU5ZDM3MWZmNzgwYzNjNTBlMWFiNDhhMjQzMzA2YjkyOTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI2NmRjYTM4NDgxNzNlNWE0OGZlYmQwMjgzZTk1OWU2ODQxMGMwMWU4In0=', '2023-05-10 13:19:01.857667'),
('l97cgvrec4llaa8xf2rverk6bshd2b6k', '.eJxVjDsOwjAQBe_iGll4_aekzxmstXeDA8iR4qRC3B0ipYD2zcx7iYTbWtPWeUkTiYtQ4vS7ZSwPbjugO7bbLMvc1mXKclfkQbscZuLn9XD_Dir2-q2LB3PWMCLlGEBbHYoerVXGA2bw2YbobHHKESqHFHxmbziyMkgWQYn3B8jQN3A:1q1nak:lTX_TQ3Xhn2GBzr18z0IXU5gVBEdiFJ0X1ZrJSTLQHM', '2023-06-07 12:27:46.600447'),
('nkq7feh2bshge9ri8809n7tq01ulcqxj', 'MjdkODYxNjA4NDQyYmZlMzc4ODhkMGZiYzI5ZTM0NGUzMzU3MjJlYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJiMDY3OTE1MThkMzhhNjdmNzc0YTBmMGJkMDk3ZDRhNDg0YzNiMThlIn0=', '2023-06-18 07:33:54.885441'),
('ov57q2ceofigwaa7x6li2zqa2sarueb8', 'MjdkODYxNjA4NDQyYmZlMzc4ODhkMGZiYzI5ZTM0NGUzMzU3MjJlYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJiMDY3OTE1MThkMzhhNjdmNzc0YTBmMGJkMDk3ZDRhNDg0YzNiMThlIn0=', '2023-07-04 16:18:40.611233'),
('sorm000z56yqmwd1fq1vbar26p2mpbu4', '.eJxVjDsOwjAQBe_iGln-fyjpcwZrd21wANlSnFSIu0OkFNC-mXkvlmBba9pGWdKc2ZlJdvrdEOhR2g7yHdqtc-ptXWbku8IPOvjUc3leDvfvoMKo3xq1jy4oMC54b1TOxokYopOGAEIGHUGWIiz6AFFcVbCKLBEgOW-1Rfb-AMOBN4E:1qBxyD:OfVbricqbm2cgoKXb73fHqo5ZkFM27vR1qtzWlHMdCA', '2023-07-05 13:34:01.314436'),
('zntmzaj0kiley1ef5u9jz4nty2jshp6j', 'OWNhZjUwOTU5ZDM3MWZmNzgwYzNjNTBlMWFiNDhhMjQzMzA2YjkyOTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI2NmRjYTM4NDgxNzNlNWE0OGZlYmQwMjgzZTk1OWU2ODQxMGMwMWU4In0=', '2023-04-25 23:31:31.904861');

-- --------------------------------------------------------

--
-- Table structure for table `questions_learn`
--

CREATE TABLE `questions_learn` (
  `id` int(11) NOT NULL,
  `title` longtext DEFAULT NULL,
  `slug` longtext DEFAULT NULL,
  `description` longtext DEFAULT NULL,
  `codes` longtext DEFAULT NULL,
  `search_count` int(11) DEFAULT NULL,
  `is_input_required` int(11) DEFAULT NULL,
  `created_at` datetime(6) NOT NULL,
  `updated_at` datetime(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `questions_learn`
--

INSERT INTO `questions_learn` (`id`, `title`, `slug`, `description`, `codes`, `search_count`, `is_input_required`, `created_at`, `updated_at`) VALUES
(1, 'Python Introduction', 'python-introduction', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">What is Python?</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">It is used for:</p><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">web development (server-side),</li><li style=\"box-sizing: inherit;\">software development,</li><li style=\"box-sizing: inherit;\">mathematics,</li><li style=\"box-sizing: inherit;\">system scripting.</li></ul><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">What can Python do?</h3><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">Python can be used on a server to create web applications.</li><li style=\"box-sizing: inherit;\">Python can be used alongside software to create workflows.</li><li style=\"box-sizing: inherit;\">Python can connect to database systems. It can also read and modify files.</li><li style=\"box-sizing: inherit;\">Python can be used to handle big data and perform complex mathematics.</li><li style=\"box-sizing: inherit;\">Python can be used for rapid prototyping, or for production-ready software development.</li></ul><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Why Python?</h3><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).</li><li style=\"box-sizing: inherit;\">Python has a simple syntax similar to the English language.</li><li style=\"box-sizing: inherit;\">Python has syntax that allows developers to write programs with fewer lines than some other programming languages.</li><li style=\"box-sizing: inherit;\">Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.</li><li style=\"box-sizing: inherit;\">Python can be treated in a procedural way, an object-oriented way or a functional way.</li></ul><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Good to know</h3><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">The most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.</li><li style=\"box-sizing: inherit;\">In this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.</li></ul><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Python Syntax compared to other programming languages</h3><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">Python was designed for readability, and has some similarities to the English language with influence from mathematics.</li><li style=\"box-sizing: inherit;\">Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.</li><li style=\"box-sizing: inherit;\">Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.</li></ul><div style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><div style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" href=\"#\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><div><br></div>', NULL, NULL, NULL, '2023-06-14 10:40:57.000000', '0000-00-00 00:00:00.000000'),
(2, 'Python Getting Started', 'python-getting-started', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Python Install</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Many PCs and Macs will have python already installed.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python --version</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">python --version</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">If you find that you do not have Python installed on your computer, then you can download it for free from the following website:&nbsp;<a href=\"https://www.python.org/\" target=\"_blank\" style=\"box-sizing: inherit; color: inherit;\">https://www.python.org/</a></p><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Python Quickstart</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">The way to run a python file is like this on the command line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python helloworld.py</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Where \"helloworld.py\" is the name of your python file.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Let\'s write our first Python file, called helloworld.py, which can be done in any text editor.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">helloworld.py</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_helloworld\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python helloworld.py</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">The output should read:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">Hello, World!</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Congratulations, you have written and executed your first Python program.</p><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">The Python Command Line</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Type the following on the Windows, Mac or Linux command line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Or, if the \"python\" command did not work, you can try \"py\":</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;py</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">From there you can write any python, including our hello world example from earlier in the tutorial:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span style=\"box-sizing: inherit; opacity: 0.5;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python<br style=\"box-sizing: inherit;\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32<br style=\"box-sizing: inherit;\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</span><br style=\"box-sizing: inherit;\">&gt;&gt;&gt; print(\"Hello, World!\")</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Which will write \"Hello, World!\" in the command line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span style=\"box-sizing: inherit; opacity: 0.5;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python<br style=\"box-sizing: inherit;\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32<br style=\"box-sizing: inherit;\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.<br style=\"box-sizing: inherit;\">&gt;&gt;&gt; print(\"Hello, World!\")</span><br style=\"box-sizing: inherit;\">Hello, World!</div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Whenever you are done in the python command line, you can simply type the following to quit the python command line interface:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">exit()</div><div><br></div></div>', NULL, NULL, NULL, '2023-06-14 10:47:25.000000', '0000-00-00 00:00:00.000000'),
(4, 'Python Syntax', 'python-syntax', '<div class=\"flex-container\" style=\"box-sizing: inherit; display: flex; align-items: stretch;\"><div class=\"flex1\" style=\"color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-sizing: inherit; flex-grow: 8; padding-right: 20px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Execute Python Syntax</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em;\">As we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; box-shadow: none !important; width: auto;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">&gt;&gt;&gt; print(\"Hello, World!\")<br style=\"box-sizing: inherit;\">Hello, World!</div></div></div></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><div class=\"w3-code notranslate w3-black\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">C:\\Users\\<em style=\"box-sizing: inherit;\">Your Name</em>&gt;python myfile.py</div></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Python Indentation</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Indentation refers to the spaces at the beginning of a code line.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python uses indentation to indicate a block of code.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">if</span>&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span>&nbsp;&gt;&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">2</span>:<br style=\"box-sizing: inherit;\">&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_indentation\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python will give you an error if you skip the indentation:</p><div class=\"w3-example w3-pale-red\" style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Syntax Error:</p><div class=\"w3-code notranslate pythonHigh w3-border-red\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important; border-top-color: rgb(244, 67, 54) !important; border-right-color: rgb(244, 67, 54) !important; border-bottom-color: rgb(244, 67, 54) !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">if</span>&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span>&nbsp;&gt;&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">2</span>:<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_indentation_test\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">The number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">if</span>&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span>&nbsp;&gt;&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">2</span>:<br style=\"box-sizing: inherit;\">&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">if</span>&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span>&nbsp;&gt;&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">2</span>:<br style=\"box-sizing: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)&nbsp;<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_indentation2\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:</p><div class=\"w3-example w3-pale-red\" style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Syntax Error:</p><div class=\"w3-code notranslate pythonHigh w3-border-red\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important; border-top-color: rgb(244, 67, 54) !important; border-right-color: rgb(244, 67, 54) !important; border-bottom-color: rgb(244, 67, 54) !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">if</span>&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span>&nbsp;&gt;&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">2</span>:<br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span>&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><br style=\"box-sizing: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Five is greater than two!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_indentation2_error\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Python Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">In Python, variables are created when you assign a value to it:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Variables in Python:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_syntax_variables\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python has no command for declaring a variable.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">You will learn more about variables in the&nbsp;<a href=\"https://www.w3schools.com/python/python_variables.asp\" style=\"box-sizing: inherit; color: inherit;\">Python Variables</a>&nbsp;chapter.</p><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Comments</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python has commenting capability for the purpose of in-code documentation.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments start with a #, and Python will render the rest of the line as a comment:</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\"><a id=\"python_comments\" style=\"box-sizing: inherit; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); position: relative; top: -50px;\"></a><a id=\"exercises\" style=\"box-sizing: inherit; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); position: relative; top: -50px;\"></a></p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; box-shadow: none !important; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><h3 style=\"box-sizing: inherit; font-size: 24px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: 400; margin: 10px 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; font-size: 15px;\">Comments in Python:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15px; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#This is a comment.<br style=\"box-sizing: inherit;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-decoration: none; text-align: center; cursor: pointer; white-space: nowrap; user-select: none; margin-bottom: 16px !important; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif;\">Try it Yourself »</a></div>', NULL, NULL, NULL, '2023-06-14 12:00:30.000000', '0000-00-00 00:00:00.000000');
INSERT INTO `questions_learn` (`id`, `title`, `slug`, `description`, `codes`, `search_count`, `is_input_required`, `created_at`, `updated_at`) VALUES
(5, 'Python Comments', 'python-comments', '<p class=\"intro\" style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments can be used to explain Python code.</p><p class=\"intro\" style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments can be used to make the code more readable.</p><p class=\"intro\" style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments can be used to prevent execution when testing code.</p><h2 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; color: rgb(0, 0, 0);\">Creating a Comment</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments starts with a&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">#</code>, and Python will ignore them:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#This is a comment<br style=\"box-sizing: inherit;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment1\" style=\"box-sizing: inherit; color: rgb(255, 255, 255); background-color: rgb(76, 175, 80); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Comments can be placed at the end of a line, and Python will ignore the rest of the line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#This is a comment</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment2\" style=\"box-sizing: inherit; color: rgb(255, 255, 255); background-color: rgb(76, 175, 80); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">A comment does not have to be text that explains the code, it can also be used to prevent Python from executing code:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#print(\"Hello, World!\")<br style=\"box-sizing: inherit;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Cheers, Mate!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment3\" style=\"box-sizing: inherit; color: rgb(255, 255, 255); background-color: rgb(76, 175, 80); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; color: rgb(0, 0, 0);\">Multiline Comments</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python does not really have a syntax for multiline comments.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">To add a multiline comment you could insert a&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">#</code>&nbsp;for each line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#This is a comment<br style=\"box-sizing: inherit;\"></span><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#written in<br style=\"box-sizing: inherit;\"></span><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#more than just one line<br style=\"box-sizing: inherit;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment4\" style=\"box-sizing: inherit; color: rgb(255, 255, 255); background-color: rgb(76, 175, 80); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Or, not quite as intended, you can use a multiline string.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\"><span style=\"color: rgb(136, 201, 153);\">\"\"\"</span><br style=\"box-sizing: inherit;\"><span style=\"color: rgb(136, 201, 153);\">This is a comment</span><br style=\"box-sizing: inherit;\"><span style=\"color: rgb(136, 201, 153);\">written in</span><br style=\"box-sizing: inherit;\"><span style=\"color: rgb(136, 201, 153);\">more than just one line</span><br style=\"box-sizing: inherit;\"></span><span style=\"color: rgb(136, 201, 153);\">\"\"\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Hello, World!\"</span>)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_comment5\" style=\"box-sizing: inherit; color: rgb(255, 255, 255); background-color: rgb(76, 175, 80); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment.</p>', NULL, NULL, NULL, '2023-06-14 12:16:48.000000', '0000-00-00 00:00:00.000000'),
(6, 'Python Variables', 'python-variables', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Varia<span style=\"box-sizing: inherit;\">b</span>l<span style=\"box-sizing: inherit;\">e</span><span style=\"box-sizing: inherit;\">s</span></h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Variables are containers for storing data values.</p><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Creating Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python has no command for declaring a variable.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">A variable is created the moment you first assign a value to it.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(y)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables1\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Variables do not need to be declared with any particular&nbsp;<em style=\"box-sizing: inherit;\">type</em>, and can even change type after they have been set.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># x is of type int<br style=\"box-sizing: inherit;\"></span>x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Sally\"</span>&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># x is now of type str<br style=\"box-sizing: inherit;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables2\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Casting</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">If you want to specify the data type of a variable, this can be done with casting.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">str</span>(<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">3</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># x will be \'3\'<br style=\"box-sizing: inherit;\"></span>y =&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">int</span>(<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">3</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># y will be 3<br style=\"box-sizing: inherit;\"></span>z =&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">float</span>(<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">3</span>)&nbsp;&nbsp;<span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># z will be 3.0</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_casting\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Get the Type</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">You can get the data type of a variable with the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">type()</code>&nbsp;function.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">type</span>(x))<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">type</span>(y))<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_type\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Single or Double Quotes?</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">String variables can be declared either by using single or double quotes:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\"># is the same as<br style=\"box-sizing: inherit;\"></span>x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\'John\'</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables7\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Case-Sensitive</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Variable names are case-sensitive.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\"><span style=\"font-family: Verdana, sans-serif;\">This will create two variables:</span><br></p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">a =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">4</span><br style=\"box-sizing: inherit;\">A =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Sally\"</span><br style=\"box-sizing: inherit;\"><span class=\"commentcolor\" style=\"box-sizing: inherit; color: green;\">#A will not overwrite a</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables7\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div>', NULL, NULL, NULL, '2023-06-14 16:21:54.000000', '0000-00-00 00:00:00.000000'),
(7, 'Python - Variable Names', 'python-variable-names', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Variable Names</h2><span style=\"color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\">A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:</span><ul style=\"box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><li style=\"box-sizing: inherit;\">A variable name must start with a letter or the underscore character</li><li style=\"box-sizing: inherit;\">A variable name cannot start with a number</li><li style=\"box-sizing: inherit;\">A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li><li style=\"box-sizing: inherit;\">Variable names are case-sensitive (age, Age and AGE are three different variables)</li><li style=\"box-sizing: inherit;\">A variable name cannot be any of the&nbsp;<a href=\"https://www.w3schools.com/python/python_ref_keywords.asp\" style=\"box-sizing: inherit; color: inherit;\">Python keywords</a>.</li></ul><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Legal variable names:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">myvar =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\">my_var =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\">_my_var =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\">myVar =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span>MYVAR =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\">myvar2 =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variable_names_legal\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><div class=\"w3-example w3-pale-red\" style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Illegal variable names:</p><div class=\"w3-code notranslate pythonHigh w3-border-red\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important; border-top-color: rgb(244, 67, 54) !important; border-right-color: rgb(244, 67, 54) !important; border-bottom-color: rgb(244, 67, 54) !important;\">2myvar =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\">my-var =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span>my var =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variable_names_error\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Multi Words Variable Names</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Variable names with more than one word can be difficult to read.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">There are several techniques you can use to make them more readable:</p><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Camel Case</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Each word, except the first, starts with a capital letter:</p><div class=\"w3-codeline notranslate pythonHigh\" style=\"box-sizing: inherit; background-color: rgb(0, 0, 0); color: white; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; padding: 15px; border-left-color: rgb(0, 0, 0); font-size: 15px;\">myVariableName =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Pascal Case</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Each word starts with a capital letter:</p><div class=\"w3-codeline notranslate pythonHigh\" style=\"box-sizing: inherit; background-color: rgb(0, 0, 0); color: white; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; padding: 15px; border-left-color: rgb(0, 0, 0); font-size: 15px;\">MyVariableName =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Snake Case</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Each word is separated by an underscore character:</p><div class=\"w3-codeline notranslate pythonHigh\" style=\"box-sizing: inherit; background-color: rgb(0, 0, 0); color: white; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; padding: 15px; border-left-color: rgb(0, 0, 0); font-size: 15px;\">my_variable_name =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br></div>', NULL, NULL, NULL, '2023-06-14 16:36:29.000000', '0000-00-00 00:00:00.000000'),
(8, 'Python Variables - Assign Multiple Values', 'python-variables-assign-multiple-values', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Many Values to Multiple Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Python allows you to assign values to multiple variables in one line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x, y, z =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Orange\"</span>,&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Banana\"</span>,&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Cherry\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(y)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(z)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables8\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">One Value to Multiple Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">And you can assign the&nbsp;<em style=\"box-sizing: inherit;\">same</em>&nbsp;value to multiple variables in one line:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x = y = z =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Orange\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(y)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(z)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables6\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><hr style=\"margin-right: -16px; margin-left: -16px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px;\"><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Unpack a Collection</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called&nbsp;<em style=\"box-sizing: inherit;\">unpacking</em>.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\"></p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Unpack a list:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">fruits = [<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"apple\"</span>,&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"banana\"</span>,&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"cherry\"</span>]<br style=\"box-sizing: inherit;\">x, y, z = fruits<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(y)<br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(z)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_unpack\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div>', NULL, NULL, NULL, '2023-06-14 16:38:58.000000', '0000-00-00 00:00:00.000000');
INSERT INTO `questions_learn` (`id`, `title`, `slug`, `description`, `codes`, `search_count`, `is_input_required`, `created_at`, `updated_at`) VALUES
(9, 'Python - Output Variables', 'python-output-variables', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Output Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">The Python&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">print()</code>&nbsp;function is often used to output variables.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is awesome\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_print\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">In the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">print()</code>&nbsp;function, you output multiple variables, separated by a comma:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python\"</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"is\"</span><br style=\"box-sizing: inherit;\">z =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"awesome\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x, y, z)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables3\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">You can also use the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">+</code>&nbsp;operator to output multiple variables:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python \"</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"is \"</span><br style=\"box-sizing: inherit;\">z =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"awesome\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span>+ y + z)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables4\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">For numbers, the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">+</code>&nbsp;character works as a mathematical operator:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">10</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x + y)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables5\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">In the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">print()</code>&nbsp;function, when you try to combine a string and a number with the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">+</code>&nbsp;operator, Python will give you an error:</p><div class=\"w3-example w3-pale-red\" style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh w3-border-red\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important; border-top-color: rgb(244, 67, 54) !important; border-right-color: rgb(244, 67, 54) !important; border-bottom-color: rgb(244, 67, 54) !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x + y)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_test\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">The best way to output multiple variables in the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">print()</code>&nbsp;function is to separate them with commas, which even support different data types:</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\">5</span><br style=\"box-sizing: inherit;\">y =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"John\"</span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(x, y)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_comma\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div>', NULL, NULL, NULL, '2023-06-14 16:44:14.000000', '0000-00-00 00:00:00.000000'),
(10, 'Python - Global Variables', 'python-global-variables', '<h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">Global Variables</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Variables that are created outside of a function (as in all of the examples above) are known as global variables.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Global variables can be used by everyone, both inside of functions and outside.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example<br></h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Create a variable outside of a function, and use it inside the function</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"awesome\"</span><br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">def</span>&nbsp;myfunc():<br style=\"box-sizing: inherit;\">&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is \"</span>&nbsp;+ x)<br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\">myfunc()<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_global\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">Create a variable inside a function, with the same name as the global variable</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"awesome\"</span><br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">def</span>&nbsp;myfunc():<br style=\"box-sizing: inherit;\">&nbsp; x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"fantastic\"</span><br style=\"box-sizing: inherit;\">&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is \"</span>&nbsp;+ x)<br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\">myfunc()<br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is \"</span>&nbsp;+ x)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_global2\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><h2 style=\"box-sizing: inherit; font-size: 32px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0);\">The global Keyword</h2><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function.</p><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">To create a global variable inside a function, you can use the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">global</code>&nbsp;keyword.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">If you use the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">global</code>&nbsp;keyword, the variable belongs to the global scope:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">def</span>&nbsp;myfunc():<br style=\"box-sizing: inherit;\">&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">global</span>&nbsp;x<br style=\"box-sizing: inherit;\">&nbsp; x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"fantastic\"</span><br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\">myfunc()<br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is \"</span>&nbsp;+ x)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_global3\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div><p style=\"box-sizing: inherit; margin-top: 1.2em; margin-bottom: 1.2em; font-size: 15px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif;\">Also, use the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">global</code>&nbsp;keyword if you want to change a global variable inside a function.</p><div class=\"w3-example\" style=\"box-sizing: inherit; background-color: rgb(231, 233, 235); border-radius: 5px; padding: 8px 20px; margin: 24px -20px; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 15px; box-shadow: none !important;\"><h3 style=\"box-sizing: inherit; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; margin-top: 10px; margin-right: 0px; margin-left: 0px;\">Example</h3><p style=\"box-sizing: inherit; margin-top: 1em; margin-bottom: 1em;\">To change the value of a global variable inside a function, refer to the variable by using the&nbsp;<code class=\"w3-codespan\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; font-size: 15.75px; color: crimson; background-color: rgba(222, 222, 222, 0.3);\">global</code>&nbsp;keyword:</p><div class=\"w3-code notranslate pythonHigh\" style=\"box-sizing: inherit; font-family: Consolas, Menlo, &quot;courier new&quot;, monospace; width: auto; background-color: rgb(21, 32, 43); color: white; padding: 8px 12px; border-left: 4px solid rgb(40, 44, 52); overflow-wrap: break-word; margin-top: 16px !important; margin-bottom: 16px !important;\">x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"awesome\"</span><br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">def</span>&nbsp;myfunc():<br style=\"box-sizing: inherit;\">&nbsp;&nbsp;<span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">global</span>&nbsp;x<br style=\"box-sizing: inherit;\">&nbsp; x =&nbsp;<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"fantastic\"</span><br style=\"box-sizing: inherit;\"><br style=\"box-sizing: inherit;\">myfunc()<br style=\"box-sizing: inherit;\"><span class=\"pythonnumbercolor\" style=\"box-sizing: inherit; color: red;\"></span><br style=\"box-sizing: inherit;\"><span class=\"pythonkeywordcolor\" style=\"box-sizing: inherit; color: mediumblue;\">print</span>(<span class=\"pythonstringcolor\" style=\"box-sizing: inherit; color: brown;\">\"Python is \"</span>&nbsp;+ x)<br></div><a target=\"_blank\" class=\"w3-btn w3-margin-bottom\" href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_variables_global4\" style=\"box-sizing: inherit; background-color: rgb(76, 175, 80); color: rgb(255, 255, 255); border: none; display: inline-block; padding: 6px 18px; vertical-align: middle; overflow: hidden; text-align: center; cursor: pointer; text-wrap: nowrap; user-select: none; border-radius: 5px; font-size: 17px; font-family: &quot;Source Sans Pro&quot;, sans-serif; margin-bottom: 16px !important;\">Try it Yourself »</a></div>', NULL, NULL, NULL, '2023-06-14 17:05:38.000000', '0000-00-00 00:00:00.000000');

-- --------------------------------------------------------

--
-- Table structure for table `questions_questions`
--

CREATE TABLE `questions_questions` (
  `id` int(3) NOT NULL,
  `title` varchar(236) DEFAULT NULL,
  `slug` longtext DEFAULT NULL,
  `description` longtext DEFAULT NULL,
  `solution` longtext DEFAULT NULL,
  `search_count` int(11) NOT NULL DEFAULT 0,
  `is_input_required` int(1) NOT NULL DEFAULT 0,
  `deleted_at` datetime DEFAULT current_timestamp(),
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp(),
  `learn_or_practice` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `questions_questions`
--

INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(1, 'Print Hello world! in Python Program.', 'print-hello-world-in-python-program', '<p><span style=\"color: var(--bs-card-color);\"># This program prints&nbsp;</span><span style=\"color: var(--bs-card-color);\">Hello, world!</span></p><p><span style=\"color: var(--bs-card-color);\">print(\'Hello, world!\')</span></p>', '#This program Hello, world!\n\nprint(\'Hello, world!\')', 12, 0, '2023-04-26 19:21:08', '2023-01-08 18:44:53', '2023-06-02 18:56:55', NULL),
(2, 'Add two numbers which accept by the user.', 'add-two-number-which-accepts-from-the-user', '<p># Store input numbers</p><p><span style=\"color: var(--bs-card-color);\">num1 = input( )</span></p><p><span style=\"color: var(--bs-card-color);\">num2 = input( )</span></p><p><span style=\"color: var(--bs-card-color);\"># Add two numbers</span></p><p><span style=\"color: var(--bs-card-color);\">sum = float(num1) + float(num2)</span></p><p><span style=\"color: var(--bs-card-color);\">#Display the sum</span></p><p><span style=\"color: var(--bs-card-color);\">print(\'The sum of {0} and {1} is {2}\'.format(num1, num2, sum))</span></p>', '# Store input numbers\r\n\r\nnum1 = input( )\r\nnum2 = input( )\r\n\r\n# Add two numbers\r\n\r\nsum = float(num1) + float(num2)\r\n\r\n#Display the sum\r\n\r\nprint(\'The sum of {0} and {1} is {2}\'.format(num1, num2, sum))', 6, 1, NULL, '2023-01-08 18:47:00', '2023-06-02 19:01:29', NULL),
(3, 'Subtract two numbers which accept by the user.', 'subtract-two-number-which-accepts-from-the-user', '<p># Store input numbers </p><p>num1 = input( ) </p><p>num2 = input( ) </p><p># Subtract two numbers </p><p>result= float(num1) - float(num2) </p><p> #Display the Subtraction</p><p> print(\'The Subtraction of {0} and {1} is {2}\'.format(num1, num2, result))</p>', '# Store input numbers \r\nnum1 = input( )\r\nnum2 = input( )\r\n\r\n# Subtract two numbers\r\nresult= float(num1) - float(num2) \r\n\r\n#Display the Subtraction \r\nprint(\'The Subtraction of {0} and {1} is {2}\'.format(num1, num2, result))', 2, 1, NULL, '2023-01-25 05:08:53', '2023-06-02 19:02:18', NULL),
(4, 'Multiplication / Product of two numbers which accepts by the user.', 'multiplication-product-of-two-number-which-accepts-from-the-user', '<p># Store input numbers </p><p>num1 = input( ) </p><p>num2 = input( ) </p><p># Multiplication of two numbers </p><p>result = float(num1) / float(num2) </p><p>#Display the Product </p><p>print(\'The Product of {0} and {1} is {2}\'.format(num1, num2, result))</p>', '# Store input numbers  \r\nnum1 = input( ) \r\nnum2 = input( ) \r\n\r\n# Multiplication of two numbers\r\nresult = float(num1) * float(num2) \r\n\r\n#Display the Product\r\nprint(\'The Product of {0} and {1} is {2}\'.format(num1, num2, result))', 6, 1, NULL, '2023-01-25 05:09:18', '2023-06-02 19:03:26', NULL),
(5, 'Division of two numbers which accepts by the user.', 'division-of-divide-two-number-which-accepts-from-the-user', '<p><span style=\"color: rgb(33, 37, 41);\"># Store input numbers </span></p><p><span style=\"color: rgb(33, 37, 41);\">num1 = input( ) </span></p><p><span style=\"color: rgb(33, 37, 41);\">num2 = input( ) </span></p><p><span style=\"color: rgb(33, 37, 41);\"># Division of two numbers </span></p><p><span style=\"color: rgb(33, 37, 41);\">result = float(num1) / float(num2) </span></p><p><span style=\"color: rgb(33, 37, 41);\">#Display the quotient</span></p><p><span style=\"color: rgb(33, 37, 41);\">print(\'The quotient of {0} and {1} is {2}\'.format(num1, num2, result))</span><br></p>', '# Store input numbers\r\n\r\nnum1 = input( )\r\n\r\nnum2 = input( )\r\n\r\n# Division of two numbers\r\n\r\nresult = float(num1) / float(num2)\r\n\r\n#Display the quotient\r\n\r\nprint(\'The quotient of {0} and {1} is {2}\'.format(num1, num2, result))', 0, 1, NULL, '2023-01-25 23:09:18', '2023-06-02 19:04:00', NULL),
(6, 'Write a Python program to print some string in a specific format.', 'write-a-python-program-to-print-some-string-in-a-specific-format', '<p>#Print The Specific String</p><p>print(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")</p>', '#Print The Specific String\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")', 2, 0, NULL, '2023-01-25 23:13:38', '2023-06-02 19:04:12', NULL),
(7, 'Write a Python program to display the current date and time.', 'write-a-python-program-to-display-the-current-date-and-time', '<div>import datetime</div><br><div>now = datetime.datetime.now()</div><br><div>print (\"Current date and time : \")</div><div>print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))</div><div><br></div>', 'import datetime\r\n\r\nnow = datetime.datetime.now()\r\n\r\nprint (\"Current date and time : \")\r\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))', 4, 0, NULL, '2023-01-25 23:18:08', '2023-06-02 19:05:15', NULL),
(8, 'Write a Python program that calculates the area of a circle based on the radius entered by the user.', 'write-a-python-program-that-calculates-the-area-of-a-circle-based-on-the-radius-entered-by-the-user', '<p>from math import pi</p><p>r = float(input (\"Input the radius of the circle: \"))</p><p>print (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))</p>', 'from math import pi\r\n\r\n#Input the radius of the circle\r\nr = float(input ( ))\r\n\r\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))', 6, 1, NULL, '2023-01-25 23:21:25', '2023-06-02 19:09:10', NULL),
(9, 'Write a Python program that accepts the user\'s first and last name and prints them in reverse order with a space between them.', 'write-a-python-program-that-accepts-the-users-first-and-last-name-and-prints-them-in-reverse-order-with-a-space-between-them', '<div>fname = input(\"Input your First Name : \")</div><div>lname = input(\"Input your Last Name : \")</div><br><div>print (\"Hello&nbsp; \" + lname + \" \" + fname)</div><div><br></div>', '#Input your First Name\r\nfname = input( )\r\n#Input your Last Name\r\nlname = input( )\r\n\r\nprint (\"Hello  \" + lname + \" \" + fname)', 6, 1, NULL, '2023-01-25 23:22:53', '2023-06-02 19:11:15', NULL),
(10, 'Write a Python program that accepts a sequence of comma-separated numbers from the user and generates a list and a tuple of those numbers.', 'write-a-python-program-that-accepts-a-sequence-of-comma-separated-numbers-from-the-user-and-generates-a-list-and-a-tuple-of-those-numbers', '<p>values = input(\"Input some comma seprated numbers : \")</p><br><p>list = values.split(\",\")</p><p>tuple = tuple(list)</p><br><p>print(\'List : \',list)</p><p>print(\'Tuple : \',tuple)</p>', '#Input some comma seprated numbers                                               \r\nvalues = input()\r\n\r\nlist = values.split(\",\")\r\ntuple = tuple(list)\r\n\r\nprint(\'List : \',list)\r\nprint(\'Tuple : \',tuple)', 6, 1, NULL, '2023-01-25 23:24:30', '2023-06-02 19:14:14', NULL),
(11, 'Write a Python program to find out what version of Python you are using.', 'write-a-python-program-to-find-out-what-version-of-python-you-are-using', '<p>import sys</p><br><p>print(\"Python version\")</p><p>print (sys.version)</p><p>print(\"Version info.\") </p><p>print (sys.version_info)</p>', 'import sys\r\n\r\nprint(\"Python version\")\r\nprint (sys.version)\r\nprint(\"Version info.\")\r\nprint (sys.version_info)', 2, 0, NULL, '2023-01-25 23:30:37', '2023-06-02 19:15:56', NULL),
(12, 'Write a Python program that accepts a filename from the user and prints the extension of the file.', 'write-a-python-program-that-accepts-a-filename-from-the-user-and-prints-the-extension-of-the-file', '<p>filename = input(\"Input the Filename\")</p><br><p>f_extns = filename.split(\".\")</p><br><p>print (\"The extension of the file is: \" + repr(f_extns[-1]))</p>', '#Input the Filename\r\nfilename = input( )\r\n\r\nf_extns = filename.split(\".\")\r\n\r\nprint (\"The extension of the file is: \" + repr(f_extns[-1]))', 2, 1, NULL, '2023-01-25 23:33:03', '2023-06-02 19:18:35', NULL),
(13, 'Write a Python program to display the first and last colors from the following list. color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]', 'write-a-python-program-to-display-the-first-and-last-colors-from-the-following-list-color-list-redgreenwhite-black', '<p>color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]</p><br><p>print( \"%s %s\"%(color_list[0],color_list[-1]))</p>', 'color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]\r\n\r\nprint( \"%s %s\"%(color_list[0],color_list[-1]))', 2, 0, NULL, '2023-01-25 23:34:22', '2023-06-02 19:21:00', NULL),
(14, 'Write a Python program to display the examination schedule. (extract the date from exam_st_date). exam_st_date = (11, 12, 2014)', 'write-a-python-program-to-display-the-examination-schedule-extract-the-date-from-exam-st-date-exam-st-date-11-12-2014', '<p>exam_st_date = (27,05,2023) </p><br><p>print( \"The examination will start from : %i / %i / %i\"%exam_st_date)</p>', 'exam_st_date = (27,05,2023)\r\n\r\nprint( \"The examination will start from : %i / %i / %i\"%exam_st_date)', 2, 0, NULL, '2023-01-25 23:46:59', '2023-06-02 19:21:41', NULL),
(15, 'Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.', 'write-a-python-program-that-accepts-an-integer-n-and-computes-the-value-of-nnnnnn', '<div>a = int(input(\"Input an integer : \"))</div><div>n1 = int( \"%s\" % a )</div><div>n2 = int( \"%s%s\" % (a,a) )</div><div>n3 = int( \"%s%s%s\" % (a,a,a) )</div><br><div>print (\"The value of n+nn+nnn is :\", n1+n2+n3)</div><div><br></div>', '#Input an integer\r\na = int(input( ))\r\nn1 = int( \"%s\" % a )\r\nn2 = int( \"%s%s\" % (a,a) )\r\nn3 = int( \"%s%s%s\" % (a,a,a) )\r\n\r\nprint (\"The value of n+nn+nnn is :\", n1+n2+n3)', 2, 1, NULL, '2023-01-25 23:47:55', '2023-06-02 19:22:39', NULL),
(16, 'Write a Python program that prints the calendar for a given month and year. Note : Use \'calendar\' module.', 'write-a-python-program-that-prints-the-calendar-for-a-given-month-and-year', '<div>import calendar</div><br><div>y = int(input(\"Input the year : \"))</div><div>m = int(input(\"Input the month : \"))</div><br><div>print(calendar.month(y, m))</div>', 'import calendar\r\n\r\n#Takes user input for year\r\ny = int(input( ))\r\n\r\n#Takes user input for month\r\nm = int(input( ))\r\n\r\nprint(calendar.month(y, m))', 2, 1, NULL, '2023-01-25 23:52:24', '2023-06-02 19:23:51', NULL),
(17, 'Write a Python program to print the following \'here document\'. Sample string: a string that you \"don\'t\" have to escape This is a ....... multi-line heredoc string --------> example', 'write-a-python-program-to-print-the-following-here-document-sample-string-a-string-that-you-dont-have-to-escape-this-is-a-multi-line-heredoc-string-example', '<div>print(\"\"\"</div><div>a string that you \"don\'t\" have to escape</div><div>This</div><div>is a&nbsp; ....... multi-line</div><div>heredoc string --------&gt; example</div><div>\"\"\")</div><div><br></div>', 'print(\"\"\"\na string that you \"don\'t\" have to escape\nThis\nis a  ....... multi-line\nheredoc string --------> example\n\"\"\")', 2, 0, NULL, '2023-01-25 23:56:56', '2023-06-02 19:24:16', NULL),
(18, 'Write a Python program to calculate the number of days between two dates.', 'write-a-python-program-to-calculate-the-number-of-days-between-two-dates', '<div>from datetime import date</div><br><div>f_date = date(2023, 4, 2)</div><div>l_date = date(2023, 4, 17)</div><br><div>delta = l_date - f_date</div><br><div>print(\"The number of days is: \",delta.days)</div>', 'from datetime import date\r\n\r\nf_date = date(2023, 4, 2)\r\nl_date = date(2023, 4, 17)\r\n\r\ndelta = l_date - f_date\r\n\r\nprint(\"The number of days is: \",delta.days)', 2, 0, NULL, '2023-01-25 23:57:43', '2023-06-02 19:26:25', NULL),
(19, 'Write a Python program to get the volume of a sphere with radius six.', 'write-a-python-program-to-get-the-volume-of-a-sphere-with-radius-six', '<div>pi = 3.1415926535897931</div><div>r= 6.0</div><br><div>V= 4.0/3.0*pi* r**3</div><br><div>print(\'The volume of the sphere is: \',V)</div>', 'pi = 3.1415926535897931\r\nr= 6.0\r\n\r\nV= 4.0/3.0*pi* r**3\r\n\r\nprint(\'The volume of the sphere is: \',V)', 6, 0, NULL, '2023-01-25 23:58:52', '2023-06-02 19:26:51', NULL),
(20, 'Write a Python program to calculate the difference between a given number and 17. If the number is greater than 17, return twice the absolute difference.', 'write-a-python-program-to-calculate-the-difference-between-a-given-number-and-17-if-the-number-is-greater-than-17-return-twice-the-absolute-difference', '<div>def difference(n):</div><div>&nbsp; &nbsp; if n &lt;= 17:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return 17 - n</div><div>&nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return (n - 17) * 2&nbsp;</div><div><br></div><div>print(difference(22))</div><div>print(difference(14))</div><div><br></div>', 'def difference(n):\n    if n <= 17:\n        return 17 - n\n    else:\n        return (n - 17) * 2 \n\nprint(difference(22))\nprint(difference(14))', 2, 0, NULL, '2023-01-25 23:59:41', '2023-06-02 19:27:03', NULL),
(21, 'Write a Python program to test whether a number is within 100 of 1000 or 2000.', 'write-a-python-program-to-test-whether-a-number-is-within-100-of-1000-or-2000', '<div>def near_thousand(n):</div><div>&nbsp; &nbsp; &nbsp; return ((abs(1000 - n) &lt;= 100) or (abs(2000 - n) &lt;= 100))</div><br><div>print(near_thousand(1000))</div><div>print(near_thousand(900))</div><div>print(near_thousand(800))&nbsp; &nbsp;</div><div>print(near_thousand(2200))</div><div><br></div>', 'def near_thousand(n):\r\n      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))\r\n\r\nprint(near_thousand(1000))\r\nprint(near_thousand(900))\r\nprint(near_thousand(800))   \r\nprint(near_thousand(2200))', 2, 0, NULL, '2023-01-26 00:00:52', '2023-06-02 19:27:21', NULL),
(22, 'Write a Python program to calculate the sum of three given numbers. If the values are equal, return three times their sum.', 'write-a-python-program-to-calculate-the-sum-of-three-given-numbers-if-the-values-are-equal-return-three-times-their-sum', '<div>def sum_thrice(x, y, z):</div><div><br></div><div>&nbsp; &nbsp; &nbsp;sum = x + y + z</div><div>&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp;if x == y == z:</div><div>&nbsp; &nbsp; &nbsp; sum = sum * 3</div><div>&nbsp; &nbsp; &nbsp;return sum</div><div><br></div><div>print(sum_thrice(1, 2, 3))</div><div>print(sum_thrice(3, 3, 3))</div><div><br></div>', 'def sum_thrice(x, y, z):\r\n\r\n     sum = x + y + z\r\n  \r\n     if x == y == z:\r\n      sum = sum * 3\r\n     return sum\r\n\r\nprint(sum_thrice(1, 2, 3))\r\nprint(sum_thrice(3, 3, 3))', 2, 0, NULL, '2023-01-26 00:02:21', '2023-06-02 19:27:45', NULL),
(23, 'Write a Python program to get a newly-generated string from a given string where \"Is\" has been added to the front. Return the string unchanged if the given string already begins with \"Is\".', 'write-a-python-program-to-get-a-newly-generated-string-from-a-given-string-where-is-has-been-added-to-the-front-return-the-string-unchanged-if-the-given-string-already-begins-with-is', '<div>def new_string(text):</div><div>&nbsp; if len(text) &gt;= 2 and text [:2] == \"Is\":</div><div>&nbsp; &nbsp; return text</div><div>&nbsp; return \"Is\" + text</div><br><div>print(new_string(\"Array\"))</div><div>print(new_string(\"IsEmpty\"))&nbsp;</div><div><br></div>', 'def new_string(text):\r\n  if len(text) >= 2 and text [:2] == \"Is\":\r\n    return text\r\n  return \"Is\" + text\r\n\r\nprint(new_string(\"Array\"))\r\nprint(new_string(\"IsEmpty\"))', 6, 0, NULL, '2023-01-26 00:04:10', '2023-06-02 19:28:39', NULL),
(24, 'Write a Python program that returns a string that is n (non-negative integer) copies of a given string.', 'write-a-python-program-that-returns-a-string-that-is-n-non-negative-integer-copies-of-a-given-string', '<div>def larger_string(text, n):</div><div>&nbsp; &nbsp;result = \"\"</div><div>&nbsp; &nbsp;for i in range(n):</div><div>&nbsp; &nbsp; &nbsp; result = result + text</div><div>&nbsp; &nbsp;return result</div><br><div>print(larger_string(\'abc\', 2))</div><div>print(larger_string(\'.py\', 3))&nbsp;</div><div><br></div>', 'def larger_string(text, n):\r\n   result = \"\"\r\n   for i in range(n):\r\n      result = result + text\r\n   return result\r\n\r\nprint(larger_string(\'abc\', 2))\r\nprint(larger_string(\'.py\', 3))', 6, 0, NULL, '2023-01-26 00:07:11', '2023-06-02 19:29:23', NULL),
(25, 'Write a Python program that determines whether a given number (accepted from the user) is even or odd, and prints an appropriate message to the user.', 'write-a-python-program-that-determines-whether-a-given-number-accepted-from-the-user-is-even-or-odd-and-prints-an-appropriate-message-to-the-user', '<p>num = int(input(\"Enter a number: \"))</p><p>mod = num % 2</p><p>if mod &gt; 0:</p><p>&nbsp; &nbsp; print(num,\"is an odd number.\")</p><p>else:</p><p>&nbsp; &nbsp;  print( num,\"is an even number.\")</p>', '#Take a number\r\nnum = int(input( ))\r\n\r\nmod = num % 2\r\n\r\nif mod > 0:\r\n    print(num,\"is an odd number.\")\r\nelse:\r\n    print( num,\"is an even number.\")', 12, 1, NULL, '2023-01-26 00:09:00', '2023-06-21 16:23:10', NULL),
(26, 'Write a Python program to count the number 4 in a given list.', 'write-a-python-program-to-count-the-number-4-in-a-given-list', '<div>def list_count_4(nums):</div><div>&nbsp; count = 0&nbsp;&nbsp;</div><div>&nbsp; for num in nums:</div><div>&nbsp; &nbsp; if num == 4:</div><div>&nbsp; &nbsp; &nbsp; count = count + 1</div><div></div><div>&nbsp; return count</div><div><br></div><div>print(list_count_4([1, 4, 6, 7, 4]))</div><div>print(list_count_4([1, 4, 6, 4, 7, 4]))</div>', 'def list_count_4(nums):\r\n  count = 0  \r\n  for num in nums:\r\n    if num == 4:\r\n      count = count + 1\r\n  return count\r\n\r\nprint(list_count_4([1, 4, 6, 7, 4]))\r\nprint(list_count_4([1, 4, 6, 4, 7, 4]))', 11, 0, NULL, '2023-01-26 00:10:41', '2023-06-02 19:32:22', NULL),
(27, 'Write a Python program to get n (non-negative integer) copies of the first 2 characters of a given string. Return n copies of the whole string if the length is less than 2.', 'write-a-python-program-to-get-n-non-negative-integer-copies-of-the-first-2-characters-of-a-given-string-return-n-copies-of-the-whole-string-if-the-length-is-less-than-2', '<p>def substring_copy(text, n):</p><br><p>&nbsp; flen = 2</p><br><p>&nbsp; if flen &gt; len(text):</p><p>&nbsp; &nbsp; flen = len(text)</p><br><p>&nbsp; substr = text[:flen]</p><p>&nbsp; result = \"\"</p><br><p>&nbsp; for i in range(n):</p><p>&nbsp; &nbsp; result = result + substr</p><p>&nbsp; return result</p><br><p>print(substring_copy(\'abcdef\', 2))</p><p>print(substring_copy(\'p\', 3));</p>', 'def substring_copy(text, n):\r\n\r\n  flen = 2\r\n\r\n  if flen > len(text):\r\n    flen = len(text)\r\n\r\n  substr = text[:flen]\r\n  result = \"\"\r\n\r\n  for i in range(n):\r\n    result = result + substr\r\n  return result\r\n\r\nprint(substring_copy(\'abcdef\', 2))\r\nprint(substring_copy(\'p\', 3));', 6, 0, NULL, '2023-01-26 00:11:46', '2023-06-02 19:37:12', NULL),
(28, 'Write a Python program to test whether a passed letter is a vowel or not.', 'write-a-python-program-to-test-whether-a-passed-letter-is-a-vowel-or-not', '<div>def is_vowel(char):</div><div>&nbsp; &nbsp; all_vowels = \'aeiou\'</div><div>&nbsp; &nbsp; return char in all_vowels</div><br><div>print(is_vowel(\'c\'))</div><div>print(is_vowel(\'e\'))</div><div><br></div>', 'def is_vowel(char):\r\n    all_vowels = \'aeiou\'\r\n    return char in all_vowels\r\n\r\nprint(is_vowel(\'c\'))\r\nprint(is_vowel(\'e\'))', 4, 0, NULL, '2023-01-26 00:12:24', '2023-06-02 19:38:02', NULL),
(29, 'Write a Python program that checks whether a specified value is contained within a group of values.', 'write-a-python-program-that-checks-whether-a-specified-value-is-contained-within-a-group-of-values', '<div>def is_group_member(group_data, n):</div><div>&nbsp; &nbsp;for value in group_data:</div><div>&nbsp; &nbsp; &nbsp; &nbsp;if n == value:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return True</div><div>&nbsp; &nbsp;return False</div><br><div>print(is_group_member([1, 5, 8, 3], 3))</div><div>print(is_group_member([5, 8, 3], -1))</div><div><br></div>', 'def is_group_member(group_data, n):\r\n   for value in group_data:\r\n       if n == value:\r\n           return True\r\n   return False\r\n\r\nprint(is_group_member([1, 5, 8, 3], 3))\r\nprint(is_group_member([5, 8, 3], -1))', 6, 0, NULL, '2023-01-26 00:15:30', '2023-06-02 19:39:02', NULL),
(30, 'Write a Python program to create a histogram from a given list of integers.', 'write-a-python-program-to-create-a-histogram-from-a-given-list-of-integers', '<p>def histogram( items ):</p><p>&nbsp; &nbsp; for n in items:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; output = \'\'</p><p>&nbsp; &nbsp; &nbsp; &nbsp; times = n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while( times &gt; 0 ):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; output += \'*\'</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; times = times - 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(output)</p><br><p>histogram([1,2, 3, 4, 5])</p>', 'def histogram( items ):\r\n    for n in items:\r\n        output = \'\'\r\n        times = n\r\n        while( times > 0 ):\r\n          output += \'*\'\r\n          times = times - 1\r\n        print(output)\r\n\r\nhistogram([1,2, 3, 4, 5])', 4, 0, NULL, '2023-01-26 00:16:55', '2023-06-02 19:45:36', NULL),
(31, 'Write a Python program that concatenates all elements in a list into a string and returns it.', 'write-a-python-program-that-concatenates-all-elements-in-a-list-into-a-string-and-returns-it', '<p>def concatenate_list_data(list):</p><p>&nbsp; &nbsp; result= \' \'</p><p>&nbsp; &nbsp; for element in list:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result += str(element)</p><p>&nbsp; &nbsp; return result</p><br><p>print(concatenate_list_data([1, 5, 12, 2]))</p>', 'def concatenate_list_data(list):\r\n\r\n    result= \' \'\r\n\r\n    for element in list:\r\n        result += str(element)\r\n    return result\r\n\r\nprint(concatenate_list_data([1, 5, 12, 2]))', 4, 0, NULL, '2023-02-25 21:15:34', '2023-06-02 19:49:55', NULL),
(32, 'Write a Python program to print all even numbers from a given list of numbers in the same order and stop printing any after 237 in the sequence.', 'write-a-python-program-to-print-all-even-numbers-from-a-given-list-of-numbers-in-the-same-order-and-stop-printing-any-after-237-in-the-sequence', '<p>numbers = [&nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; 386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,&nbsp;</p><p>&nbsp; &nbsp; 399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,&nbsp;</p><p>&nbsp; &nbsp; 815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,&nbsp;</p><p>&nbsp; &nbsp; 958,743, 527</p><p>&nbsp; &nbsp; ]</p><br><p>for x in numbers:</p><p>&nbsp; &nbsp; if x == 237:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(x)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; elif x % 2 == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(x)</p>', 'numbers = [    \r\n\r\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, \r\n\r\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, \r\n\r\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, \r\n\r\n    958,743, 527\r\n]\r\n\r\nfor x in numbers:\r\n    if x == 237:\r\n        print(x)\r\n        break;\r\n    elif x % 2 == 0:\r\n        print(x)', 4, 0, NULL, '2023-02-25 21:19:52', '2023-06-02 19:54:26', NULL),
(33, 'Write a Python program that prints out all colors from color_list_1 that are not present in color_list_2. Test Data: color_list_1 = set([\"White\", \"Black\", \"Red\"]) color_list_2 = set([\"Red\", \"Green\"]) Expected Output : {\'Black\', \'White\'}', 'write-a-python-program-that-prints-out-all-colors-from-color-list-1-that-are-not-present-in-color-list-2-test-data-color-list-1-setwhite-black-red-color-list-2-setred-green-expected-output-black-white', '<p>color_list_1 = set([\"White\", \"Black\", \"Red\"])</p><p>color_list_2 = set([\"Red\", \"Green\"])</p><br><p>print(\"Original set elements:\")</p><p>print(color_list_1)</p><p>print(color_list_2)</p><br><p>print(\"\\nDifferent color of color_list_1 from color_list_2:\")</p><p>print(color_list_1.difference(color_list_2))</p><br><p>print(\"\\nDifferent color  of color_list_2 from color_list_1:\")</p><p>print(color_list_2.difference(color_list_1))</p>', 'color_list_1 = set([\"White\", \"Black\", \"Red\"])\r\ncolor_list_2 = set([\"Red\", \"Green\"])\r\n\r\nprint(\"Original set elements:\")\r\nprint(color_list_1)\r\nprint(color_list_2)\r\n\r\nprint(\"\\nDifferent color of color_list_1 from color_list_2:\")\r\nprint(color_list_1.difference(color_list_2))\r\n\r\nprint(\"\\nDifferent color  of color_list_2 from color_list_1:\")\r\nprint(color_list_2.difference(color_list_1))', 4, 0, NULL, '2023-02-25 21:23:09', '2023-06-03 02:41:01', NULL),
(34, 'Write a Python program that will accept the base and height of a triangle and compute its area.', 'write-a-python-program-that-will-accept-the-base-and-height-of-a-triangle-and-compute-its-area', '<p>b = int(input(\"Input the base : \"))</p><p>h = int(input(\"Input the height : \"))</p><br><p>area = b*h/2</p><br><p>print(\" The area of the triangle is = \", area)</p>', '#Take input as the base\r\nb = int(input( ))\r\n#Take input as the height\r\nh = int(input( ))\r\n\r\narea = b*h/2\r\n\r\nprint(\" The area of the triangle is = \", area)', 4, 1, NULL, '2023-02-25 21:24:36', '2023-06-03 02:46:15', NULL),
(35, 'Write a Python program that computes the greatest common divisor (GCD) of two positive integers.', 'write-a-python-program-that-computes-the-greatest-common-divisor-gcd-of-two-positive-integers', '<p>def gcd(x, y):</p><p>&nbsp; &nbsp;z = x % y&nbsp; &nbsp;</p><p>&nbsp; &nbsp;while z:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;x = y&nbsp; &nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;y = z&nbsp; &nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;z = x % y&nbsp; &nbsp;</p><p>&nbsp; &nbsp;return y</p><br><p>print(\"GCD of 12 &amp; 17 =\",gcd(12, 17))</p><p>print(\"GCD of 4 &amp; 6 =\",gcd(4, 6))</p><p>print(\"GCD of 336 &amp; 360 =\",gcd(336, 360))</p>', 'def gcd(x, y):\r\n   z = x % y\r\n   while z:\r\n      x = y\r\n      y = z\r\n      z = x % y\r\n   return y\r\n\r\nprint(\"GCD of 12 & 17 =\",gcd(12, 17))\r\nprint(\"GCD of 4 & 6 =\",gcd(4, 6))\r\nprint(\"GCD of 336 & 360 =\",gcd(336, 360))', 4, 0, NULL, '2023-02-26 05:06:10', '2023-06-03 03:11:24', NULL),
(36, 'Write a Python program to find the least common multiple (LCM) of two positive integers.', 'write-a-python-program-to-find-the-least-common-multiple-lcm-of-two-positive-integers', '<p>def lcm(x, y):</p><p>&nbsp; if x &gt; y:</p><p>&nbsp; &nbsp; &nbsp; z = x</p><p>&nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; z = y</p><p>&nbsp; while(True):</p><p>&nbsp; &nbsp; &nbsp; if((z % x == 0) and (z % y == 0)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lcm = z</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; &nbsp; z += 1</p><p>&nbsp; return lcm</p><br><p>print(lcm(4, 6))</p><p>print(lcm(15, 17))</p><div><br></div>', 'def lcm(x, y):\r\n  if x > y:\r\n      z = x\r\n  else:\r\n      z = y\r\n  while(True):\r\n      if((z % x == 0) and (z % y == 0)):\r\n          lcm = z\r\n          break\r\n      z += 1\r\n  return lcm\r\n\r\nprint(lcm(4, 6))\r\nprint(lcm(15, 17))', 2, 0, NULL, '2023-02-26 05:07:16', '2023-06-03 03:14:25', NULL),
(37, 'Write a Python program to sum three given integers. However, if two values are equal, the sum will be zero.', 'write-a-python-program-to-sum-three-given-integers-however-if-two-values-are-equal-the-sum-will-be-zero', '<p>def sum_three(x, y, z):</p><p>&nbsp; &nbsp; if x == y or y == z or x==z:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum = 0</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum = x + y + z</p><p>&nbsp; &nbsp; return sum</p><br><p>print(sum_three(2, 1, 2))</p><p>print(sum_three(3, 2, 2))</p><p>print(sum_three(2, 2, 2))</p><p>print(sum_three(1, 2, 3))</p><div><br></div>', 'def sum_three(x, y, z):\r\n    if x == y or y == z or x==z:\r\n        sum = 0\r\n    else:\r\n        sum = x + y + z\r\n    return sum\r\n\r\nprint(sum_three(2, 1, 2))\r\nprint(sum_three(3, 2, 2))\r\nprint(sum_three(2, 2, 2))\r\nprint(sum_three(1, 2, 3))', 2, 0, NULL, '2023-02-26 05:07:46', '2023-06-03 03:22:26', NULL),
(38, 'Write a Python program to sum two given integers. However, if the sum is between 15 and 20 it will return 20.', 'write-a-python-program-to-sum-two-given-integers-however-if-the-sum-is-between-15-and-20-it-will-return-20', '<p>def sum(x, y):</p><p>&nbsp; &nbsp; sum = x + y</p><p>&nbsp; &nbsp; if sum in range(15, 20):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return 20</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return sum</p><br><p>print(sum(10, 6))</p><p>print(sum(10, 2))</p><p>print(sum(10, 12))</p><div><br></div>', 'def sum(x, y):\r\n    sum = x + y\r\n    if sum in range(15, 20):\r\n        return 20\r\n    else:\r\n        return sum\r\n\r\nprint(sum(10, 6))\r\nprint(sum(10, 2))\r\nprint(sum(10, 12))', 2, 0, NULL, '2023-02-26 05:22:04', '2023-06-03 03:35:03', NULL),
(39, 'Write a Python program that returns true if the two given integer values are equal or their sum or difference is 5.', 'write-a-python-program-that-returns-true-if-the-two-given-integer-values-are-equal-or-their-sum-or-difference-is-5', '<p>def test_number5(x, y):</p><p>&nbsp; &nbsp;if x == y or abs(x-y) == 5 or (x+y) == 5:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return True</p><p>&nbsp; &nbsp;else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return False</p><br><p>print(test_number5(7, 2))</p><p>print(test_number5(3, 2))</p><p>print(test_number5(2, 2))</p><p>print(test_number5(7, 3))</p><p>print(test_number5(27, 53))</p><div><br></div>', 'def test_number5(x, y):\r\n   if x == y or abs(x-y) == 5 or (x+y) == 5:\r\n       return True\r\n   else:\r\n       return False\r\n\r\nprint(test_number5(7, 2))\r\nprint(test_number5(3, 2))\r\nprint(test_number5(2, 2))\r\nprint(test_number5(7, 3))\r\nprint(test_number5(27, 53))', 6, 0, NULL, '2023-02-26 05:22:50', '2023-06-03 03:52:51', NULL),
(40, 'Write a Python program to add two objects if both objects are integers.', 'write-a-python-program-to-add-two-objects-if-both-objects-are-integers', '<p>def add_numbers(a, b):</p><p>&nbsp; &nbsp;if not (isinstance(a, int) and isinstance(b, int)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return \"Inputs must be integers!\"</p><p>&nbsp; &nbsp;return a + b</p><br><p>print(add_numbers(10, 20))</p><p>print(add_numbers(10, 20.23))</p><p>print(add_numbers(\'5\', 6))</p><p>print(add_numbers(\'5\', \'6\'))</p>', 'def add_numbers(a, b):\r\n   if not (isinstance(a, int) and isinstance(b, int)):\r\n       return \"Inputs must be integers!\"\r\n   return a + b\r\n\r\nprint(add_numbers(10, 20))\r\nprint(add_numbers(10, 20.23))\r\nprint(add_numbers(\'5\', 6))\r\nprint(add_numbers(\'5\', \'6\'))', 0, 1, NULL, '2023-02-26 05:23:17', '2023-06-03 04:02:02', NULL),
(41, 'Write a Python program that displays your name, age, and address on three different lines.', 'write-a-python-program-that-displays-your-name-age-and-address-on-three-different-lines', '<p>def personal_details():</p><p>&nbsp; &nbsp; name, age = \"Simon\", 19</p><p>&nbsp; &nbsp; address = \"Bangalore, Karnataka, India\"</p><p>&nbsp; &nbsp; print(\"Name: {}\\nAge: {}\\nAddress: {}\".format(name, age, address))</p><br><p>personal_details()</p>', 'def personal_details():\r\n    name, age = \"Simon\", 19\r\n    address = \"Bangalore, Karnataka, India\"\r\n\r\n    print(\"Name: {}\\nAge: {}\\nAddress: {}\".format(name, age, address))\r\n\r\npersonal_details()', 2, 0, NULL, '2023-02-26 05:24:02', '2023-06-03 04:16:07', NULL),
(42, 'Write a Python program to solve (x + y) * (x + y).', 'write-a-python-program-to-solve-x-y-x-y', '<p># Take two numbers as input </p><p>x= float(input( )) </p><p>y = float(input( )) </p><p>result = x * x + 2 * x * y + y * y</p><p>print(\"({} + {}) ^ 2) = {}\".format(x, y, result))</p>', '# Take two numbers as input \r\nx = float(input( ))\r\ny = float(input( ))\r\n\r\nresult = x * x + 2 * x * y + y * y\r\n\r\nprint(\"({} + {}) ^ 2) = {}\".format(x, y, result))', 4, 1, NULL, '2023-02-26 05:24:23', '2023-06-03 04:44:24', NULL),
(43, 'Write a Python program to compute the future value of a specified principal amount, rate of interest, and the number of years.', 'write-a-python-program-to-compute-the-future-value-of-a-specified-principal-amount-rate-of-interest-and-the-number-of-years', '<p>#Take The Amount</p><p>amt = float(input( ))</p><p>#Take The Interest</p><p>int = float(input( ))</p><p>#Take The Year</p><p>years = float(input( ))</p><br><p>future_value = amt*((1+(0.01*int)) ** years)</p><br><p>print(round(future_value,2))</p>', '#Take The Amount\r\namt = float(input( ))\r\n#Take The Interest\r\nint = float(input( ))\r\n#Take The Year\r\nyears = float(input( ))\r\n\r\nfuture_value = amt*((1+(0.01*int)) ** years)\r\n\r\nprint(round(future_value,2))', 4, 1, NULL, '2023-02-26 05:50:34', '2023-06-03 05:10:55', NULL),
(44, 'Write a Python program to calculate the distance between the points (x1, y1) and (x2, y2).', 'write-a-python-program-to-calculate-the-distance-between-the-points-x1-y1-and-x2-y2', '<p>import math</p><br><p>p1 = [4, 0]</p><p>p2 = [6, 6]</p><br><p>distance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )</p><p><br></p><br><p>print(distance)</p>', 'import math\r\n\r\np1 = [4, 0]\r\np2 = [6, 6]\r\n\r\ndistance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )\r\n\r\nprint(distance)', 4, 0, NULL, '2023-02-26 05:53:29', '2023-06-03 05:13:23', NULL),
(45, 'Write a Python program to check whether a file exists.', 'write-a-python-program-to-check-whether-a-file-exists', '<p>import os.path</p><p>print(os.path.isfile(\'main.txt\'))</p><p>print(os.path.isfile(\'main.py\'))</p>', 'import os.path\n\nprint(os.path.isfile(\'main.txt\'))\n\nprint(os.path.isfile(\'main.py\'))', 2, 0, NULL, '2023-02-26 05:53:56', '2023-06-03 05:13:55', NULL),
(46, 'Write a Python program to determine if a Python shell is executing in 32bit or 64bit mode on OS.', 'write-a-python-program-to-determine-if-a-python-shell-is-executing-in-32bit-or-64bit-mode-on-os', '<p># For 32 bit it will return 32 and for 64 bit it will return 64</p><p>import struct</p><p>print(struct.calcsize(\"P\") * 8)</p>', '# For 32 bit it will return 32 and for 64 bit it will return 64\n\nimport struct\n\nprint(struct.calcsize(\"P\") * 8)', 2, 0, NULL, '2023-02-26 06:02:31', '2023-06-03 05:17:54', NULL),
(47, 'Write a Python program to get OS name, platform and release information.', 'write-a-python-program-to-get-os-name-platform-and-release-information', '<div>import platform</div><div>import os</div><br><div>print(\"Name of the operating system:\",os.name)</div><div>print(\"\\nName of the OS system:\",platform.system())</div><div>print(\"\\nVersion of the operating system:\",platform.release())</div>', 'import platform\r\nimport os\r\n\r\nprint(\"Name of the operating system:\",os.name)\r\nprint(\"\\nName of the OS system:\",platform.system())\r\nprint(\"\\nVersion of the operating system:\",platform.release())', 4, 0, NULL, '2023-02-26 06:04:09', '2023-06-03 05:20:41', NULL),
(48, 'Write a Python program to locate Python site packages.', 'write-a-python-program-to-locate-python-site-packages', '<p>import site;&nbsp;</p><p>print(site.getsitepackages())</p>', 'import site; \n\nprint(site.getsitepackages())', 2, 0, NULL, '2023-02-26 06:05:27', '2023-06-03 05:28:26', NULL),
(49, 'Write a Python program that calls an external command.', 'write-a-python-program-that-calls-an-external-command', '<p>import os</p><p>print(os.system(\'ls -l\'))</p><div><br></div>', 'import os\n\nprint(os.system(\'ls -l\'))', 2, 0, NULL, '2023-02-26 06:16:15', '2023-06-03 05:36:45', NULL),
(50, 'Write a Python program to retrieve the path and name of the file currently being executed.', 'write-a-python-program-to-retrieve-the-path-and-name-of-the-file-currently-being-executed', '<p>import os</p><p>print(\"Current File Name : \",os.path.realpath(__file__))</p>', 'import os\n\nprint(\"Current File Name : \",os.path.realpath(__file__))', 2, 0, NULL, '2023-02-26 06:16:48', '2023-06-03 05:41:19', NULL),
(51, 'Write a Python program to find out the number of CPUs used.', 'write-a-python-program-to-find-out-the-number-of-cpus-used', '<p>import multiprocessing</p><p>print(multiprocessing.cpu_count())</p>', 'import multiprocessing\n\nprint(multiprocessing.cpu_count())', 2, 0, NULL, '2023-02-26 06:17:29', '2023-06-03 05:42:02', NULL),
(52, 'Write a Python program to parse a string to float or integer.', 'write-a-python-program-to-parse-a-string-to-float-or-integer', '<p>def test(s):</p><p>&nbsp; &nbsp;try:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return int(s)</p><p>&nbsp; &nbsp;except ValueError:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return float(s)</p><br><p>print(test(\'12\'))</p><p>print(test(\'233.12\'))</p>', 'def test(s):\r\n   try:\r\n       return int(s)\r\n   except ValueError:\r\n       return float(s)\r\n\r\nprint(test(\'12\'))\r\nprint(test(\'233.12\'))', 4, 0, NULL, '2023-02-26 06:18:08', '2023-06-03 06:41:09', NULL),
(53, 'Print Hello world! in Python Program.', 'print-hello-world-in-python-program', '<p><span style=\"color: var(--bs-card-color);\"># This program prints&nbsp;</span><span style=\"color: var(--bs-card-color);\">Hello, world!</span></p><p><span style=\"color: var(--bs-card-color);\">print(\'Hello, world!\')</span></p>', '#This program Hello, world!\r\n\r\nprint(\'Hello, world!\')', 12, 0, '2023-04-26 19:21:08', '2023-01-08 18:44:53', '2023-06-02 18:56:55', NULL),
(54, 'Write a Python program to print without a newline or space.', 'write-a-python-program-to-print-without-a-newline-or-space', '<p>for i in range(0, 10):</p><p>&nbsp; &nbsp; print(\'*\', end=\"\")</p><br><p>print(\"\\n\")</p>', 'for i in range(0, 10):\r\n    print(\'*\', end=\"\")\r\n\r\nprint(\"\\n\")', 0, 0, NULL, '2023-02-26 06:25:41', '2023-06-03 06:37:30', NULL),
(55, 'Write a Python program to determine the profiling of Python programs.', 'write-a-python-program-to-determine-the-profiling-of-python-programs', '<p>import cProfile</p><br><p>def sum():</p><p>&nbsp; &nbsp; print(1+2)</p><br><p>cProfile.run(\'sum()\')</p>', 'import cProfile\r\n\r\ndef sum():\r\n    print(1+2)\r\n\r\ncProfile.run(\'sum()\')', 4, 0, NULL, '2023-02-26 06:28:19', '2023-06-03 06:55:08', NULL),
(56, 'Write a Python program to print to STDERR.', 'write-a-python-program-to-print-to-stderr', '<p>from __future__ import print_function</p><p>import sys</p><p><br></p><p>def eprint(*args, **kwargs):</p><p>&nbsp; &nbsp; print(*args, file=sys.stderr, **kwargs)</p><p><br></p><p>eprint(\"abc\", \"efg\", \"xyz\", sep=\"--\")</p><div><br></div>', 'from __future__ import print_function\n\nimport sys\n\n\n\ndef eprint(*args, **kwargs):\n\n    print(*args, file=sys.stderr, **kwargs)\n\n\n\neprint(\"abc\", \"efg\", \"xyz\", sep=\"--\")\n\n', 2, 0, NULL, '2023-02-26 06:30:03', '2023-06-03 06:56:23', NULL),
(57, 'Write a Python program to access environment variables.', 'write-a-python-program-to-access-environment-variables', '<p>import os</p><br><p>for item, value in os.environ.items():</p><p>&nbsp; &nbsp;print(\'{}: {}\'.format(item, value))</p>', 'import os\r\n\r\nfor item, value in os.environ.items():\r\n   print(\'{}: {}\'.format(item, value))', 4, 0, NULL, '2023-02-26 06:32:26', '2023-06-03 07:00:43', NULL),
(58, 'Write a Python program to get the current username.', 'write-a-python-program-to-get-the-current-username', '<p>import getpass</p><p>print(getpass.getuser())</p><div><br></div>', 'import getpass\n\nprint(getpass.getuser())', 2, 0, NULL, '2023-02-26 06:42:41', '2023-06-03 07:01:50', NULL),
(59, 'Write a Python program to find local IP addresses using Python\'s stdlib.', 'write-a-python-program-to-find-local-ip-addresses-using-pythons-stdlib', '<p>import socket</p><br><p>print([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2]&nbsp;</p><p>if not ip.startswith(\"127.\")][:1], [[(s.connect((\'8.8.8.8\', 53)),&nbsp;</p><p>s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET,&nbsp;</p><p>socket.SOCK_DGRAM)]][0][1]]) if l][0][0])</p>', 'import socket\r\n\r\nprint([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] \r\nif not ip.startswith(\"127.\")][:1], [[(s.connect((\'8.8.8.8\', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, \r\nsocket.SOCK_DGRAM)]][0][1]]) if l][0][0])', 2, 0, NULL, '2023-02-26 06:43:47', '2023-06-03 07:05:24', NULL),
(60, 'Write a Python program to get the height and width of the console window.', 'write-a-python-program-to-get-the-height-and-width-of-the-console-window', '<p>def terminal_size():</p><p>&nbsp; &nbsp; import fcntl, termios, struct</p><p>&nbsp; &nbsp; th, tw, hp, wp = struct.unpack(\'HHHH\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fcntl.ioctl(0, termios.TIOCGWINSZ,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; struct.pack(\'HHHH\', 0, 0, 0, 0)))</p><p>&nbsp; &nbsp; return tw, th</p><p><br></p><p>print(\'Number of columns and Rows: \',terminal_size())</p>', 'def terminal_size():\n\n    import fcntl, termios, struct\n\n    th, tw, hp, wp = struct.unpack(\'HHHH\',\n\n        fcntl.ioctl(0, termios.TIOCGWINSZ,\n\n        struct.pack(\'HHHH\', 0, 0, 0, 0)))\n\n    return tw, th\n\n\n\nprint(\'Number of columns and Rows: \',terminal_size())', 2, 0, NULL, '2023-02-26 06:44:30', '2023-06-03 07:05:43', NULL),
(61, 'Write a Python program to get the execution time of a Python method.', 'write-a-python-program-to-get-the-execution-time-of-a-python-method', '<p>import time</p><br><p>def sum_of_n_numbers(n):</p><p>&nbsp; &nbsp; start_time = time.time()</p><p>&nbsp; &nbsp; s = 0</p><p>&nbsp; &nbsp; for i in range(1,n+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; s = s + i</p><p>&nbsp; &nbsp; end_time = time.time()</p><p>&nbsp; &nbsp; return s,end_time-start_time</p><br><p>n = 5</p><p>print(\"\\nTime to sum of 1 to \",n,\" and required time to calculate is :\",sum_of_n_numbers(n))</p>', 'import time\r\n\r\ndef sum_of_n_numbers(n):\r\n    start_time = time.time()\r\n    s = 0\r\n    for i in range(1,n+1):\r\n        s = s + i\r\n    end_time = time.time()\r\n    return s,end_time-start_time\r\n\r\nn = 5\r\nprint(\"\\nTime to sum of 1 to \",n,\" and required time to calculate is :\",sum_of_n_numbers(n))', 2, 0, NULL, '2023-02-26 06:45:19', '2023-06-03 07:10:46', NULL),
(62, 'Write a Python program to sum the first n positive integers.', 'write-a-python-program-to-sum-the-first-n-positive-integers', '<p>n = int(input(\"Input a number: \"))</p><br><p>sum_num = (n * (n + 1)) / 2</p><br><p>print(\"Sum of the first\", n ,\"positive integers:\", sum_num)</p>', '#Take a number for input\r\nn = int(input( ))\r\n\r\nsum_num = (n * (n + 1)) / 2\r\n\r\nprint(\"Sum of the first\", n ,\"positive integers:\", sum_num)', 4, 1, NULL, '2023-02-26 06:46:44', '2023-06-03 07:15:04', NULL),
(63, 'Write a Python program to convert height (in feet and inches) to centimeters.', 'write-a-python-program-to-convert-height-in-feet-and-inches-to-centimeters', '<p>print(\"Input your height: \")</p><br><p>h_ft = int(input(\"Feet: \"))</p><p>h_inch = int(input(\"Inches: \"))</p><br><p>h_inch += h_ft * 12</p><p>h_cm = round(h_inch * 2.54, 1)</p><br><p>print(\"Your height is : %d cm.\" % h_cm)</p>', '#Input your height\r\n\r\n#In Feet\r\nh_ft = int(input( ))\r\n#In Inches\r\nh_inch = int(input( ))\r\n\r\nh_inch += h_ft * 12\r\nh_cm = round(h_inch * 2.54, 1)\r\n\r\nprint(\"Your height is : %d cm.\" % h_cm)', 4, 1, NULL, '2023-02-26 06:47:51', '2023-06-03 07:22:05', NULL),
(64, 'Write a Python program to calculate the hypotenuse of a right angled triangle.', 'write-a-python-program-to-calculate-the-hypotenuse-of-a-right-angled-triangle', '<p>from math import sqrt</p><br><p>print(\"Input lengths of shorter triangle sides:\")</p><p>a = float(input(\"a: \"))</p><p>b = float(input(\"b: \"))</p><br><p>c = sqrt(a**2 + b**2)</p><br><p>print(\"The length of the hypotenuse is:\", c )</p>', 'from math import sqrt\r\n\r\n#Input lengths of shorter triangle sides\r\na = float(input( ))\r\nb = float(input( ))\r\n\r\nc = sqrt(a**2 + b**2)\r\n\r\nprint(\"The length of the hypotenuse is:\", c )', 0, 1, NULL, '2023-02-26 06:48:33', '2023-06-03 10:10:55', NULL),
(65, 'Write a Python program to convert the distance (in feet) to inches, yards, and miles.', 'write-a-python-program-to-convert-the-distance-in-feet-to-inches-yards-and-miles', '<p>d_ft = int(input(\"Input distance in feet: \"))</p><p>d_inches = d_ft * 12</p><p>d_yards = d_ft / 3.0</p><p>d_miles = d_ft / 5280.0</p><br><p>print(\"The distance in inches is %i inches.\" % d_inches)</p><p>print(\"The distance in yards is %.2f yards.\" % d_yards)</p><p>print(\"The distance in miles is %.2f miles.\" % d_miles)</p>', '#Take input distance in feet\r\nd_ft = int(input( ))\r\n\r\nd_inches = d_ft * 12\r\n\r\nd_yards = d_ft / 3.0\r\n\r\nd_miles = d_ft / 5280.0\r\n\r\nprint(\"The distance in inches is %i inches.\" % d_inches)\r\nprint(\"The distance in yards is %.2f yards.\" % d_yards)\r\nprint(\"The distance in miles is %.2f miles.\" % d_miles)', 2, 1, NULL, '2023-02-26 06:51:58', '2023-06-03 10:15:12', NULL),
(66, 'Write a Python program to convert all units of time into seconds.', 'write-a-python-program-to-convert-all-units-of-time-into-seconds', '<p>days = int(input(\"Input days: \")) * 3600 * 24</p><p>hours = int(input(\"Input hours: \")) * 3600</p><p>minutes = int(input(\"Input minutes: \")) * 60</p><p>seconds = int(input(\"Input seconds: \"))</p><br><p>time = days + hours + minutes + seconds</p><br><p>print(\"The&nbsp; amounts of seconds\", time)</p>', '#Input days\r\ndays = int(input( )) * 3600 * 24\r\n#Input hours\r\nhours = int(input( )) * 3600\r\n#Input minutes\r\nminutes = int(input( )) * 60\r\n#Input seconds\r\nseconds = int(input( ))\r\n\r\ntime = days + hours + minutes + seconds\r\n\r\nprint(\"The  amounts of seconds\", time)', 4, 1, NULL, '2023-02-26 06:53:30', '2023-06-03 10:23:33', NULL),
(67, 'Write a Python program to get an absolute file path.', 'write-a-python-program-to-get-an-absolute-file-path', '<p>def absolute_file_path(path_fname):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; import os</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return os.path.abspath(\'path_fname\')&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>print(\"Absolute file path: \",absolute_file_path(\"test.txt\"))</p>', 'def absolute_file_path(path_fname):\n\n        import os\n\n        return os.path.abspath(\'path_fname\')        \n\nprint(\"Absolute file path: \",absolute_file_path(\"test.txt\"))', 2, 0, NULL, '2023-02-26 06:53:57', '2023-06-03 10:24:45', NULL),
(68, 'Write a Python program that retrieves the date and time of file creation and modification.', 'write-a-python-program-that-retrieves-the-date-and-time-of-file-creation-and-modification', '<p>import os.path, time</p><p>print(\"Last modified: %s\" % time.ctime(os.path.getmtime(\"test.txt\")))</p><p>print(\"Created: %s\" % time.ctime(os.path.getctime(\"test.txt\")))</p>', 'import os.path, time\r\n\r\nprint(\"Last modified: %s\" % time.ctime(os.path.getmtime(\"manage.py\")))\r\n\r\nprint(\"Created: %s\" % time.ctime(os.path.getctime(\"manage.py\")))', 4, 0, NULL, '2023-02-26 06:55:15', '2023-06-03 10:32:17', NULL),
(69, 'Write a Python program that converts seconds into days, hours, minutes, and seconds.', 'write-a-python-program-that-converts-seconds-into-days-hours-minutes-and-seconds', '<p>time = float(input(\"Input time in seconds: \"))</p><br><p>day = time // (24 * 3600)</p><p>time = time % (24 * 3600)</p><p>hour = time // 3600</p><p>time %= 3600</p><p>minutes = time // 60</p><p>time %= 60</p><br><p>seconds = time</p><br><p>print(\"d:h:m:s-&gt; %d:%d:%d:%d\" % (day, hour, minutes, seconds))</p>', '#Take Input time in seconds\r\ntime = float(input( ))\r\n\r\nday = time // (24 * 3600)\r\ntime = time % (24 * 3600)\r\nhour = time // 3600\r\ntime %= 3600\r\nminutes = time // 60\r\ntime %= 60\r\n\r\nseconds = time\r\n\r\nprint(\"d:h:m:s-> %d:%d:%d:%d\" % (day, hour, minutes, seconds))', 2, 1, NULL, '2023-02-26 06:56:10', '2023-06-03 10:37:48', NULL),
(70, 'Write a Python program to calculate the body mass index.', 'write-a-python-program-to-calculate-the-body-mass-index', '<p>height = float(input(\"Input your height in Feet: \"))</p><p>weight = float(input(\"Input your weight in Kilogram: \"))</p><br><p>print(\"Your body mass index is: \", round(weight / (height * height), 2))</p>', '#Input your height in Feet\r\nheight = float(input( ))\r\n#Input your weight in Kilogram\r\nweight = float(input( ))\r\n\r\nprint(\"Your body mass index is: \", round(weight / (height * height), 2))', 4, 1, NULL, '2023-02-26 06:56:53', '2023-06-03 10:43:23', NULL);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(71, 'Write a Python program to convert pressure in kilopascals to pounds per square inch,a millimeter of mercury (mmHg) and atmosphere pressure.', 'write-a-python-program-to-convert-pressure-in-kilopascals-to-pounds-per-square-incha-millimeter-of-mercury-mmhg-and-atmosphere-pressure', '<p>kpa = float(input(\"Input pressure in in kilopascals&gt; \"))</p><br><p>psi = kpa / 6.89475729</p><p>mmhg = kpa * 760 / 101.325</p><p>atm = kpa / 101.325</p><br><p>print(\"The pressure in pounds per square inch: %.2f psi\"&nbsp; % (psi))</p><p>print(\"The pressure in millimeter of mercury: %.2f mmHg\" % (mmhg))</p><p>print(\"Atmosphere pressure: %.2f atm.\" % (atm))</p>', '#Take pressure in kilopascals\r\nkpa = float(input( ))\r\n\r\npsi = kpa / 6.89475729\r\n\r\nmmhg = kpa * 760 / 101.325\r\n\r\natm = kpa / 101.325\r\n\r\nprint(\"The pressure in pounds per square inch: %.2f psi\"  % (psi))\r\nprint(\"The pressure in millimeter of mercury: %.2f mmHg\" % (mmhg))\r\nprint(\"Atmosphere pressure: %.2f atm.\" % (atm))', 2, 1, NULL, '2023-02-26 06:57:19', '2023-06-03 10:48:10', NULL),
(72, 'Write a Python program to calculate sum of digits of a number.', 'write-a-python-program-to-calculate-sum-of-digits-of-a-number', '<p>num = int(input(\"Input a four digit numbers: \"))</p><br><p>x&nbsp; = num //1000</p><p>x1 = (num - x*1000)//100</p><p>x2 = (num - x*1000 - x1*100)//10</p><p>x3 = num - x*1000 - x1*100 - x2*10</p><br><p>print(\"The sum of digits in the number is\", x+x1+x2+x3)</p>', '#Take a four digit numbers\r\nnum = int(input( ))\r\n\r\nx  = num //1000\r\n\r\nx1 = (num - x*1000)//100\r\n\r\nx2 = (num - x*1000 - x1*100)//10\r\n\r\nx3 = num - x*1000 - x1*100 - x2*10\r\n\r\nprint(\"The sum of digits in the number is\", x+x1+x2+x3)', 0, 1, NULL, '2023-02-26 06:58:04', '2023-06-03 10:51:13', NULL),
(73, 'Write a Python program to sort three integers without using conditional statements and loops.', 'write-a-python-program-to-sort-three-integers-without-using-conditional-statements-and-loops', '<p>x = int(input(\"Input first number: \"))</p><p>y = int(input(\"Input second number: \"))</p><p>z = int(input(\"Input third number: \"))</p><br><p>a1 = min(x, y, z)</p><p>a3 = max(x, y, z)</p><p>a2 = (x + y + z) - a1 - a3</p><br><p>print(\"Numbers in sorted order: \", a1, a2, a3)</p>', '#Take the first number\r\nx = int(input( ))\r\n#Take the second number\r\ny = int(input( ))\r\n#Take the third number\r\nz = int(input( ))\r\n\r\na1 = min(x, y, z)\r\n\r\na3 = max(x, y, z)\r\n\r\na2 = (x + y + z) - a1 - a3\r\n\r\nprint(\"Numbers in sorted order: \", a1, a2, a3)', 4, 1, NULL, '2023-02-26 06:59:41', '2023-06-03 10:54:45', NULL),
(74, 'Write a Python program to sort files by date.', 'write-a-python-program-to-sort-files-by-date', '<p>import glob</p><p>import os</p><br><p>files = glob.glob(\"*.py\")</p><p>files.sort(key=os.path.getmtime)</p><p>print(\"\\n\".join(files))</p>', 'import glob\r\n\r\nimport os\r\n\r\nfiles = glob.glob(\"*.py\")\r\n\r\nfiles.sort(key=os.path.getmtime)\r\n\r\nprint(\"\\n\".join(files))', 2, 0, NULL, '2023-02-26 07:00:25', '2023-06-03 10:59:44', NULL),
(75, 'Write a Python program to get a directory listing, sorted by creation date.', 'write-a-python-program-to-get-a-directory-listing-sorted-by-creation-date', '<p>from stat import S_ISREG, ST_CTIME, ST_MODE</p><br><p>import os, sys, time</p><br><p>#Relative or absolute path to the directory</p><p>dir_path = sys.argv[1] if len(sys.argv) == 2 else r\'.\'</p><br><p>#all entries in the directory w/ stats</p><p>data = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))</p><p>data = ((os.stat(path), path) for path in data)</p><br><p># regular files, insert creation date</p><p>data = ((stat[ST_CTIME], path)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for stat, path in data if S_ISREG(stat[ST_MODE]))</p><br><p>for cdate, path in sorted(data):</p><p>&nbsp; &nbsp; print(time.ctime(cdate), os.path.basename(path))</p>', 'from stat import S_ISREG, ST_CTIME, ST_MODE\r\n\r\nimport os, sys, time\r\n\r\n#Relative or absolute path to the directory\r\ndir_path = sys.argv[1] if len(sys.argv) == 2 else r\'.\'\r\n\r\n#all entries in the directory w/ stats\r\ndata = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))\r\ndata = ((os.stat(path), path) for path in data)\r\n\r\n# regular files, insert creation date\r\ndata = ((stat[ST_CTIME], path)\r\n           for stat, path in data if S_ISREG(stat[ST_MODE]))\r\n\r\nfor cdate, path in sorted(data):\r\n    print(time.ctime(cdate), os.path.basename(path))', 2, 0, NULL, '2023-02-26 07:01:57', '2023-06-03 11:06:25', NULL),
(76, 'Write a Python program to get the details of the math module.', 'write-a-python-program-to-get-the-details-of-the-math-module', '<p># Imports the math module</p><p>import math&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><br><p>#Sets everything to a list of math module</p><p>math_ls = dir(math) #&nbsp;</p><p>print(math_ls)</p><br><div>print(\"Details of math module:\\n\")</div><div>help(math)</div>', '# Imports the math module\r\nimport math            \r\n\r\n#Sets everything to a list of math module\r\nmath_ls = dir(math) # \r\n\r\nprint(math_ls)\r\n\r\nprint(\"Details of math module:\\n\")\r\nhelp(math)', 0, 0, NULL, '2023-02-26 07:22:55', '2023-06-03 11:11:31', NULL),
(77, 'Write a Python program to calculate the midpoints of a line.', 'write-a-python-program-to-calculate-the-midpoints-of-a-line', '<p>x1 = float(input(\'The value of x (the first endpoint) \'))</p><p>y1 = float(input(\'The value of y (the first endpoint) \'))</p><p>x2 = float(input(\'The value of x (the second endpoint) \'))</p><p>y2 = float(input(\'The value of y (the second endpoint) \'))</p><br><p>x_m_point = (x1 + x2)/2</p><br><p>y_m_point = (y1 + y2)/2</p><br><p>print(\"The midpoint of the line is :\")</p><p>print( \"The midpoint\'s x value is: \",x_m_point)</p><p>print( \"The midpoint\'s y value is: \",y_m_point)</p>', '#Take the value of x (the first endpoint)\r\nx1 = float(input( ))\r\n#Take the value of y (the first endpoint)\r\ny1 = float(input( ))\r\n#Take the value of x (the Second endpoint)\r\nx2 = float(input( ))\r\n#The value of y (the Second endpoint)\r\ny2 = float(input( ))\r\n\r\nx_m_point = (x1 + x2)/2\r\n\r\ny_m_point = (y1 + y2)/2\r\n\r\nprint(\"The midpoint of the line is :\")\r\nprint( \"The midpoint\'s x value is: \",x_m_point)\r\nprint( \"The midpoint\'s y value is: \",y_m_point)', 2, 1, NULL, '2023-02-26 07:38:20', '2023-06-03 11:22:39', NULL),
(78, 'Write a Python program to hash a word.', 'write-a-python-program-to-hash-a-word', '<p>soundex=[0,1,2,3,0,1,2,0,0,2,2,4,5,5,0,1,2,6,2,3,0,1,0,2,0,2]</p><br><p>word=input(\"Input the word be hashed: \")</p><p>word=word.upper()</p><br><p>coded=word[0]</p><br><p>for a in word[1:len(word)]:</p><p>&nbsp; &nbsp; i=65-ord(a)</p><p>&nbsp; &nbsp; coded=coded+str(soundex[i])</p><br><p>print(\"The coded word is: \"+coded)</p>', 'soundex=[0,1,2,3,0,1,2,0,0,2,2,4,5,5,0,1,2,6,2,3,0,1,0,2,0,2]\r\n\r\n#Take the word be hashed\r\nword=input( )\r\nword=word.upper()\r\n\r\ncoded=word[0]\r\n\r\nfor a in word[1:len(word)]:\r\n    i=65-ord(a)\r\n    coded=coded+str(soundex[i])\r\n\r\nprint(\"The coded word is: \"+coded)', 2, 1, NULL, '2023-02-26 05:19:22', '2023-06-03 11:30:16', NULL),
(79, 'Write a Python program to get the copyright information and write Copyright information in Python code.', 'write-a-python-program-to-get-the-copyright-information-and-write-copyright-information-in-python-code', '<p>print(\"Python copyright information:\\n\")</p><p>print(copyright)</p>', 'print(\"Python copyright information:\\n\")\r\n\r\nprint(copyright)', 4, 0, NULL, '2023-02-26 05:24:07', '2023-06-03 11:32:48', NULL),
(80, 'Write a Python program to get the command-line arguments (name of the script, the number of arguments, arguments) passed to a script.', 'write-a-python-program-to-get-the-command-line-arguments-name-of-the-script-the-number-of-arguments-arguments-passed-to-a-script', '<p>import sys</p><p>print(\"This is the name/path of the script:\"),sys.argv[0]</p><p>print(\"Number of arguments:\",len(sys.argv))</p><p>print(\"Argument List:\",str(sys.argv))</p>', 'import sys\n\nprint(\"This is the name/path of the script:\"),sys.argv[0]\n\nprint(\"Number of arguments:\",len(sys.argv))\n\nprint(\"Argument List:\",str(sys.argv))', 2, 0, NULL, '2023-02-26 05:44:26', '2023-06-03 11:34:40', NULL),
(81, 'Write a Python program to test whether the system is a big-endian platform or a little-endian platform.', 'write-a-python-program-to-test-whether-the-system-is-a-big-endian-platform-or-a-little-endian-platform', '<p>import sys</p><br><p>if sys.byteorder == \"little\":</p><p>&nbsp; &nbsp; #intel, alpha</p><p>&nbsp; &nbsp; print(\"Little-endian platform.\")</p><p>else:</p><p>&nbsp; &nbsp; #motorola, sparc</p><p>&nbsp; &nbsp; print(\"Big-endian platform.\")</p>', 'import sys\r\n\r\nif sys.byteorder == \"little\":\r\n    #intel, alpha\r\n    print(\"Little-endian platform.\")\r\nelse:\r\n    #motorola, sparc\r\n    print(\"Big-endian platform.\")', 4, 0, NULL, '2023-02-26 05:49:07', '2023-06-03 18:29:49', NULL),
(82, 'Write a Python program to find the available built-in modules.', 'write-a-python-program-to-find-the-available-built-in-modules', '<p>import sys</p><p>import textwrap</p><br><p>module_name = \', \'.join(sorted(sys.builtin_module_names))</p><br><p>print(textwrap.fill(module_name, width=70))</p>', 'import sys\r\nimport textwrap\r\n\r\nmodule_name = \', \'.join(sorted(sys.builtin_module_names))\r\n\r\nprint(textwrap.fill(module_name, width=70))', 2, 0, NULL, '2023-02-26 05:50:53', '2023-06-03 18:31:32', NULL),
(83, 'Write a Python program to get the size of an object in bytes.', 'write-a-python-program-to-get-the-size-of-an-object-in-bytes', '<p>import sys</p><br><p>str1 = \"one\"</p><p>str2 = \"four\"</p><p>str3 = \"three\"</p><br><p>x = 0</p><p>y = 112</p><p>z = 122.56</p><br><p>print(\"Size of \",str1,\"=\",str(sys.getsizeof(str1))+ \" bytes\")</p><p>print(\"Size of \",str2,\"=\",str(sys.getsizeof(str2))+ \" bytes\")</p><p>print(\"Size of \",str3,\"=\",str(sys.getsizeof(str3))+ \" bytes\")</p><br><p>print(\"Size of\",x,\"=\",str(sys.getsizeof(x))+ \" bytes\")</p><p>print(\"Size of\" ,y,\"=\"+str(sys.getsizeof(y))+ \" bytes\")</p><p>print(\"Size of\" ,z,\"=\"+str(sys.getsizeof(z))+ \" bytes\")</p><br><p>L = [1, 2, 3, \'Red\', \'Black\']</p><p>print(\"Size of\",L,\"=\",sys.getsizeof(L),\" bytes\")</p><br><p>T = (\"Red\", [8, 4, 6], (1, 2, 3))</p><p>print(\"Size of\",T,\"=\",sys.getsizeof(T),\" bytes\")</p><br><p>S = {\'apple\', \'orange\', \'apple\', \'pear\'}</p><p>print(\"Size of\",S,\"=\",sys.getsizeof(S),\" bytes\")</p><br><p>D = {\'Name\': \'David\', \'Age\': 6, \'Class\': \'First\'}</p><p>print(\"Size of\",D,\"=\",sys.getsizeof(S),\" bytes\")</p>', 'import sys\r\n\r\nstr1 = \"one\"\r\nstr2 = \"four\"\r\nstr3 = \"three\"\r\n\r\nx = 0\r\ny = 112\r\nz = 122.56\r\n\r\nprint(\"Size of \",str1,\"=\",str(sys.getsizeof(str1))+ \" bytes\")\r\nprint(\"Size of \",str2,\"=\",str(sys.getsizeof(str2))+ \" bytes\")\r\nprint(\"Size of \",str3,\"=\",str(sys.getsizeof(str3))+ \" bytes\")\r\n\r\nprint(\"Size of\",x,\"=\",str(sys.getsizeof(x))+ \" bytes\")\r\nprint(\"Size of\" ,y,\"=\"+str(sys.getsizeof(y))+ \" bytes\")\r\nprint(\"Size of\" ,z,\"=\"+str(sys.getsizeof(z))+ \" bytes\")\r\n\r\nL = [1, 2, 3, \'Red\', \'Black\']\r\nprint(\"Size of\",L,\"=\",sys.getsizeof(L),\" bytes\")\r\n\r\nT = (\"Red\", [8, 4, 6], (1, 2, 3))\r\nprint(\"Size of\",T,\"=\",sys.getsizeof(T),\" bytes\")\r\n\r\nS = {\'apple\', \'orange\', \'apple\', \'pear\'}\r\nprint(\"Size of\",S,\"=\",sys.getsizeof(S),\" bytes\")\r\n\r\nD = {\'Name\': \'David\', \'Age\': 6, \'Class\': \'First\'}\r\nprint(\"Size of\",D,\"=\",sys.getsizeof(S),\" bytes\")', 2, 0, NULL, '2023-03-19 14:33:02', '2023-06-03 18:38:07', NULL),
(84, 'Write a Python program to get the current value of the recursion limit.', 'write-a-python-program-to-get-the-current-value-of-the-recursion-limit', '<p>import sys</p><br><p>print(\"Current value of the recursion limit:\")</p><br><p>print(sys.getrecursionlimit())</p>', 'import sys\r\n\r\nprint(\"Current value of the recursion limit:\")\r\n\r\nprint(sys.getrecursionlimit())', 2, 0, NULL, '2023-03-19 14:34:35', '2023-06-03 18:41:30', NULL),
(85, 'Write a Python program to concatenate N strings.', 'write-a-python-program-to-concatenate-n-strings', '<p>list_of_colors = [\'Red\', \'White\', \'Black\']</p><br><p>colors = \'-\'.join(list_of_colors)</p><br><p>print(\"All Colors: \"+colors)</p>', 'list_of_colors = [\'Red\', \'White\', \'Black\']  \r\n\r\ncolors = \'-\'.join(list_of_colors)\r\n\r\nprint(\"All Colors: \"+colors)', 4, 0, NULL, '2023-03-19 14:35:10', '2023-06-03 18:44:59', NULL),
(86, 'Write a Python program to calculate the sum of all items of a container (list).', 'write-a-python-program-to-calculate-the-sum-of-all-items-of-a-container-list', '<p>#Given List</p><p>nums = [10,20,30]</p><br><p>print(\"Original container:\")</p><p>print(nums)</p><p>print(\"Sum of all items of the said container:\", sum(nums))</p>', '#Given List\r\nnums = [10,20,30]\r\n\r\nprint(\"Original container:\")\r\nprint(nums)\r\nprint(\"Sum of all items of the said container:\", sum(nums))', 4, 0, NULL, '2023-03-19 14:40:16', '2023-06-03 18:49:55', NULL),
(87, 'Write a Python program to calculate the sum of all items of a container (dictionary).', 'write-a-python-program-to-calculate-the-sum-of-all-items-of-a-container-dictionary', '<p>def dict_sum(nums):&nbsp; &nbsp; &nbsp;</p><p>&nbsp; &nbsp;num_sum = 0</p><br><p>&nbsp; &nbsp;for i in nums:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;num_sum = num_sum + nums[i]&nbsp; &nbsp; &nbsp;</p><p>&nbsp; &nbsp;return num_sum</p><br><p>nums = {\'a\': 100, \'b\':200, \'c\':300, \'d\':120}</p><br><p>print(\"Original container:\")</p><p>print(nums)</p><p>print(type(nums))</p><br><p>print(\"Sum of all items of the said container:\", dict_sum(nums))</p>', 'def dict_sum(nums):     \r\n   num_sum = 0\r\n\r\n   for i in nums:\r\n       num_sum = num_sum + nums[i]     \r\n   return num_sum\r\n\r\nnums = {\'a\': 100, \'b\':200, \'c\':300, \'d\':120}\r\n\r\nprint(\"Original container:\")\r\nprint(nums)\r\n\r\nprint(\"Sum of all items of the said container:\", dict_sum(nums))', 4, 0, NULL, '2023-03-19 14:41:00', '2023-06-03 18:54:29', NULL),
(88, 'Write a Python program to calculate the sum of all items of a container (tuple).', 'write-a-python-program-to-calculate-the-sum-of-all-items-of-a-container-tuple', '<p>nums = (7, 4, 9, 1, 3, 2)</p><br><p>print(\"The original container\")</p><p>print(nums)</p><br><p>sum_tuple = sum(nums)</p><br><p>print(\"Sum of all items of the said container:\", str(sum_tuple))</p>', 'nums = (7, 4, 9, 1, 3, 2)\r\n\r\nprint(\"The original container\")\r\nprint(nums)\r\n\r\nsum_tuple = sum(nums)\r\n\r\nprint(\"Sum of all items of the said container:\", str(sum_tuple))', 2, 0, NULL, '2023-03-19 14:41:54', '2023-06-03 18:56:45', NULL),
(89, 'Write a Python program to calculate the sum of all items of a container (set).', 'write-a-python-program-to-calculate-the-sum-of-all-items-of-a-container-set', '<p>nums = {7, 4, 9, 1, 3, 2}</p><br><p>print(\"The original container\")</p><p>print(nums)</p><br><p>sum_tuple = sum(nums)</p><br><p>print(\"Sum of all items of the said container:\", str(sum_tuple))</p>', 'nums = {7, 4, 9, 1, 3, 2}\r\n\r\nprint(\"The original container\")\r\nprint(nums)\r\n\r\nsum_tuple = sum(nums)\r\n\r\nprint(\"Sum of all items of the said container:\", str(sum_tuple))', 2, 0, NULL, '2023-03-19 14:42:41', '2023-06-03 18:59:04', NULL),
(90, 'Write a Python program to test whether all numbers in a list are greater than a certain number.', 'write-a-python-program-to-test-whether-all-numbers-in-a-list-are-greater-than-a-certain-number', '<p>def test(nums, n):</p><p>&nbsp; &nbsp;return(all(x &gt; n for x in nums))&nbsp; &nbsp; &nbsp;&nbsp;</p><br><p>nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</p><br><p>print(\"Original list numbers:\")</p><p>print(nums)</p><br><p>n = 12</p><br><p>print(\"\\nCheck whether all numbers of the said list greater than\",n)</p><p>print(test(nums, n))</p><br><p>n = 5</p><br><p>print(\"\\nCheck whether all numbers of the said list greater than\",n)</p><p>print(test(nums, n))</p><div><br></div>', 'def test(nums, n):\r\n   return(all(x > n for x in nums))      \r\n\r\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n\r\nprint(\"Original list numbers:\")\r\nprint(nums)\r\n\r\nn = 12\r\n\r\nprint(\"\\nCheck whether all numbers of the said list greater than\",n)\r\nprint(test(nums, n))\r\n\r\nn = 5\r\n\r\nprint(\"\\nCheck whether all numbers of the said list greater than\",n)\r\nprint(test(nums, n))', 4, 0, NULL, '2023-03-19 14:43:42', '2023-06-03 19:03:41', NULL),
(91, 'Write a Python program to count the number of occurrences of a specific character in a string using count() function.', 'write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-character-in-a-string-using-count-function', '<p>s = \"It does not matter how slowly you go so long as you do not stop.\"</p><br><p>print(\"Original string:\")</p><p>print(s)</p><br><p>print(\"Number of occurrence of \'o\' in the said string:\")</p><p>print(s.count(\"o\"))</p>', 's = \"It does not matter how slowly you go so long as you do not stop.\"  \r\n\r\nprint(\"Original string:\")\r\nprint(s)\r\n\r\nprint(\"Number of occurrence of \'o\' in the said string:\")\r\nprint(s.count(\"o\"))', 2, 0, NULL, '2023-03-19 14:47:42', '2023-06-03 19:09:55', NULL),
(92, 'Write a Python program to count the number of occurrences of a specific character in a string using loop.', 'write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-character-in-a-string-using-loop', '<p>s = \"It does not matter how slowly you go so long as you do not stop\"</p><br><p>print(\"Original string:\")</p><p>print(s)</p><br><p>print(\"Number of occurrence of \'o\' in the said string:\")</p><br><p>ctr = 0&nbsp;</p><br><p>for c in s:</p><p>&nbsp; &nbsp;if c == \'o\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp;ctr = ctr + 1</p><p>print(ctr)</p>', 's = \"It does not matter how slowly you go so long as you do not stop\"  \r\n\r\nprint(\"Original string:\")\r\nprint(s)\r\n\r\nprint(\"Number of occurrence of \'o\' in the said string:\")\r\n\r\nctr = 0 \r\n\r\nfor c in s:\r\n   if c == \'o\':\r\n       ctr = ctr + 1\r\nprint(ctr)', 2, 0, NULL, '2023-03-19 14:50:42', '2023-06-03 19:15:07', NULL),
(93, 'Write a Python program to count the number of occurrences of a specific character in a string using collections.Counter().', 'write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-character-in-a-string-using-collectionscounter', '<p>from collections import Counter</p><br><p>s = \"It does not matter how slowly you go so long as you do not stop\"</p><br><p>print(\"Original string:\")</p><p>print(s)</p><br><p>print(\"Number of occurrence of \'o\' in the said string:\")</p><br><p>ctr = Counter(s)</p><p>print (str(ctr[\'o\']))</p>', 'from collections import Counter\r\n\r\ns = \"It does not matter how slowly you go so long as you do not stop\"  \r\n\r\nprint(\"Original string:\")\r\nprint(s)\r\n\r\nprint(\"Number of occurrence of \'o\' in the said string:\")\r\n\r\nctr = Counter(s) \r\nprint (str(ctr[\'o\']))', 2, 0, NULL, '2023-03-19 14:51:36', '2023-06-03 19:19:15', NULL),
(94, 'Write a Python program to count the number of occurrences of a specific character in a string using Lambda functions.', 'write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-character-in-a-string-using-lambda-functions', '<p>s = \"It does not matter how slowly you go so long as you do not stop.\"</p><br><p>print(\"Original string:\")</p><p>print(s)</p><br><p>print(\"Number of occurrence of \'o\' in the said string:\")</p><br><p>ctr = sum(map(lambda x : 1 if \'o\' in x else 0, s))</p><p>print(ctr)</p>', 's = \"It does not matter how slowly you go so long as you do not stop.\"  \r\n\r\nprint(\"Original string:\")\r\nprint(s)\r\n\r\nprint(\"Number of occurrence of \'o\' in the said string:\")\r\n\r\nctr = sum(map(lambda x : 1 if \'o\' in x else 0, s))\r\nprint(ctr)', 2, 0, NULL, '2023-03-19 14:52:29', '2023-06-03 19:23:29', NULL),
(95, 'Write a Python program to count the number of occurrences of a specific character in a string using Regular Expressions.', 'write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-character-in-a-string-using-regular-expressions', '<p>import re</p><p>s = \"It does not matter how slowly you go so long as you do not stop.\"</p><br><p>print(\"Original string:\")</p><p>print(s)</p><br><p>print(\"Number of occurrence of \'o\' in the said string:\")</p><br><p>ctr = len(re.findall(\"o\", s))</p><p>print(ctr)</p>', 'import re\r\n\r\ns = \"It does not matter how slowly you go so long as you do not stop.\" \r\n\r\nprint(\"Original string:\")\r\nprint(s)\r\n\r\nprint(\"Number of occurrence of \'o\' in the said string:\")\r\n\r\nctr = len(re.findall(\"o\", s))\r\nprint(ctr)', 2, 0, NULL, '2023-03-19 14:53:14', '2023-06-03 19:25:45', NULL),
(96, 'Write a Python program to check whether a file path is a file or a directory.', 'write-a-python-program-to-check-whether-a-file-path-is-a-file-or-a-directory', '<p>import os</p><br><p>path=\"manage.py\"</p><br><p>if os.path.isdir(path):&nbsp;&nbsp;</p><p>&nbsp; &nbsp; print(\"\\nIt is a directory\")&nbsp;&nbsp;</p><p>elif os.path.isfile(path):&nbsp;&nbsp;</p><p>&nbsp; &nbsp; print(\"\\nIt is a normal file\")&nbsp;&nbsp;</p><p>else:&nbsp;&nbsp;</p><p>&nbsp; &nbsp; print(\"It is a special file (socket, FIFO, device file)\" )</p>', 'import os  \r\n\r\npath=\"manage.py\"  \r\n\r\nif os.path.isdir(path):  \r\n    print(\"\\nIt is a directory\")  \r\nelif os.path.isfile(path):  \r\n    print(\"\\nIt is a normal file\")  \r\nelse:  \r\n    print(\"It is a special file (socket, FIFO, device file)\" )', 2, 0, NULL, '2023-03-19 14:53:50', '2023-06-03 19:31:42', NULL),
(97, 'Write a Python program to get the ASCII value of a character.', 'write-a-python-program-to-get-the-ascii-value-of-a-character', '<p>print()</p><br><p>print(ord(\'a\'))</p><p>print(ord(\'A\'))</p><p>print(ord(\'1\'))</p><p>print(ord(\'@\'))</p><br><p>print()</p>', 'print()\r\n\r\nprint(ord(\'a\'))\r\nprint(ord(\'A\'))\r\nprint(ord(\'1\'))\r\nprint(ord(\'@\'))\r\n\r\nprint()', 2, 0, NULL, '2023-03-19 14:54:32', '2023-06-03 19:33:38', NULL),
(98, 'Write a Python program to get the size of a file.', 'write-a-python-program-to-get-the-size-of-a-file', '<p>import os</p><br><p>file_size = os.path.getsize(\"abc.txt\")</p><br><p>print(\"\\nThe size of abc.txt is :\",file_size,\"Bytes\")</p>', 'import os\r\n\r\nfile_size = os.path.getsize(\"manage.py\")\r\n\r\nprint(\"\\nThe size of manage.py is :\",file_size,\"Bytes\")', 4, 0, NULL, '2023-03-19 14:57:41', '2023-06-03 19:37:55', NULL),
(99, 'Given variables x=30 and y=20, write a Python program to print \"30+20=50\".', 'given-variables-x30-and-y20-write-a-python-program-to-print-302050', '<p>x = 30</p><p>y = 20</p><br><p>print(\"{0}+{1}={2}\".format(x, y, x+y))</p>', 'x = 30\r\ny = 20\r\n\r\nprint(\"{0}+{1}={2}\".format(x, y, x+y))', 0, 0, NULL, '2023-03-19 14:58:23', '2023-06-03 19:39:16', NULL),
(100, 'Write a Python program to perform an action if a condition is true.', 'write-a-python-program-to-perform-an-action-if-a-condition-is-true', '<p>n=1</p><br><p>if n == 1:</p><p>&nbsp; &nbsp;print(\"\\nFirst day of a Month!\")</p><p>print()</p>', 'n=1\r\n\r\nif n == 1:\r\n   print(\"\\nFirst day of a Month!\")\r\nprint()', 4, 0, NULL, '2023-03-19 15:01:12', '2023-06-03 19:40:57', NULL),
(101, 'Write a Python program to create a copy of its own source code.', 'write-a-python-program-to-create-a-copy-of-its-own-source-code', '<p>def file_copy(src, dest):</p><p>&nbsp; &nbsp; with open(src) as f, open(dest, \'w\') as d:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; d.write(f.read())</p><p>&nbsp; &nbsp; &nbsp; &nbsp; file_copy(\"untitled0.py\", \"z.py\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; with open(\'z.py\', \'r\') as filehandle:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for line in filehandle:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(line, end = \'\')</p><div><br></div>', 'def file_copy(src, dest):\n\n    with open(src) as f, open(dest, \'w\') as d:\n\n        d.write(f.read())\n\n        file_copy(\"untitled0.py\", \"z.py\")\n\n        with open(\'z.py\', \'r\') as filehandle:\n\n            for line in filehandle:\n\n                print(line, end = \'\')\n\n', 2, 0, NULL, '2023-03-19 15:40:45', '2023-06-03 19:50:53', NULL),
(102, 'Write a Python program to swap two variables.', 'write-a-python-program-to-swap-two-variables', '<p>x = 34</p><p>y = 56</p><br><p>print(\"Initial Value of x =\", x)</p><p>print(\"Initial Value of y =\", y)</p><br><p>temp = x</p><p>x = y</p><p>y = temp</p><br><p>print(\"\\nAfter swaping value of x =\", x)</p><p>print(\"After swaping value of y =\", y)</p><div><br></div>', 'x = 34\r\ny = 56\r\n\r\nprint(\"Initial Value of x =\", x)\r\nprint(\"Initial Value of y =\", y)\r\n\r\ntemp = x\r\nx = y\r\ny = temp\r\n\r\nprint(\"\\nAfter swaping value of x =\", x)\r\nprint(\"After swaping value of y =\", y)', 4, 0, NULL, '2023-03-19 15:42:06', '2023-06-03 20:01:04', NULL),
(103, 'Write a Python program to define a string containing special characters in various forms.', 'write-a-python-program-to-define-a-string-containing-special-characters-in-various-forms', '<p>print()</p><p>print(\"\\#{\'}${\\\"}@/\")</p><p>print(\"\\#{\'}${\"\'\"\'\"}@/\")</p><p>print(r\"\"\"\\#{\'}${\"}@/\"\"\")</p><p>print(\'\\#{\\\'}${\"}@/\')</p><p>print(\'\\#{\'\"\'\"\'}${\"}@/\')</p><p>print(r\'\'\'\\#{\'}${\"}@/\'\'\')</p><p>print()</p>', 'print()\n\nprint(\"\\#{\'}${\\\"}@/\")\n\nprint(\"\\#{\'}${\"\'\"\'\"}@/\")\n\nprint(r\"\"\"\\#{\'}${\"}@/\"\"\")\n\nprint(\'\\#{\\\'}${\"}@/\')\n\nprint(\'\\#{\'\"\'\"\'}${\"}@/\')\n\nprint(r\'\'\'\\#{\'}${\"}@/\'\'\')\n\nprint()', 2, 0, NULL, '2023-03-19 15:44:02', '2023-06-03 20:01:46', NULL),
(104, 'Write a Python program to get the Identity, Type, and Value of an object.', 'write-a-python-program-to-get-the-identity-type-and-value-of-an-object', '<p>x = 34</p><br><p>print(\"\\nIdentity: \",x)</p><p>print(\"\\nType: \",type(x))</p><p>print(\"\\nValue: \",id(x))</p>', 'x = 34\r\n\r\nprint(\"\\nIdentity: \",x)\r\nprint(\"\\nType: \",type(x))\r\nprint(\"\\nValue: \",id(x))', 2, 0, NULL, '2023-03-19 15:45:55', '2023-06-03 20:06:02', NULL),
(105, 'Write a Python program to convert the bytes in a given string to a list of integers.', 'write-a-python-program-to-convert-the-bytes-in-a-given-string-to-a-list-of-integers', '<p>S = \"The quick brown fox jumps over the lazy dog.\"</p><br><p>print(\"Original string:\")</p><p>print(S)</p><br><p>nums = []</p><br><p>print(\"\\nConvert bytes of the said string to a list of integers:\")</p><br><p>for chr in S:</p><p>&nbsp; &nbsp;nums.append(ord(chr))</p><p>print(nums)</p>', 'S = \"The quick brown fox jumps over the lazy dog.\"  \r\n\r\nprint(\"Original string:\")\r\nprint(S)\r\n\r\nnums = []\r\n\r\nprint(\"\\nConvert bytes of the said string to a list of integers:\")\r\n\r\nfor chr in S:\r\n   nums.append(ord(chr))\r\nprint(nums)', 4, 0, NULL, '2023-03-19 15:47:56', '2023-06-03 20:08:49', NULL),
(106, 'Write a Python program to check whether a string is numeric.', 'write-a-python-program-to-check-whether-a-string-is-numeric', '<p>str = \'a123\'</p><p>#str = \'123\'</p><br><p>try:</p><p>&nbsp; &nbsp; i = float(str)</p><p>&nbsp; &nbsp; print(i,\'is numeric\')</p><br><p>except (ValueError, TypeError):</p><p>&nbsp; &nbsp; print(\'\\nNot numeric\')</p><p>print()</p><div><br></div>', 'str = \'a123\'\r\n#str = \'123\'\r\n\r\ntry:\r\n    i = float(str)\r\n    print(i,\'is numeric\')\r\n\r\nexcept (ValueError, TypeError):\r\n    print(\'\\nNot numeric\')', 6, 0, NULL, '2023-03-19 15:49:02', '2023-06-03 20:15:16', NULL),
(107, 'Write a Python program to print the current call stack.', 'write-a-python-program-to-print-the-current-call-stack', '<p>import traceback</p><p>print()</p><p>def f1():return abc()</p><p>def abc():traceback.print_stack()</p><p>f1()</p><p>print()</p><div><br></div>', 'import traceback\n\nprint()\n\ndef f1():return abc()\n\ndef abc():traceback.print_stack()\n\nf1()\n\nprint()', 2, 0, NULL, '2023-03-19 15:49:33', '2023-06-03 20:16:22', NULL),
(108, 'Write a Python program to list the special variables used in the language.', 'write-a-python-program-to-list-the-special-variables-used-in-the-language', '<p>s_var_names = sorted((set(globals().keys()) | set(__builtins__.__dict__.keys())) - set(\'_ names i\'.split()))</p><p>print()</p><p>print( \'\\n\'.join(\' \'.join(s_var_names[i:i+8]) for i in range(0, len(s_var_names), 8)) )</p><p>print()</p><div><br></div>', 's_var_names = sorted((set(globals().keys()) | set(__builtins__.__dict__.keys())) - set(\'_ names i\'.split()))\n\nprint()\n\nprint( \'\\n\'.join(\' \'.join(s_var_names[i:i+8]) for i in range(0, len(s_var_names), 8)) )\n\nprint()\n\n', 4, 0, NULL, '2023-03-19 15:54:38', '2023-06-21 16:42:16', NULL),
(109, 'Write a Python program to get system time.', 'write-a-python-program-to-get-system-time', '<p>import datetime</p><p>print(datetime.datetime.now())</p><div><br></div>', 'import datetime\n\nprint(datetime.datetime.now())', 4, 0, NULL, '2023-03-19 15:55:19', '2023-06-21 16:43:16', NULL),
(110, 'Write a Python program to get the name of the host on which the routine is running.', 'write-a-python-program-to-get-the-name-of-the-host-on-which-the-routine-is-running', '<p>import platform</p><p>host_name = platform.uname()[1]</p><p>print(\"Host name:\", host_name )</p><div><br></div>', 'import platform\n\nhost_name = platform.uname()[1]\n\nprint(\"Host name:\", host_name )\n\n', 4, 0, NULL, '2023-03-19 15:58:33', '2023-06-21 16:44:10', NULL),
(111, 'Write a Python program to access and print a URL\'s content to the console.', 'write-a-python-program-to-access-and-print-a-urls-content-to-the-console', '<p>import requests</p><p>data = requests.get(\'https://google.com/\')</p><p>print(data.text)</p><div><br></div>', 'import requests\n\ndata = requests.get(\'https://google.com/\')\n\nprint(data.text)\n\n', 2, 0, NULL, '2023-03-19 16:01:19', '2023-06-21 16:44:20', NULL),
(112, 'Write a Python program to get system command output.', 'write-a-python-program-to-get-system-command-output', '<p>import subprocess</p><p># file and directory listing</p><p>returned_text = subprocess.check_output(\"dir\", shell=True, universal_newlines=True)</p><p>print(\"dir command to list file and directory\")</p><p>print(returned_text)</p><div><br></div>', 'import subprocess\n\n# file and directory listing\n\nreturned_text = subprocess.check_output(\"dir\", shell=True, universal_newlines=True)\n\nprint(\"dir command to list file and directory\")\n\nprint(returned_text)', 2, 0, NULL, '2023-03-19 16:02:07', '2023-06-21 16:46:01', NULL),
(113, 'Write a Python program to extract the filename from a given path.', 'write-a-python-program-to-extract-the-filename-from-a-given-path', '<p>import os</p><p>print()</p><p>print(os.path.basename(\'/users/system1/student1/homework-1.py\'))</p><p>print()</p><div><br></div>', 'import os\n\nprint()\n\nprint(os.path.basename(\'/users/system1/student1/homework-1.py\'))\n\nprint()\n\n', 2, 0, NULL, '2023-03-19 16:02:49', '2023-06-21 16:47:06', NULL),
(114, 'Write a Python program to get the effective group id, effective user id, real group id, and a list of supplemental group ids associated with the current process.', 'write-a-python-program-to-get-the-effective-group-id-effective-user-id-real-group-id-and-a-list-of-supplemental-group-ids-associated-with-the-current-process', '<p>import os</p><p>print(\"\\nEffective group id: \",os.getegid())</p><p>print(\"Effective user id: \",os.geteuid())</p><p>print(\"Real group id: \",os.getgid())</p><p>print(\"List of supplemental group ids: \",os.getgroups())</p><p>print()</p><div><br></div>', 'import os\n\nprint(\"\\nEffective group id: \",os.getegid())\n\nprint(\"Effective user id: \",os.geteuid())\n\nprint(\"Real group id: \",os.getgid())\n\nprint(\"List of supplemental group ids: \",os.getgroups())\n\nprint()\n\n', 2, 0, NULL, '2023-03-19 16:03:33', '2023-06-21 16:48:23', NULL),
(115, 'Write a Python program to get the user\'s environment.', 'write-a-python-program-to-get-the-users-environment', '<p>import os</p><p>print(os.environ)</p>', 'import os\r\n\r\nprint(os.environ)', 6, 0, NULL, '2023-03-19 16:05:07', '2023-06-21 16:52:48', 1),
(116, 'Write a Python program to divide a path by the extension separator.', 'write-a-python-program-to-divide-a-path-by-the-extension-separator', '<p>import os.path</p><br><p>for path in [ \'test.txt\', \'filename\', \'/user/system/test.txt\', \'/\', \'\' ]:</p><p>&nbsp; &nbsp; print(\'\"%s\" :\' % path, os.path.splitext(path))</p>', 'import os.path\r\n\r\nfor path in [ \'test.txt\', \'filename\', \'/user/system/test.txt\', \'/\', \'\' ]:\r\n    print(\'\"%s\" :\' % path, os.path.splitext(path))', 2, 0, NULL, '2023-03-19 19:14:32', '2023-06-21 17:10:55', 1),
(117, 'Write a Python program to retrieve file properties.', 'write-a-python-program-to-retrieve-file-properties', '<p>import os.path</p><p>import time</p><br><p>print(\'File&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;:\', __file__)</p><p>print(\'Access time&nbsp; :\', time.ctime(os.path.getatime(__file__)))</p><p>print(\'Modified time:\', time.ctime(os.path.getmtime(__file__)))</p><p>print(\'Change time&nbsp; :\', time.ctime(os.path.getctime(__file__)))</p><p>print(\'Size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;:\', os.path.getsize(__file__))</p>', 'import os.path\r\nimport time\r\n\r\nprint(\'File         :\', __file__)\r\nprint(\'Access time  :\', time.ctime(os.path.getatime(__file__)))\r\nprint(\'Modified time:\', time.ctime(os.path.getmtime(__file__)))\r\nprint(\'Change time  :\', time.ctime(os.path.getctime(__file__)))\r\nprint(\'Size         :\', os.path.getsize(__file__))', 4, 0, NULL, '2023-03-19 19:17:46', '2023-06-21 17:20:35', 1),
(118, 'Write a Python program to find the path to a file or directory when you encounter a path name.', 'write-a-python-program-to-find-the-path-to-a-file-or-directory-when-you-encounter-a-path-name', '<p>import os.path</p><br><p>for file in [ __file__, os.path.dirname(__file__), \'/\', \'./broken_link\']:</p><p>&nbsp; &nbsp; print(\'File&nbsp; &nbsp; &nbsp; &nbsp; :\', file)</p><p>&nbsp; &nbsp; print(\'Absolute&nbsp; &nbsp; :\', os.path.isabs(file))</p><p>&nbsp; &nbsp; print(\'Is File?&nbsp; &nbsp; :\', os.path.isfile(file))</p><p>&nbsp; &nbsp; print(\'Is Dir?&nbsp; &nbsp; &nbsp;:\', os.path.isdir(file))</p><p>&nbsp; &nbsp; print(\'Is Link?&nbsp; &nbsp; :\', os.path.islink(file))</p><p>&nbsp; &nbsp; print(\'Exists?&nbsp; &nbsp; &nbsp;:\', os.path.exists(file))</p><p>&nbsp; &nbsp; print(\'Link Exists?:\', os.path.lexists(file))</p>', 'import os.path\r\n\r\nfor file in [ __file__, os.path.dirname(__file__), \'/\', \'./broken_link\']:\r\n    print(\'File        :\', file)\r\n    print(\'Absolute    :\', os.path.isabs(file))\r\n    print(\'Is File?    :\', os.path.isfile(file))\r\n    print(\'Is Dir?     :\', os.path.isdir(file))\r\n    print(\'Is Link?    :\', os.path.islink(file))\r\n    print(\'Exists?     :\', os.path.exists(file))\r\n    print(\'Link Exists?:\', os.path.lexists(file))', 2, 0, NULL, '2023-03-19 19:18:34', '2023-06-21 17:23:45', 1),
(119, 'Write a Python program to check if a number is positive, negative or zero.', 'write-a-python-program-to-check-if-a-number-is-positive-negative-or-zero', '<p>num = float(input(\"Input a number: \"))</p><br><p>if num &gt; 0:</p><p>&nbsp; &nbsp;print(\"It is positive number\")</p><p>elif num == 0:</p><p>&nbsp; &nbsp;print(\"It is Zero\")</p><p>else:</p><p>&nbsp; &nbsp;print(\"It is a negative number\")</p>', '#Take a number as input\r\n\r\nnum = float(input( ))\r\n\r\nif num > 0:\r\n   print(\"It is positive number\")\r\nelif num == 0:\r\n   print(\"It is Zero\")\r\nelse:\r\n   print(\"It is a negative number\")', 4, 1, NULL, '2023-03-19 19:19:25', '2023-06-21 17:32:58', 1),
(120, 'Write a Python program to get numbers divisible by fifteen from a list using an anonymous function.', 'write-a-python-program-to-get-numbers-divisible-by-fifteen-from-a-list-using-an-anonymous-function', '<p>num_list = [45, 55, 60, 37, 100, 105, 220]</p><br><p>print(\"Original list:\",num_list)</p><br><p># use anonymous function to filter</p><p>result = list(filter(lambda x: (x % 15 == 0), num_list))</p><p>print(\"Numbers of the said list divisible by 15 are:\",result)</p>', 'num_list = [45, 55, 60, 37, 100, 105, 220]\r\n\r\nprint(\"Original list:\",num_list)\r\n\r\n# use anonymous function to filter\r\nresult = list(filter(lambda x: (x % 15 == 0), num_list))\r\nprint(\"Numbers of the said list divisible by 15 are:\",result)', 4, 0, NULL, '2023-03-19 19:21:10', '2023-06-21 17:51:32', 1),
(121, 'Write a Python program to make file lists from the current directory using a wildcard.', 'write-a-python-program-to-make-file-lists-from-the-current-directory-using-a-wildcard', '<p>import glob</p><br><p>file_list = glob.glob(\'*.*\')</p><p>print(file_list)</p><br><p>#Specific files</p><p>print(glob.glob(\'*.py\'))</p><p>print(glob.glob(\'./[0-9].*\'))</p>', 'import glob\r\n\r\nfile_list = glob.glob(\'*.*\')\r\nprint(file_list)\r\n\r\n#Specific files\r\nprint(glob.glob(\'*.py\'))\r\nprint(glob.glob(\'./[0-9].*\'))', 2, 0, NULL, '2023-03-19 19:21:45', '2023-06-21 19:55:11', 1),
(122, 'Write a Python program to remove the first item from a specified list.', 'write-a-python-program-to-remove-the-first-item-from-a-specified-list', '<p>color = [\"Red\", \"Black\", \"Green\", \"White\", \"Orange\"]</p><br><p>print(\"Original list elements:\")</p><p>print(color)</p><br><p>del color[0]</p><p>print(\"After removing the first color:\")</p><p>print(color)</p>', 'color = [\"Red\", \"Black\", \"Green\", \"White\", \"Orange\"]\r\n\r\nprint(\"Original list elements:\")\r\nprint(color)\r\n\r\ndel color[0]\r\nprint(\"After removing the first color:\")\r\nprint(color)', 2, 0, NULL, '2023-03-19 19:22:22', '2023-06-21 19:56:49', 1),
(123, 'Write a Python program that inputs a number and generates an error message if it is not a number.', 'write-a-python-program-that-inputs-a-number-and-generates-an-error-message-if-it-is-not-a-number', '<p>while True:</p><p>&nbsp; &nbsp; try:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; a = int(input(\"Input a number: \"))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; except ValueError:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"\\nThis is not a number. Try again...\")</p>', 'while True:\r\n    try:\r\n        a = int(input(\"Input a number: \"))\r\n        break\r\n    except ValueError:\r\n        print(\"\\nThis is not a number. Try again...\")', 0, 1, NULL, '2023-03-19 19:39:55', '2023-06-21 19:59:43', 1),
(124, 'Write a Python program to filter positive numbers from a list.', 'write-a-python-program-to-filter-positive-numbers-from-a-list', '<p>nums = [34, 1, 0, -23, 12, -88]</p><br><p>print(\"Original numbers in the list: \",nums)</p><br><p>print(\"Positive numbers in the said list: \")</p><br><p>for pos_nums in nums:</p><p>&nbsp; &nbsp;if pos_nums &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; print(pos_nums, end = \" \")</p>', 'nums = [34, 1, 0, -23, 12, -88]\r\n\r\nprint(\"Original numbers in the list: \",nums)\r\n\r\nprint(\"Positive numbers in the said list: \")\r\n\r\nfor pos_nums in nums:\r\n   if pos_nums > 0:\r\n      print(pos_nums, end = \"  \")', 4, 0, NULL, '2023-03-19 19:40:40', '2023-06-21 20:03:31', 1),
(125, 'Write a Python program to compute the product of a list of integers (without using for loop).', 'write-a-python-program-to-compute-the-product-of-a-list-of-integers-without-using-for-loop', '<p>import math</p><br><p>nums = [10, 20, 30,]</p><br><p>print(\"Original list numbers:\", nums)</p><br><p>nums_product = math.prod(nums)</p><p>print(\"\\nProduct of the said numbers (without using for loop):\",nums_product)</p>', 'import math\r\n\r\nnums = [10, 20, 30,]\r\n\r\nprint(\"Original list numbers:\", nums)\r\n\r\nnums_product = math.prod(nums)\r\nprint(\"\\nProduct of the said numbers (without using for loop):\",nums_product)', 4, 0, NULL, '2023-03-19 19:41:44', '2023-06-21 20:07:05', 1),
(126, 'Write a Python program to print Unicode characters.', 'write-a-python-program-to-print-unicode-characters', '<p>str = u\'\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e \\u0045\\u0078\\u0065\\u0072\\u0063\\u0069\\u0073\\u0065\\u0073 \\u002d \\u0050\\u0079\\u0073\\u0068\\u0069\\u006b\\u0068\\u006f\'</p><p>print(str)</p>', 'str = u\'\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e \\u0045\\u0078\\u0065\\u0072\\u0063\\u0069\\u0073\\u0065\\u0073 \\u002d \\u0050\\u0079\\u0073\\u0068\\u0069\\u006b\\u0068\\u006f\'\r\n\r\nprint(str)', 6, 0, NULL, '2023-03-19 19:44:52', '2023-06-21 20:23:07', 1),
(127, 'Write a Python program to prove that two string variables of the same value point to the same memory location.', 'write-a-python-program-to-prove-that-two-string-variables-of-the-same-value-point-to-the-same-memory-location', '<p>str1 = \"Python\"</p><p>str2 = \"Python\"</p><br><p>print(\"\\nMemory location of str1 =\", hex(id(str1)))</p><p>print(\"Memory location of str2 =\", hex(id(str2)))</p>', 'str1 = \"Python\"\r\nstr2 = \"Python\"\r\n\r\nprint(\"\\nMemory location of str1 =\", hex(id(str1)))\r\nprint(\"Memory location of str2 =\", hex(id(str2)))', 4, 0, NULL, '2023-03-19 19:45:51', '2023-06-21 20:25:59', 1),
(128, 'Write a Python program to create a bytearray from a list.', 'write-a-python-program-to-create-a-bytearray-from-a-list', '<p>nums = [10, 20, 56, 35, 17, 99]</p><br><p># Create bytearray from list of integers.</p><p>values = bytearray(nums)</p><br><p>for x in values: </p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(x)</p>', 'nums = [10, 20, 56, 35, 17, 99]\r\n\r\n# Create bytearray from list of integers.\r\nvalues = bytearray(nums)\r\n\r\nfor x in values: \r\n     print(x)', 2, 0, NULL, '2023-03-19 19:46:43', '2023-06-21 20:34:00', 1),
(129, 'Write a Python program to round a floating-point number to a specified number of decimal places.', 'write-a-python-program-to-round-a-floating-point-number-to-a-specified-number-of-decimal-places', '<p>order_amt = 212.374</p><br><p>print(\'\\nThe total order amount comes to %f\' % order_amt)</p><p>print(\'The total order amount comes to %.2f\' % order_amt)</p>', 'order_amt = 212.374\r\n\r\nprint(\'\\nThe total order amount comes to %f\' % order_amt)\r\nprint(\'The total order amount comes to %.2f\' % order_amt)', 2, 0, NULL, '2023-03-19 19:47:16', '2023-06-21 20:41:55', 1),
(130, 'Write a Python program to format a specified string and limit the length of a string.', 'write-a-python-program-to-format-a-specified-string-and-limit-the-length-of-a-string', '<p>str_num = \"1234567890\"</p><p>print(\"Original string:\",str_num)</p><br><p>print(\'%.6s\' % str_num)</p><p>print(\'%.9s\' % str_num)</p><p>print(\'%.10s\' % str_num)</p>', 'str_num = \"1234567890\"\r\nprint(\"Original string:\",str_num)\r\n\r\nprint(\'%.6s\' % str_num)\r\nprint(\'%.9s\' % str_num)\r\nprint(\'%.10s\' % str_num)', 2, 0, NULL, '2023-03-19 19:48:03', '2023-06-21 20:43:30', 1),
(131, 'Write a Python program to determine if a variable is defined or not.', 'write-a-python-program-to-determine-if-a-variable-is-defined-or-not', '<p>try:</p><p>&nbsp; x = 1</p><p>except NameError:</p><p>&nbsp; print(\"Variable is not defined....!\")</p><p>else:</p><p>&nbsp; print(\"Variable is defined.\")</p><br><p>try:</p><p>&nbsp; y</p><p>except NameError:</p><p>&nbsp; print(\"Variable is not defined....!\")</p><p>else:</p><p>&nbsp; print(\"Variable is defined.\")</p>', 'try:\r\n  x = 1\r\nexcept NameError:\r\n  print(\"Variable is not defined....!\")\r\nelse:\r\n  print(\"Variable is defined.\")\r\n\r\ntry:\r\n  y\r\nexcept NameError:\r\n  print(\"Variable is not defined....!\")\r\nelse:\r\n  print(\"Variable is defined.\")', 2, 0, NULL, '2023-03-19 19:48:37', '2023-06-21 20:46:29', 1),
(132, 'Write a Python program to empty a variable without destroying it.', 'write-a-python-program-to-empty-a-variable-without-destroying-it', '<p>def Empty_Var(lst):</p><p>&nbsp; &nbsp;return [type(i)() for i in lst]</p><br><p>lst = [\"python\",{\"x\":12},[10,12,\"sfsd\"], (4,5), 200]</p><br><p>print(\"Original objects:\")</p><p>print(lst)</p><br><p>print(\"\\nEmpty the said variables without destroying it:\")</p><p>print(Empty_Var(lst))</p>', 'def Empty_Var(lst):\r\n   return [type(i)() for i in lst]\r\n\r\nlst = [\"python\",{\"x\":12},[10,12,\"sfsd\"], (4,5), 200]\r\n\r\nprint(\"Original objects:\")\r\nprint(lst)\r\n\r\nprint(\"\\nEmpty the said variables without destroying it:\")\r\nprint(Empty_Var(lst))', 2, 0, NULL, '2023-03-19 19:51:27', '2023-06-21 20:51:57', 1),
(133, 'Write a Python program to determine the largest and smallest integers, longs, and floats.', 'write-a-python-program-to-determine-the-largest-and-smallest-integers-longs-and-floats', '<p>import sys</p><br><p>print(\"Float value information: \",sys.float_info)</p><p>print(\"\\nInteger value information: \",sys.int_info)</p><p>print(\"\\nMaximum size of an integer: \",sys.maxsize)</p>', 'import sys\r\n\r\nprint(\"Float value information: \",sys.float_info)\r\nprint(\"\\nInteger value information: \",sys.int_info)\r\nprint(\"\\nMaximum size of an integer: \",sys.maxsize)', 2, 0, NULL, '2023-03-19 19:52:47', '2023-06-21 20:57:49', 1),
(134, 'Write a Python program to check whether multiple variables have the same value.', 'write-a-python-program-to-check-whether-multiple-variables-have-the-same-value', '<p>def multiple_variables_equality(*vars):</p><p>&nbsp; &nbsp;for x in vars:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;if x != vars[0]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"All variables have not same value.\"</p><p>&nbsp; &nbsp;return \"All variables have same value.\"</p><br><p>print(multiple_variables_equality(2,3,2,2,2,2))</p><p>print(multiple_variables_equality(10,10,10,10))</p><p>print(multiple_variables_equality(-3,-3,-3,-3))</p>', 'def multiple_variables_equality(*vars):\r\n   for x in vars:\r\n       if x != vars[0]:\r\n           return \"All variables have not same value.\"\r\n   return \"All variables have same value.\"\r\n\r\nprint(multiple_variables_equality(2,3,2,2,2,2))\r\nprint(multiple_variables_equality(10,10,10,10))\r\nprint(multiple_variables_equality(-3,-3,-3,-3))', 2, 0, NULL, '2023-03-19 19:54:55', '2023-06-21 21:00:13', 2),
(135, 'Write a Python program to sum all counts in a collection.', 'write-a-python-program-to-sum-all-counts-in-a-collection.', '<p>import collections</p><br><p>nums = [2,2,4,6,6,8,6,10,4]</p><p>print(sum(collections.Counter(num).values()))</p>', 'import collections\r\n\r\nnum = [2,2,4,6,6,8,6,10,4]\r\nprint(sum(collections.Counter(num).values()))', 4, 0, NULL, '2023-03-19 20:00:12', '2023-06-21 21:06:43', 1),
(136, 'Write a Python program to get the actual module object for a given object.', 'write-a-python-program-to-get-the-actual-module-object-for-a-given-object', '<p>from inspect import getmodule</p><p>from math import sqrt</p><br><p>print(getmodule(sqrt))</p>', 'from inspect import getmodule\r\nfrom math import sqrt\r\n\r\nprint(getmodule(sqrt))', 2, 0, NULL, '2023-03-19 20:02:53', '2023-06-21 21:10:31', 1),
(137, 'Write a Python program to check whether an integer fits in 64 bits.', 'write-a-python-program-to-check-whether-an-integer-fits-in-64-bits', '<p>int_val = 30</p><br><p>if int_val.bit_length() &lt;= 63:</p><p>&nbsp; &nbsp; print((-2 ** 63).bit_length())</p><p>&nbsp; &nbsp; print((2 ** 63).bit_length())</p>', 'int_val = 30\r\n\r\nif int_val.bit_length() <= 63:\r\n    print((-2 ** 63).bit_length())\r\n    print((2 ** 63).bit_length())', 2, 0, NULL, '2023-03-19 20:04:58', '2023-06-21 21:16:13', 1),
(138, 'Write a Python program to check whether lowercase letters exist in a string.', 'write-a-python-program-to-check-whether-lowercase-letters-exist-in-a-string', '<p>def lower_case_str(text):</p><p>&nbsp; &nbsp;ctr = 0</p><p>&nbsp; &nbsp;for char in text:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;if(ord(char) &gt;= 97 and ord(char) &lt;= 122):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ctr = ctr + 1</p><p>&nbsp; &nbsp;if (ctr&gt;0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;return True</p><br><p>str1 = \'A8238i823acdeOUEI\'</p><p>print(\"Original string:\",str1)</p><p>print(\"Lowercase letters exist in the said string: \",lower_case_str(str1))</p><br><p>str1 = \'PYTHON\'</p><p>print(\"\\nOriginal string:\",str1)</p><p>print(\"Lowercase letters exist in the said string: \",lower_case_str(str1))</p><br><p>str1 = \'javascript\'</p><p>print(\"\\nOriginal string:\",str1)</p><p>print(\"Lowercase letters exist in the said string: \",lower_case_str(str1))</p>', 'def lower_case_str(text):\r\n   ctr = 0\r\n   for char in text:\r\n       if(ord(char) >= 97 and ord(char) <= 122):\r\n           ctr = ctr + 1\r\n   if (ctr>0):\r\n       return True\r\n\r\nstr1 = \'A8238i823acdeOUEI\'\r\nprint(\"Original string:\",str1)\r\nprint(\"Lowercase letters exist in the said string: \",lower_case_str(str1))\r\n\r\nstr1 = \'PYTHON\'\r\nprint(\"\\nOriginal string:\",str1)\r\nprint(\"Lowercase letters exist in the said string: \",lower_case_str(str1))\r\n\r\nstr1 = \'javascript\'\r\nprint(\"\\nOriginal string:\",str1)\r\nprint(\"Lowercase letters exist in the said string: \",lower_case_str(str1))', 2, 0, NULL, '2023-03-19 20:07:46', '2023-06-21 21:19:56', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(139, 'Write a Python program to add leading zeroes to a string.', 'write-a-python-program-to-add-leading-zeroes-to-a-string', '<p>str1=\'123.29\'</p><p>print(\"Original String: \",str1)</p><br><p>print(\"\\nAdded trailing zeros:\")</p><p>str1 = str1.ljust(8, \'0\')</p><p>print(str1)</p><p>str1 = str1.ljust(10, \'0\')</p><p>print(str1)</p><br><p>print(\"\\nAdded leading zeros:\")</p><p>str1=\'123.29\'</p><p>str1 = str1.rjust(8, \'0\')</p><p>print(str1)</p><p>str1 = str1.rjust(10, \'0\')</p><p>print(str1)</p>', 'str1=\'123.29\'\r\nprint(\"Original String: \",str1)\r\n\r\nprint(\"\\nAdded trailing zeros:\")\r\nstr1 = str1.ljust(8, \'0\')\r\nprint(str1)\r\nstr1 = str1.ljust(10, \'0\')\r\nprint(str1)\r\n\r\nprint(\"\\nAdded leading zeros:\")\r\nstr1=\'123.29\'\r\nstr1 = str1.rjust(8, \'0\')\r\nprint(str1)\r\nstr1 = str1.rjust(10, \'0\')\r\nprint(str1)', 6, 0, NULL, '2023-03-19 20:09:21', '2023-06-21 21:28:58', 1),
(140, 'Write a Python program that uses double quotes to display strings.', 'write-a-python-program-that-uses-double-quotes-to-display-strings', '<p>import json</p><br><p>print(json.dumps({\'Alex\': 1, \'Suresh\': 2, \'Agnessa\': 3}))</p>', 'import json\r\n\r\nprint(json.dumps({\'Alex\': 1, \'Suresh\': 2, \'Agnessa\': 3}))', 0, 0, NULL, '2023-03-19 21:22:50', '2023-06-21 21:32:01', 1),
(141, 'Write a Python program to split a variable length string into variables.', 'write-a-python-program-to-split-a-variable-length-string-into-variables', '<p>var_list = [\'a\', \'b\', \'c\']</p><br><p>x, y, z = (var_list + [None] * 3)[:3]</p><p>print(x, y, z)</p><br><p>var_list = [100, 20.25]</p><br><p>x, y = (var_list + [None] * 2)[:2]</p><p>print(x, y)</p>', 'var_list = [\'a\', \'b\', \'c\']\r\n\r\nx, y, z = (var_list + [None] * 3)[:3]\r\nprint(x, y, z)\r\n\r\nvar_list = [100, 20.25]\r\n\r\nx, y = (var_list + [None] * 2)[:2]\r\nprint(x, y)', 4, 0, NULL, '2023-03-19 21:32:11', '2023-06-21 21:35:06', 1),
(142, 'Write a Python program to list the home directory without an absolute path.', 'write-a-python-program-to-list-the-home-directory-without-an-absolute-path', '<p>import os.path</p><p>print(os.path.expanduser(\'~\'))</p><div><br></div>', 'import os.path\n\nprint(os.path.expanduser(\'~\'))', 2, 0, NULL, '2023-03-19 21:32:44', '2023-06-21 21:35:35', NULL),
(143, 'Write a Python program to calculate the time runs (difference between start and current time)of a program.', 'write-a-python-program-to-calculate-the-time-runs-difference-between-start-and-current-timeof-a-program', '<p>from timeit import default_timer</p><br><p>def timer(n):</p><p>&nbsp; &nbsp; start = default_timer()</p><p>&nbsp; &nbsp; # some code here</p><p>&nbsp; &nbsp; for row in range(0,n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(row)</p><p>&nbsp; &nbsp; print(default_timer() - start)</p><br><p>timer(2)</p><p>timer(4)</p>', 'from timeit import default_timer\r\n\r\ndef timer(n):\r\n    start = default_timer()\r\n    # some code here\r\n    for row in range(0,n):\r\n        print(row)\r\n    print(default_timer() - start)\r\n\r\ntimer(2)\r\ntimer(4)', 2, 0, NULL, '2023-03-19 21:34:12', '2023-06-21 21:48:47', 1),
(144, 'Write a Python program to input two integers on a single line.', 'write-a-python-program-to-input-two-integers-on-a-single-line', '<p>#Take inputs for the value of a & b in a single line</p><p>#Give a space between two inputs</p><br><p>x, y = map(int, input().split())</p><p>print(\"The value of a &amp; b are:\",a,b)</p>', '#Take inputs for the value of a & b in a single line\r\n#Give a space between two inputs\r\n\r\nx, y = map(int, input().split())\r\nprint(\"The value of x & y are: \",x,y)', 10, 1, NULL, '2023-03-19 21:35:56', '2023-06-21 22:07:53', 1),
(145, 'Write a Python program to print a variable without spaces between values.', 'write-a-python-program-to-print-a-variable-without-spaces-between-values', '<p>x = 30</p><br><p>print(\'Value of x is \"{}\"\'.format(x))</p>', 'x = 30\r\n\r\nprint(\'Value of x is \"{}\"\'.format(x))', 0, 0, NULL, '2023-03-19 21:37:27', '2023-06-21 22:11:55', 1),
(146, 'Write a Python program to find files and skip directories in a given directory.', 'write-a-python-program-to-find-files-and-skip-directories-in-a-given-directory', '<p>import os</p><br><p>user_path = \'d:/\'</p><br><p>for fname in os.listdir(user_path):</p><p>&nbsp; &nbsp;path = os.path.join(user_path, fname)</p><p>&nbsp; &nbsp;if os.path.isdir(path):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;# skip directories</p><p>&nbsp; &nbsp; &nbsp; &nbsp;continue</p><p>&nbsp; &nbsp;# print the file names</p><p>&nbsp; &nbsp;print(fname)</p>', 'import os\r\n\r\nuser_path = \'d:/\'\r\n\r\nfor fname in os.listdir(user_path):\r\n   path = os.path.join(user_path, fname)\r\n   if os.path.isdir(path):\r\n       # skip directories\r\n       continue\r\n   # print the file names\r\n   print(fname)', 2, 0, NULL, '2023-03-19 21:49:20', '2023-06-21 22:13:12', 1),
(147, 'Write a Python program to extract a single key-value pair from a dictionary into variables.', 'write-a-python-program-to-extract-a-single-key-value-pair-from-a-dictionary-into-variables', '<p>d = {\'Red\': \'Green\'}</p><br><p>(c1, c2), = d.items()</p><br><p>print(c1)</p><p>print(c2)</p>', 'd = {\'Red\': \'Green\'}\r\n\r\n(c1, c2), = d.items()\r\n\r\nprint(c1)\r\nprint(c2)', 2, 0, NULL, '2023-03-19 21:50:40', '2023-06-21 22:15:48', 1),
(148, 'Write a Python program to convert true to 1 and false to 0.', 'write-a-python-program-to-convert-true-to-1-and-false-to-0', '<p>x = \'true\'</p><p>x = int(x == \'true\')</p><p>print(x)</p><br><p>x = \'abcd\'</p><p>x = int(x == \'true\')</p><p>print(x)</p>', 'x = \'true\'\r\nx = int(x == \'true\')\r\nprint(x)\r\n\r\nx = \'abcd\'\r\nx = int(x == \'true\')\r\nprint(x)', 2, 0, NULL, '2023-03-19 21:53:04', '2023-06-21 22:17:21', 1),
(149, 'Write a Python program to validate an IP address.', 'write-a-python-program-to-validate-an-ip-address', '<p>import re</p><br><p>ip_regex = \"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$\"</p><p>def check_ip_address(user_ip):</p><p>&nbsp; &nbsp;&nbsp; if(re.search(ip_regex, user_ip)):</p><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return \"Valid Ip address\"</p><p>&nbsp; &nbsp;&nbsp; else::</p><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return \"Invalid Ip address\"</p><br><p>user_ip = \"10.0.0.0\"</p><p>print(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))</p><p>user_ip = \"10.255.255.255\"</p><p>print(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))</p><p>user_ip = \"192.168.255.0\"</p><p>print(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))</p><p>user_ip = \"266.1.0.2\"</p><p>print(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))</p><p>user_ip = \"01.102.103.104\"</p><p>print(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))</p>', 'import re\r\n\r\nip_regex = \"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$\"\r\ndef check_ip_address(user_ip):\r\n   if(re.search(ip_regex, user_ip)):\r\n       return \"Valid Ip address\"        \r\n   else:\r\n       return \"Invalid Ip address\"\r\n\r\nuser_ip = \"10.0.0.0\"\r\nprint(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))\r\nuser_ip = \"10.255.255.255\"\r\nprint(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))\r\nuser_ip = \"192.168.255.0\"\r\nprint(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))\r\nuser_ip = \"266.1.0.2\"\r\nprint(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))\r\nuser_ip = \"01.102.103.104\"\r\nprint(\"\\n\",user_ip,\"->\",check_ip_address(user_ip))', 4, 0, NULL, '2023-03-19 21:54:50', '2023-06-21 22:34:09', 1),
(150, 'Write a Python program to convert an integer to binary that keeps leading zeros.', 'write-a-python-program-to-convert-an-integer-to-binary-that-keeps-leading-zeros', '<p>x = 12</p><br><p>print(format(x, \'08b\'))</p><p>print(format(x, \'010b\'))</p>', 'x = 12\r\n\r\nprint(format(x, \'08b\'))\r\nprint(format(x, \'010b\'))', 4, 0, NULL, '2023-03-19 21:56:01', '2023-06-21 22:36:10', 1),
(151, 'Write a python program to convert decimal to hexadecimal.', 'write-a-python-program-to-convert-decimal-to-hexadecimal', '<p>x = 30</p><p>print(format(x, \'02x\'))</p><br><p>x = 4</p><p>print(format(x, \'02x\'))</p>', 'x = 30\r\nprint(format(x, \'02x\'))\r\n\r\nx = 4\r\nprint(format(x, \'02x\'))', 2, 0, NULL, '2023-03-19 22:00:12', '2023-06-22 23:00:46', 1),
(152, 'Write a Python program to check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones of same length in a given string. Return True/False.', 'write-a-python-program-to-check-if-every-consecutive-sequence-of-zeroes-is-followed-by-a-consecutive-sequence-of-ones-of-same-length-in-a-given-string-return-truefalse', '<p>def test(str1):</p><p>&nbsp; &nbsp; temp=[]</p><p>&nbsp; &nbsp; for x in str1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (x==\'0\'):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp.append(\'0\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp.pop()</p><p>&nbsp; &nbsp; return not temp</p><br><p>str1 = \"01010101\"</p><p>print(\"Original sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"00\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"000111000111\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"00011100011\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p>', 'def test(str1):\r\n    temp=[]\r\n    for x in str1:\r\n        if (x==\'0\'):\r\n            temp.append(\'0\')\r\n        else:\r\n            temp.pop()\r\n    return not temp\r\n\r\nstr1 = \"01010101\"\r\nprint(\"Original sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"00\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"000111000111\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"00011100011\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))', 2, 0, NULL, '2023-03-21 05:25:21', '2023-06-22 23:05:42', 1),
(153, 'Write a Python program to determine if the Python shell is executing in 32-bit or 64-bit mode on the operating system', 'write-a-python-program-to-determine-if-the-python-shell-is-executing-in-32-bit-or-64-bit-mode-on-the-operating-system', '<p>import struct</p><p>print(struct.calcsize(\"P\") * 8)</p><div><br></div>', 'import struct\n\nprint(struct.calcsize(\"P\") * 8)', 2, 0, NULL, '2023-03-21 05:27:45', '2023-06-22 23:06:02', NULL),
(154, 'Write a Python program to check whether a variable is an integer or string.', 'write-a-python-program-to-check-whether-a-variable-is-an-integer-or-string', '<p>print(isinstance(25,int) or isinstance(25,str))</p><p>print(isinstance([25],int) or isinstance([25],str))</p><p>print(isinstance(\"25\",int) or isinstance(\"25\",str))</p>', 'print(isinstance(25,int) or isinstance(25,str))\n\nprint(isinstance([25],int) or isinstance([25],str))\n\nprint(isinstance(\"25\",int) or isinstance(\"25\",str))', 2, 0, NULL, '2023-03-21 05:29:05', '2023-06-22 23:06:29', NULL),
(155, 'Write a Python program to test if a variable is a list, tuple, or set.', 'write-a-python-program-to-test-if-a-variable-is-a-list-tuple-or-set', '<p>def check_type(nums):</p><p>&nbsp; &nbsp; if isinstance(x, tuple)==True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \'The variablex is a tuple\'</p><p>&nbsp; &nbsp; elif isinstance(x, list)==True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \'The variablex is a list\'</p><p>&nbsp; &nbsp; elif isinstance(x, set)==True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \'The variablex is a set\'</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \'Neither a list or a set or a tuple.\'</p><br><p>x = [\'a\', \'b\', \'c\', \'d\']</p><p>print(check_type(x))</p><br><p>x = {\'a\', \'b\', \'c\', \'d\'}</p><p>print(check_type(x))</p><br><p>x = (\'tuple\', False, 3.2, 1)</p><p>print(check_type(x))</p><br><p>x = 100</p><p>print(check_type(x))</p>', 'def check_type(nums):\r\n    if isinstance(x, tuple)==True:\r\n        return \'The variablex is a tuple\'\r\n    elif isinstance(x, list)==True:\r\n        return \'The variablex is a list\'\r\n    elif isinstance(x, set)==True:\r\n        return \'The variablex is a set\'\r\n    else:\r\n        return \'Neither a list or a set or a tuple.\'\r\n\r\nx = [\'a\', \'b\', \'c\', \'d\']\r\nprint(check_type(x))\r\n\r\nx = {\'a\', \'b\', \'c\', \'d\'}\r\nprint(check_type(x))\r\n\r\nx = (\'tuple\', False, 3.2, 1)\r\nprint(check_type(x))\r\n\r\nx = 100\r\nprint(check_type(x))', 2, 0, NULL, '2023-03-21 05:35:11', '2023-06-22 23:11:06', 1),
(156, 'Write a Python program to find the location of Python module sources.', 'write-a-python-program-to-find-the-location-of-python-module-sources', '<p>import os</p><p>import sys</p><br><p>print(\"\\nList of directories in os module:\")</p><p>print(os.path)</p><p>print(\"\\nList of directories in sys module:\")</p><p>print(sys.path)</p>', 'import os\r\nimport sys\r\n\r\nprint(\"\\nList of directories in os module:\")\r\nprint(os.path)\r\nprint(\"\\nList of directories in sys module:\")\r\nprint(sys.path)', 2, 0, NULL, '2023-03-21 05:35:51', '2023-06-22 23:19:33', 1),
(157, 'Write a Python function to check whether a number is divisible by another number. Accept two integer values from the user.', 'write-a-python-function-to-check-whether-a-number-is-divisible-by-another-number-accept-two-integer-values-from-the-user', '<p>def multiple(m, n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True if m % n == 0 else False</p><br><p>print(multiple(20, 5))</p><p>print(multiple(7, 2))</p>', 'def multiple(m, n):\r\n     return True if m % n == 0 else False\r\n\r\nprint(multiple(20, 5))\r\nprint(multiple(7, 2))', 4, 0, NULL, '2023-03-21 05:36:32', '2023-06-22 23:23:12', 1),
(158, 'Write a Python function to find the maximum and minimum numbers from a sequence of numbers.', 'write-a-python-function-to-find-the-maximum-and-minimum-numbers-from-a-sequence-of-numbers', '<p>def max_min(data):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l = data[0]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = data[0]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for num in data:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if num&gt; l:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l = num</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elif num&lt; s:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = num</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return l, s</p><br><p>print(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))</p>', 'def max_min(data):\r\n     l = data[0]\r\n     s = data[0]\r\n     for num in data:\r\n       if num> l:\r\n           l = num\r\n       elif num< s:\r\n           s = num\r\n     return l, s\r\n\r\nprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))', 2, 0, NULL, '2023-03-21 05:39:56', '2023-06-22 23:31:40', 1),
(159, 'Write a Python function that takes a positive integer and returns the sum of the cube of all positive integers smaller than the specified number.', 'write-a-python-function-that-takes-a-positive-integer-and-returns-the-sum-of-the-cube-of-all-positive-integers-smaller-than-the-specified-number', '<p>def sum_of_cubes(n):</p><p>&nbsp; &nbsp; result = 0</p><p>&nbsp; &nbsp;if n &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;for i in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result += i * i * i</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return result</p><p>&nbsp; &nbsp; elif n &lt;= 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;raise ValueError(\'n must be positive number!\')</p><br><p>print(\"Sum of cubes smaller than the specified number: \",sum_of_cubes(3))</p><p>print(\"Sum of cubes smaller than the specified number: \",sum_of_cubes(6))</p>', 'def sum_of_cubes(n):\r\n   result = 0\r\n   if n > 0:\r\n       for i in range(n):\r\n           result += i * i * i\r\n       return result\r\n   elif n <= 0:\r\n       raise ValueError(\'n must be positive number!\')\r\n\r\nprint(\"Sum of cubes smaller than the specified number: \",sum_of_cubes(3))\r\nprint(\"Sum of cubes smaller than the specified number: \",sum_of_cubes(6))', 2, 0, NULL, '2023-03-21 05:47:01', '2023-06-22 23:35:53', 1),
(160, 'Write a Python function to check whether a distinct pair of numbers whose product is odd is present in a sequence of integer values.', 'write-a-python-function-to-check-whether-a-distinct-pair-of-numbers-whose-product-is-odd-is-present-in-a-sequence-of-integer-values', '<p>import itertools</p><br><p>def pair_nums_odd(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; uniquelist = set(nums)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result =[]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for n in itertools.combinations(uniquelist, 2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((n[0] * n[1]) % 2 == 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp = str(n[0]) + \" * \" + str(n[1])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.append(temp)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return result</p><br><p>dt1 = [2, 4, 6, 8]</p><p>print(\"Original sequence:\")</p><p>print(dt1)</p><p>print(\"Distinct pair of numbers whose product is odd present in the said sequence:\")&nbsp;</p><p>print(pair_nums_odd(dt1));</p><br><p>dt2 = [1, 6, 4, 7, 8]</p><p>print(\"\\nOriginal sequence:\")</p><p>print(dt2)</p><p>print(\"Distinct pair of numbers whose product is odd present in the said sequence:\")&nbsp;</p><p>print(pair_nums_odd(dt2));</p><br><p>dt3 = [1, 3, 5, 7, 9]</p><p>print(\"\\nOriginal sequence:\")</p><p>print(dt3)</p><p>print(\"Distinct pair of numbers whose product is odd present in the said sequence:\")&nbsp;</p><p>print(pair_nums_odd(dt3));</p>', 'import itertools\r\n\r\ndef pair_nums_odd(nums):\r\n    uniquelist = set(nums)\r\n    result =[]\r\n    for n in itertools.combinations(uniquelist, 2):\r\n        if ((n[0] * n[1]) % 2 == 1):\r\n            temp = str(n[0]) + \" * \" + str(n[1])\r\n            result.append(temp)\r\n    return result\r\n\r\ndt1 = [2, 4, 6, 8]\r\nprint(\"Original sequence:\")\r\nprint(dt1)\r\nprint(\"Distinct pair of numbers whose product is odd present in the said sequence:\") \r\nprint(pair_nums_odd(dt1));\r\n\r\ndt2 = [1, 6, 4, 7, 8]\r\nprint(\"\\nOriginal sequence:\")\r\nprint(dt2)\r\nprint(\"Distinct pair of numbers whose product is odd present in the said sequence:\") \r\nprint(pair_nums_odd(dt2));\r\n\r\ndt3 = [1, 3, 5, 7, 9]\r\nprint(\"\\nOriginal sequence:\")\r\nprint(dt3)\r\nprint(\"Distinct pair of numbers whose product is odd present in the said sequence:\") \r\nprint(pair_nums_odd(dt3));', 2, 0, NULL, '2023-03-21 05:53:25', '2023-06-22 23:49:26', 1),
(161, 'Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other.', 'write-a-python-function-that-takes-a-sequence-of-numbers-and-determines-whether-all-the-numbers-are-different-from-each-other', '<p>def test_distinct(data):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if len(data) == len(set(data)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False;</p><br><p>print(test_distinct([1,5,7,9]))</p><p>print(test_distinct([2,4,5,5,7,9]))</p>', 'def test_distinct(data):\r\n    if len(data) == len(set(data)):\r\n       return True\r\n    else:\r\n       return False;\r\n\r\nprint(test_distinct([1,5,7,9]))\r\nprint(test_distinct([2,4,5,5,7,9]))', 4, 0, NULL, '2023-03-25 09:35:01', '2023-06-23 13:28:52', 1),
(162, 'Write a Python program that creates all possible strings using the letters \'a\', \'e\', \'i\', \'o\', and \'I\'. Ensure that each character is used only once.', 'write-a-python-program-that-creates-all-possible-strings-using-the-letters-a-e-i-o-and-i-ensure-that-each-character-is-used-only-once', '<p>import random</p><br><p>char_list = [\'a\',\'e\',\'i\',\'o\',\'u\']</p><br><p>random.shuffle(char_list)</p><p>print(\' \'.join(char_list))</p>', 'import random\r\n\r\nchar_list = [\'a\',\'e\',\'i\',\'o\',\'u\']\r\n\r\nrandom.shuffle(char_list)\r\nprint(\' \'.join(char_list))', 4, 0, NULL, '2023-03-25 09:36:00', '2023-08-04 12:47:17', 1),
(163, 'Write a Python program that removes and prints every third number from a list of numbers until the list is empty.', 'write-a-python-program-that-removes-and-prints-every-third-number-from-a-list-of-numbers-until-the-list-is-empty', '<p>def remove_nums(int_list):</p><p>&nbsp; &nbsp; &nbsp; #list starts with 0 index</p><p>&nbsp; &nbsp; &nbsp; position = 3 - 1&nbsp;</p><p>&nbsp; &nbsp; &nbsp; idx = 0</p><p>&nbsp; &nbsp; &nbsp; len_list = (len(int_list))</p><p>&nbsp; &nbsp; &nbsp; while len_list&gt;0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; idx = (position+idx)%len_list</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(int_list.pop(idx))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; len_list -= 1</p><br><p>nums = [10,20,30,40,50,60,70,80,90]</p><p>remove_nums(nums)</p>', 'def remove_nums(int_list):\r\n   #list starts with 0 index\r\n   position = 3 - 1 \r\n   idx = 0\r\n   len_list = (len(int_list))\r\n   while len_list>0:\r\n     idx = (position+idx)%len_list\r\n     print(int_list.pop(idx))\r\n     len_list -= 1\r\n\r\nnums = [10,20,30,40,50,60,70,80,90]\r\nremove_nums(nums)', 2, 0, NULL, '2023-03-25 09:36:40', '2023-08-04 12:52:06', 1),
(164, 'Write a Python program to identify unique triplets whose three elements sum to zero from an array of n integers.', 'write-a-python-program-to-identify-unique-triplets-whose-three-elements-sum-to-zero-from-an-array-of-n-integers', '<p>def three_sum(nums):</p><p>&nbsp; result = []</p><p>&nbsp; nums.sort()</p><br><p>&nbsp; for i in range(len(nums)-2):</p><p>&nbsp; &nbsp; if i&gt; 0 and nums[i] == nums[i-1]:</p><p>&nbsp; &nbsp; &nbsp; continue</p><p>&nbsp; &nbsp; l, r = i+1, len(nums)-1</p><p>&nbsp; &nbsp; while l &lt; r:</p><p>&nbsp; &nbsp; &nbsp; s = nums[i] + nums[l] + nums[r]</p><p>&nbsp; &nbsp; &nbsp; if s &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; r -= 1</p><p>&nbsp; &nbsp; &nbsp; elif s &lt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l += 1</p><p>&nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; # found three sum</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result.append((nums[i], nums[l], nums[r]))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; # remove duplicates</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while l &lt; r and nums[l] == nums[l+1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while l &lt; r and nums[r] == nums[r-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; r -= 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; r -= 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return result</p><br><p>x = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]</p><p>print(three_sum(x))</p><br>', 'def three_sum(nums):\r\n  result = []\r\n  nums.sort()\r\n\r\n  for i in range(len(nums)-2):\r\n    if i> 0 and nums[i] == nums[i-1]:\r\n      continue\r\n    l, r = i+1, len(nums)-1\r\n    while l < r:\r\n      s = nums[i] + nums[l] + nums[r]\r\n      if s > 0:\r\n        r -= 1\r\n      elif s < 0:\r\n          l += 1\r\n      else:\r\n        # found three sum\r\n        result.append((nums[i], nums[l], nums[r]))\r\n        # remove duplicates\r\n        while l < r and nums[l] == nums[l+1]:\r\n          l+=1\r\n          while l < r and nums[r] == nums[r-1]:\r\n            r -= 1\r\n            l += 1\r\n            r -= 1\r\n          return result\r\n\r\nx = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\r\nprint(three_sum(x))', 4, 0, NULL, '2023-03-25 09:37:24', '2023-08-04 13:48:15', 1),
(165, 'Write a Python program to make combinations of 3 digits.', 'write-a-python-program-to-make-combinations-of-3-digits', '<p>numbers = []</p><br><p>for num in range(1000):</p><p>&nbsp; num=str(num).zfill(3)</p><br><p>print(num)</p><p>numbers.append(num)</p>', 'numbers = []\r\n\r\nfor num in range(1000):\r\n  num=str(num).zfill(3)\r\n\r\nprint(num)\r\nnumbers.append(num)', 2, 0, NULL, '2023-03-25 09:38:04', '2023-08-04 13:56:11', 1),
(166, 'Write a Python program that prints long text, converts it to a list, and prints all the words and the frequency of each word.', 'write-a-python-program-that-prints-long-text-converts-it-to-a-list-and-prints-all-the-words-and-the-frequency-of-each-word', '<p>string_words = \'\'\'United States Declaration of Independence</p><p>From Wikipedia, the free encyclopedia</p><p>The United States Declaration of Independence is the statement</p><p>adopted by the Second Continental Congress meeting at the Pennsylvania State</p><p>House (Independence Hall) in Philadelphia on July 4, 1776, which announced</p><p>that the thirteen American colonies, then at war with the Kingdom of Great</p><p>Britain, regarded themselves as thirteen independent sovereign states, no longer</p><p>under British rule. These states would found a new nation – the United States of</p><p>America. John Adams was a leader in pushing for independence, which was passed</p><p>on July 2 with no opposing vote cast. A committee of five had already drafted the</p><p>formal declaration, to be ready when Congress voted on independence.</p><p><br></p><p>John Adams persuaded the committee to select Thomas Jefferson to compose the original</p><p>draft of the document, which Congress would edit to produce the final version.</p><p>The Declaration was ultimately a formal explanation of why Congress had voted on July</p><p>2 to declare independence from Great Britain, more than a year after the outbreak of</p><p>the American Revolutionary War. The next day, Adams wrote to his wife Abigail: \"The</p><p>Second Day of July 1776, will be the most memorable Epocha, in the History of America.\"</p><p>But Independence Day is actually celebrated on July 4, the date that the Declaration of</p><p>Independence was approved.</p><p><br></p><p>After ratifying the text on July 4, Congress issued the Declaration of Independence in</p><p>several forms. It was initially published as the printed Dunlap broadside that was widely</p><p>distributed and read to the public. The source copy used for this printing has been lost,</p><p>and may have been a copy in Thomas Jefferson\'s hand.[5] Jefferson\'s original draft, complete</p><p>with changes made by John Adams and Benjamin Franklin, and Jefferson\'s notes of changes made</p><p>by Congress, are preserved at the Library of Congress. The best-known version of the Declaration</p><p>is a signed copy that is displayed at the National Archives in Washington, D.C., and which is</p><p>popularly regarded as the official document. This engrossed copy was ordered by Congress on</p><p>July 19 and signed primarily on August 2.</p><p><br></p><p>The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.</p><p>The Declaration justified the independence of the United States by listing colonial grievances against</p><p>King George III, and by asserting certain natural and legal rights, including a right of revolution.</p><p>Having served its original purpose in announcing independence, references to the text of the</p><p>Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric</p><p>(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement</p><p>on human rights, particularly its second sentence:</p><p><br></p><p>We hold these truths to be self-evident, that all men are created equal, that they are endowed by their</p><p>Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.</p><p><br></p><p>This has been called \"one of the best-known sentences in the English language\", containing \"the most potent</p><p>and consequential words in American history\". The passage came to represent a moral standard to which</p><p>the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the</p><p>Declaration to be the foundation of his political philosophy and argued that it is a statement of principles</p><p>through which the United States Constitution should be interpreted.</p><p><br></p><p>The U.S. Declaration of Independence inspired many other similar documents in other countries, the first</p><p>being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands</p><p>(modern-day Belgium). It also served as the primary model for numerous declarations of independence across</p><p>Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the</p><p>19th century.\'\'\'</p><p><br></p><p>word_list = string_words.split()</p><p><br></p><p>word_freq = [word_list.count(n) for n in word_list]</p><p><br></p><p>print(\"String:\\n {} \\n\".format(string_words))</p><p>print(\"List:\\n {} \\n\".format(str(word_list)))</p><p>print(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))</p><div><br></div>', 'string_words = \'\'\'United States Declaration of Independence\r\nFrom Wikipedia, the free encyclopedia\r\nThe United States Declaration of Independence is the statement\r\nadopted by the Second Continental Congress meeting at the Pennsylvania State\r\nHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\r\nthat the thirteen American colonies, then at war with the Kingdom of Great\r\nBritain, regarded themselves as thirteen independent sovereign states, no longer\r\nunder British rule. These states would found a new nation – the United States of\r\nAmerica. John Adams was a leader in pushing for independence, which was passed\r\non July 2 with no opposing vote cast. A committee of five had already drafted the\r\nformal declaration, to be ready when Congress voted on independence.\r\n\r\nJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\r\ndraft of the document, which Congress would edit to produce the final version.\r\nThe Declaration was ultimately a formal explanation of why Congress had voted on July\r\n2 to declare independence from Great Britain, more than a year after the outbreak of\r\nthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: \"The\r\nSecond Day of July 1776, will be the most memorable Epocha, in the History of America.\"\r\nBut Independence Day is actually celebrated on July 4, the date that the Declaration of\r\nIndependence was approved.\r\n\r\nAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\r\nseveral forms. It was initially published as the printed Dunlap broadside that was widely\r\ndistributed and read to the public. The source copy used for this printing has been lost,\r\nand may have been a copy in Thomas Jefferson\'s hand.[5] Jefferson\'s original draft, complete\r\nwith changes made by John Adams and Benjamin Franklin, and Jefferson\'s notes of changes made\r\nby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\r\nis a signed copy that is displayed at the National Archives in Washington, D.C., and which is\r\npopularly regarded as the official document. This engrossed copy was ordered by Congress on\r\nJuly 19 and signed primarily on August 2.\r\n\r\nThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\r\nThe Declaration justified the independence of the United States by listing colonial grievances against\r\nKing George III, and by asserting certain natural and legal rights, including a right of revolution.\r\nHaving served its original purpose in announcing independence, references to the text of the\r\nDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\r\n(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\r\non human rights, particularly its second sentence:\r\n\r\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\r\nCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\r\n\r\nThis has been called \"one of the best-known sentences in the English language\", containing \"the most potent\r\nand consequential words in American history\". The passage came to represent a moral standard to which\r\nthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\r\nDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\r\nthrough which the United States Constitution should be interpreted.\r\n\r\nThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\r\nbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\r\n(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\r\nEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\r\n19th century.\'\'\'\r\n\r\nword_list = string_words.split()\r\n\r\nword_freq = [word_list.count(n) for n in word_list]\r\n\r\nprint(\"String:\\n {} \\n\".format(string_words))\r\nprint(\"List:\\n {} \\n\".format(str(word_list)))\r\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))', 0, 0, NULL, '2023-03-25 09:39:19', '2023-08-04 14:07:09', 1),
(167, 'Write a Python program that retrieves the top stories from Google News.', 'write-a-python-program-that-retrieves-the-top-stories-from-google-news', '<p>import bs4</p><p>from bs4 import BeautifulSoup as soup</p><p>from urllib.request import urlopen</p><p><br></p><p>news_url=\"https://news.google.com/news/rss\"</p><p>Client=urlopen(news_url)</p><p>xml_page=Client.read()</p><p>Client.close()</p><p><br></p><p>soup_page=soup(xml_page,\"xml\")</p><p>news_list=soup_page.findAll(\"item\")</p><p># Print news title, url and publish date</p><p>for news in news_list:</p><p>&nbsp; print(news.title.text)</p><p>&nbsp; print(news.link.text)</p><p>&nbsp; print(news.pubDate.text)</p><p>&nbsp; print(\"-\"*60)</p><div><br></div>', 'import bs4\r\nfrom bs4 import BeautifulSoup as soup\r\nfrom urllib.request import urlopen\r\n\r\nnews_url=\"https://news.google.com/news/rss\"\r\nClient=urlopen(news_url)\r\nxml_page=Client.read()\r\nClient.close()\r\n\r\nsoup_page=soup(xml_page,\"xml\")\r\nnews_list=soup_page.findAll(\"item\")\r\n# Print news title, url and publish date\r\nfor news in news_list:\r\n  print(news.title.text)\r\n  print(news.link.text)\r\n  print(news.pubDate.text)\r\n  print(\"-\"*60)', 0, 0, NULL, '2023-03-25 09:45:50', '2023-08-04 14:12:30', 1),
(168, 'Write a Python program to get a list of locally installed Python modules.', 'write-a-python-program-to-get-a-list-of-locally-installed-python-modules', '<p>import pkg_resources</p><br><p>installed_packages = pkg_resources.working_set</p><p>installed_packages_list = sorted([\"%s==%s\" % (i.key, i.version)</p><p>&nbsp; &nbsp; &nbsp;for i in installed_packages])</p><br><p>for m in installed_packages_list:</p><p>&nbsp; &nbsp; print(m)</p>', 'import pkg_resources\r\n\r\ninstalled_packages = pkg_resources.working_set\r\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\r\n     for i in installed_packages])\r\n\r\nfor m in installed_packages_list:\r\n    print(m)', 2, 0, NULL, '2023-03-25 09:47:34', '2023-08-04 14:20:15', 1),
(169, 'Write a Python program to display some information about the OS where the script is running.', 'write-a-python-program-to-display-some-information-about-the-os-where-the-script-is-running', '<p>import platform as pl</p><br><p>os_profile = [</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'architecture\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'linux_distribution\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'mac_ver\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'machine\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'node\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'platform\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'processor\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'python_build\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'python_compiler\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'python_version\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'release\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'system\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'uname\',</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'version\',</p><p>&nbsp; &nbsp; ]</p><br><p>for key in os_profile:</p><p>&nbsp; if hasattr(pl, key):</p><p>&nbsp; &nbsp; print(key +&nbsp; \": \" + str(getattr(pl, key)()))</p>', 'import platform as pl\r\n\r\nos_profile = [\r\n        \'architecture\',\r\n        \'linux_distribution\',\r\n        \'mac_ver\',\r\n        \'machine\',\r\n        \'node\',\r\n        \'platform\',\r\n        \'processor\',\r\n        \'python_build\',\r\n        \'python_compiler\',\r\n        \'python_version\',\r\n        \'release\',\r\n        \'system\',\r\n        \'uname\',\r\n        \'version\',\r\n    ]\r\n\r\nfor key in os_profile:\r\n  if hasattr(pl, key):\r\n    print(key +  \": \" + str(getattr(pl, key)()))', 2, 0, NULL, '2023-03-25 09:48:11', '2023-08-04 14:31:32', 1),
(170, 'Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations.', 'write-a-python-program-to-check-the-sum-of-three-elements-each-from-an-array-from-three-arrays-is-equal-to-a-target-value-print-all-those-three-element-combinations', '<p>import itertools</p><br><p>from functools import partial</p><p>X = [10, 20, 20, 20]</p><p>Y = [10, 20, 30, 40]</p><p>Z = [10, 30, 40, 20]</p><p>T = 70</p><br><p>def check_sum_array(N, *nums):</p><p>&nbsp; if sum(x for x in nums) == N:</p><p>&nbsp; &nbsp; return (True, nums)</p><p>&nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; return (False, nums)</p><p>pro = itertools.product(X,Y,Z)</p><p>func = partial(check_sum_array, T)</p><p>sums = list(itertools.starmap(func, pro))</p><br><p>result = set()</p><p>for s in sums:</p><p>&nbsp; &nbsp; if s[0] == True and s[1] not in result:</p><p>&nbsp; &nbsp; &nbsp; result.add(s[1])</p><p>&nbsp; &nbsp; &nbsp; print(result)</p>', 'import itertools\r\n\r\nfrom functools import partial\r\nX = [10, 20, 20, 20]\r\nY = [10, 20, 30, 40]\r\nZ = [10, 30, 40, 20]\r\nT = 70\r\n\r\ndef check_sum_array(N, *nums):\r\n  if sum(x for x in nums) == N:\r\n    return (True, nums)\r\n  else:\r\n      return (False, nums)\r\n\r\npro = itertools.product(X,Y,Z)\r\nfunc = partial(check_sum_array, T)\r\nsums = list(itertools.starmap(func, pro))\r\n\r\nresult = set()\r\nfor s in sums:\r\n    if s[0] == True and s[1] not in result:\r\n      result.add(s[1])\r\n      print(result)', 4, 0, NULL, '2023-03-25 09:49:02', '2023-08-04 14:41:47', 1),
(171, 'Write a Python program that generates a list of all possible permutations from a given collection of distinct numbers.', 'write-a-python-program-that-generates-a-list-of-all-possible-permutations-from-a-given-collection-of-distinct-numbers', '<p>def permute(nums):</p><p>&nbsp; result_perms = [[]]</p><p>&nbsp; for n in nums:</p><p>&nbsp; &nbsp; new_perms = []</p><p>&nbsp; &nbsp; for perm in result_perms:</p><p>&nbsp; &nbsp; &nbsp; for i in range(len(perm)+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; new_perms.append(perm[:i] + [n] + perm[i:])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result_perms = new_perms</p><p>&nbsp; return result_perms</p><br><p>my_nums = [1,2,3]</p><p>print(\"Original Cofllection: \",my_nums)</p><p>print(\"Collection of distinct numbers:\\n\",permute(my_nums))</p>', 'def permute(nums):\r\n  result_perms = [[]]\r\n  for n in nums:\r\n    new_perms = []\r\n    for perm in result_perms:\r\n      for i in range(len(perm)+1):\r\n        new_perms.append(perm[:i] + [n] + perm[i:])\r\n        result_perms = new_perms\r\n  return result_perms\r\n\r\nmy_nums = [1,2,3]\r\nprint(\"Original Cofllection: \",my_nums)\r\nprint(\"Collection of distinct numbers:\\n\",permute(my_nums))', 0, 0, NULL, '2023-03-25 09:49:32', '2023-08-04 14:44:56', 1),
(172, 'Write a Python program to get all possible two-digit letter combinations from a 1-9 digit string', 'write-a-python-program-to-get-all-possible-two-digit-letter-combinations-from-a-1-9-digit-string', '<p>def letter_combinations(digits):</p><p>&nbsp; &nbsp; if digits == \"\":</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return []</p><p>&nbsp; &nbsp; string_maps = {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"1\": \"abc\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"2\": \"def\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"3\": \"ghi\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"4\": \"jkl\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"5\": \"mno\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"6\": \"pqrs\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"7\": \"tuv\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"8\": \"wxy\",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \"9\": \"z\"</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; result = [\"\"]</p><p>&nbsp; &nbsp; for num in digits:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; temp = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for an in result:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for char in string_maps[num]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp.append(an + char)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result = temp</p><p>&nbsp; &nbsp; return result</p><br><p>digit_string = \"47\"</p><p>print(letter_combinations(digit_string))</p><p>digit_string = \"29\"</p><p>print(letter_combinations(digit_string))</p>', 'def letter_combinations(digits):\r\n    if digits == \"\":\r\n        return []\r\n    string_maps = {\r\n        \"1\": \"abc\",\r\n        \"2\": \"def\",\r\n        \"3\": \"ghi\",\r\n        \"4\": \"jkl\",\r\n        \"5\": \"mno\",\r\n        \"6\": \"pqrs\",\r\n        \"7\": \"tuv\",\r\n        \"8\": \"wxy\",\r\n        \"9\": \"z\"\r\n    }\r\n    result = [\"\"]\r\n    for num in digits:\r\n        temp = []\r\n        for an in result:\r\n            for char in string_maps[num]:\r\n                temp.append(an + char)\r\n        result = temp\r\n    return result\r\n\r\ndigit_string = \"47\"\r\nprint(letter_combinations(digit_string))\r\ndigit_string = \"29\"\r\nprint(letter_combinations(digit_string))', 2, 0, NULL, '2023-03-25 09:50:18', '2023-08-04 14:49:57', 1),
(173, 'Write a Python program to add two positive integers without using the \'+\' operator.', 'write-a-python-program-to-add-two-positive-integers-without-using-the-operator', '<p>def add_without_plus_operator(a, b):</p><p>&nbsp; &nbsp; while b != 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; data = a &amp; b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; a = a ^ b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; b = data &lt;&lt; 1</p><p>&nbsp; &nbsp; return a</p><br><p>print(add_without_plus_operator(2, 10))</p><p>print(add_without_plus_operator(-20, 10))</p><p>print(add_without_plus_operator(-10, -20))</p>', 'def add_without_plus_operator(a, b):\r\n    while b != 0:\r\n        data = a & b\r\n        a = a ^ b\r\n        b = data << 1\r\n    return a\r\n\r\nprint(add_without_plus_operator(2, 10))\r\nprint(add_without_plus_operator(-20, 10))\r\nprint(add_without_plus_operator(-10, -20))', 2, 0, NULL, '2023-03-25 09:50:54', '2023-08-04 14:56:42', 1),
(174, 'Write a Python program to check the priority of the four operators (+, -, *, /).', 'write-a-python-program-to-check-the-priority-of-the-four-operators', '<p>from collections import deque</p><p>import re</p><br><p>__operators__ = \"+-/*\"</p><p>__parenthesis__ = \"()\"</p><p>__priority__ = {</p><p>&nbsp; &nbsp; \'+\': 0,</p><p>&nbsp; &nbsp; \'-\': 0,</p><p>&nbsp; &nbsp; \'*\': 1,</p><p>&nbsp; &nbsp; \'/\': 1,</p><p>}</p><br><p>def test_higher_priority(operator1, operator2):</p><p>&nbsp; &nbsp; return __priority__[operator1] &gt;= __priority__[operator2]</p><br><p>print(test_higher_priority(\'*\',\'-\'))</p><p>print(test_higher_priority(\'+\',\'-\'))</p><p>print(test_higher_priority(\'+\',\'*\'))</p><p>print(test_higher_priority(\'+\',\'/\'))</p><p>print(test_higher_priority(\'*\',\'/\'))</p>', 'from collections import deque\r\nimport re\r\n\r\n__operators__ = \"+-/*\"\r\n__parenthesis__ = \"()\"\r\n__priority__ = {\r\n    \'+\': 0,\r\n    \'-\': 0,\r\n    \'*\': 1,\r\n    \'/\': 1,\r\n}\r\n\r\ndef test_higher_priority(operator1, operator2):\r\n    return __priority__[operator1] >= __priority__[operator2]\r\n\r\nprint(test_higher_priority(\'*\',\'-\'))\r\nprint(test_higher_priority(\'+\',\'-\'))\r\nprint(test_higher_priority(\'+\',\'*\'))\r\nprint(test_higher_priority(\'+\',\'/\'))\r\nprint(test_higher_priority(\'*\',\'/\'))', 2, 0, NULL, '2023-03-25 09:51:25', '2023-08-04 15:00:29', 1),
(175, 'Write a Python program to get the third side of a right-angled triangle from two given sides.', 'write-a-python-program-to-get-the-third-side-of-a-right-angled-triangle-from-two-given-sides', '<p>def pythagoras(opposite_side,adjacent_side,hypotenuse):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if opposite_side == str(\"x\"):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif adjacent_side == str(\"x\"):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (\"Adjacent = \" + str(((hypotenuse**2) - (opposite_side**2))**0.5))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif hypotenuse == str(\"x\"):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (\"Hypotenuse = \" + str(((opposite_side**2) + (adjacent_side**2))**0.5))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"You know the answer!\"</p><br><p>print(pythagoras(3,4,\'x\'))</p><p>print(pythagoras(3,\'x\',5))</p><p>print(pythagoras(\'x\',4,5))</p><p>print(pythagoras(3,4,5))</p>', 'def pythagoras(opposite_side,adjacent_side,hypotenuse):\r\n        if opposite_side == str(\"x\"):\r\n            return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))\r\n        elif adjacent_side == str(\"x\"):\r\n            return (\"Adjacent = \" + str(((hypotenuse**2) - (opposite_side**2))**0.5))\r\n        elif hypotenuse == str(\"x\"):\r\n            return (\"Hypotenuse = \" + str(((opposite_side**2) + (adjacent_side**2))**0.5))\r\n        else:\r\n            return \"You know the answer!\"\r\n    \r\nprint(pythagoras(3,4,\'x\'))\r\nprint(pythagoras(3,\'x\',5))\r\nprint(pythagoras(\'x\',4,5))\r\nprint(pythagoras(3,4,5))', 2, 0, NULL, '2023-03-25 09:57:28', '2023-08-04 15:06:08', 1),
(176, 'Write a Python program to get all strobogrammatic numbers that are of length n.', 'write-a-python-program-to-get-all-strobogrammatic-numbers-that-are-of-length-n', '<p>def gen_strobogrammatic(n):</p><p>&nbsp; &nbsp; \"\"\"</p><p>&nbsp; &nbsp; :type n: int</p><p>&nbsp; &nbsp; :rtype: List[str]</p><p>&nbsp; &nbsp; \"\"\"</p><p>&nbsp; &nbsp; result = helper(n, n)</p><p>&nbsp; &nbsp; return result</p><br><p>def helper(n, length):</p><p>&nbsp; &nbsp; if n == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return [\"\"]</p><p>&nbsp; &nbsp; if n == 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return [\"1\", \"0\", \"8\"]</p><p>&nbsp; &nbsp; middles = helper(n-2, length)</p><p>&nbsp; &nbsp; result = []</p><p>&nbsp; &nbsp; for middle in middles:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n != length:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.append(\"0\" + middle + \"0\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result.append(\"8\" + middle + \"8\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result.append(\"1\" + middle + \"1\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result.append(\"9\" + middle + \"6\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result.append(\"6\" + middle + \"9\")</p><p>&nbsp; &nbsp; return result</p><br><p>print(\"n = 2: \\n\",gen_strobogrammatic(2))</p><p>print(\"n = 3: \\n\",gen_strobogrammatic(3))</p><p>print(\"n = 4: \\n\",gen_strobogrammatic(4))</p>', 'def gen_strobogrammatic(n):\r\n    \"\"\"\r\n    :type n: int\r\n    :rtype: List[str]\r\n    \"\"\"\r\n    result = helper(n, n)\r\n    return result\r\n\r\ndef helper(n, length):\r\n    if n == 0:\r\n        return [\"\"]\r\n    if n == 1:\r\n        return [\"1\", \"0\", \"8\"]\r\n    middles = helper(n-2, length)\r\n    result = []\r\n    for middle in middles:\r\n        if n != length:\r\n            result.append(\"0\" + middle + \"0\")\r\n        result.append(\"8\" + middle + \"8\")\r\n        result.append(\"1\" + middle + \"1\")\r\n        result.append(\"9\" + middle + \"6\")\r\n        result.append(\"6\" + middle + \"9\")\r\n    return result\r\n\r\nprint(\"n = 2: \\n\",gen_strobogrammatic(2))\r\nprint(\"n = 3: \\n\",gen_strobogrammatic(3))\r\nprint(\"n = 4: \\n\",gen_strobogrammatic(4))', 0, 0, NULL, '2023-03-25 10:00:13', '2023-08-04 15:14:25', 0);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(177, 'Write a Python program to find the median among three given numbers.', 'write-a-python-program-to-find-the-median-among-three-given-numbers', '<p>x = input(\"Enter the first number\")</p><p>y = input(\"Enter the second number\")</p><p>z = input(\"Enter the third number\")</p><br><p>print(\"Median of the above three numbers -\")</p><br><p>if y &lt; x and x &lt; z:</p><p>&nbsp; &nbsp; print(x)</p><p>elif z &lt; x and x &lt; y:</p><p>&nbsp; &nbsp; print(x)</p><br><p>&nbsp; &nbsp;&nbsp;</p><p>elif z &lt; y and y &lt; x:</p><p>&nbsp; &nbsp; print(y)</p><p>elif x &lt; y and y &lt; z:</p><p>&nbsp; &nbsp; print(y)</p><br><p>&nbsp; &nbsp;&nbsp;</p><p>elif y &lt; z and z &lt; x:</p><p>&nbsp; &nbsp; print(z)&nbsp; &nbsp;&nbsp;</p><p>elif x &lt; z and z &lt; y:</p><p>&nbsp; &nbsp; print(z)</p>', '#Enter the first number\r\nx = input( )\r\n#Enter the second number\r\ny = input( )\r\n#Enter the third number\r\nz = input( )\r\n\r\nprint(\"Median of the above three numbers -\")\r\n\r\nif y < x and x < z:\r\n    print(x)\r\nelif z < x and x < y:\r\n    print(x)\r\n    \r\nelif z < y and y < x:\r\n    print(y)\r\nelif x < y and y < z:\r\n    print(y)\r\n    \r\nelif y < z and z < x:\r\n    print(z)    \r\nelif x < z and z < y:\r\n    print(z)', 4, 1, NULL, '2023-03-25 10:00:48', '2023-08-04 15:22:43', 1),
(178, 'Write a Python program that finds the value of n when n degrees of number 2 are written sequentially on a line without spaces between them.', 'write-a-python-program-that-finds-the-value-of-n-when-n-degrees-of-number-2-are-written-sequentially-on-a-line-without-spaces-between-them', '<p>def ndegrees(num):</p><p>&nbsp; ans = True</p><p>&nbsp; n, tempn, i = 2, 2, 2</p><p>&nbsp; while ans:</p><p>&nbsp; &nbsp; if str(tempn) in num:</p><p>&nbsp; &nbsp; &nbsp; i += 1</p><p>&nbsp; &nbsp; &nbsp; tempn = pow(n, i)</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; ans = False</p><p>&nbsp; return i-1;</p><br><p>print(ndegrees(\"2481632\"))</p><p>print(ndegrees(\"248163264\"))</p>', 'def ndegrees(num):\r\n  ans = True\r\n  n, tempn, i = 2, 2, 2\r\n  while ans:\r\n    if str(tempn) in num:\r\n      i += 1\r\n      tempn = pow(n, i)\r\n    else:\r\n      ans = False\r\n  return i-1;\r\n\r\nprint(ndegrees(\"2481632\"))\r\nprint(ndegrees(\"248163264\"))', 0, 0, NULL, '2023-03-25 10:20:31', '2023-08-04 15:26:10', 1),
(179, 'Write a Python program to find the number of zeros at the end of a factorial of a given positive number.', 'write-a-python-program-to-find-the-number-of-zeros-at-the-end-of-a-factorial-of-a-given-positive-number', '<p>def factendzero(n):</p><p>&nbsp; x = n // 5</p><p>&nbsp; y = x&nbsp;</p><p>&nbsp; while x &gt; 0:</p><p>&nbsp; &nbsp; x /= 5</p><p>&nbsp; &nbsp; y += int(x)</p><p>&nbsp; return y</p><br><p>print(factendzero(5))</p><p>print(factendzero(12))</p><p>print(factendzero(100))</p>', 'def factendzero(n):\r\n  x = n // 5\r\n  y = x \r\n  while x > 0:\r\n    x /= 5\r\n    y += int(x)\r\n  return y\r\n       \r\nprint(factendzero(5))\r\nprint(factendzero(12))\r\nprint(factendzero(100))', 2, 0, NULL, '2023-03-25 10:26:23', '2023-08-04 15:29:03', 1),
(180, 'Write a Python program to find the number of notes (Samples of notes: 10, 20, 50, 100, 200, 500) against an amount.', 'write-a-python-program-to-find-the-number-of-notes-samples-of-notes-10-20-50-100-200-500-against-an-amount', '<p>def no_notes(a):</p><p>&nbsp; Q = [500, 200, 100, 50, 20, 10]</p><p>&nbsp; x = 0</p><p>&nbsp; for i in range(6):</p><p>&nbsp; &nbsp; q = Q[i]</p><p>&nbsp; &nbsp; x += int(a / q)</p><p>&nbsp; &nbsp; a = int(a % q)</p><p>&nbsp; if a &gt; 0:</p><p>&nbsp; &nbsp; x = -1</p><p>&nbsp; return x</p><br><p>print(no_notes(880))</p><p>print(no_notes(1000))</p>', 'def no_notes(a):\r\n  Q = [500, 200, 100, 50, 20, 10]\r\n  x = 0\r\n  for i in range(6):\r\n    q = Q[i]\r\n    x += int(a / q)\r\n    a = int(a % q)\r\n  if a > 0:\r\n    x = -1\r\n  return x\r\n\r\nprint(no_notes(880))\r\nprint(no_notes(1000))', 4, 0, NULL, '2023-03-26 06:47:38', '2023-08-04 15:32:43', 1),
(181, 'Write a Python program to create a sequence where the first four members of the sequence are equal to one. Each successive term of the sequence is equal to the sum of the four previous ones. Find the Nth member of the sequence.', 'write-a-python-program-to-create-a-sequence-where-the-first-four-members-of-the-sequence-are-equal-to-one-each-successive-term-of-the-sequence-is-equal-to-the-sum-of-the-four-previous-ones-find-the-nth-member-of-the-sequence', '<p>def new_seq(n):</p><p>&nbsp; &nbsp; if n==1 or n==2 or n==3 or n==4:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return 1</p><p>&nbsp; &nbsp; return new_seq(n-1) + new_seq(n-2) + new_seq(n-3) + new_seq(n-4)</p><br><p>print(new_seq(5))</p><p>print(new_seq(6))</p><p>print(new_seq(7))</p>', 'def new_seq(n):\r\n    if n==1 or n==2 or n==3 or n==4:\r\n        return 1\r\n    return new_seq(n-1) + new_seq(n-2) + new_seq(n-3) + new_seq(n-4)\r\n\r\nprint(new_seq(5))\r\nprint(new_seq(6))\r\nprint(new_seq(7))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 18:48:33', 1),
(182, 'Write a Python program that accepts a positive number and subtracts from it the sum of its digits, and so on. Continue this operation until the number is positive.', 'write-a-python-program-that-accepts-a-positive-number-and-subtracts-from-it-the-sum-of-its-digits,-and-so-on.-continue-this-operation-until-the-number-is-positive.', '<p>def repeat_times(n):</p><p>&nbsp; n_str = str(n)</p><p>&nbsp; while (n &gt; 0):</p><p>&nbsp; &nbsp; n -= sum([int(i) for i in list(n_str)])</p><p>&nbsp; &nbsp; n_str = list(str(n))</p><p>&nbsp; return n</p><br><p>print(repeat_times(9))</p><p>print(repeat_times(20))</p><p>print(repeat_times(110))</p><p>print(repeat_times(5674))</p>', 'def repeat_times(n):\r\n  n_str = str(n)\r\n  while (n > 0):\r\n    n -= sum([int(i) for i in list(n_str)])\r\n    n_str = list(str(n))\r\n  return n\r\n\r\nprint(repeat_times(9))\r\nprint(repeat_times(20))\r\nprint(repeat_times(110))\r\nprint(repeat_times(5674))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 18:53:19', 1),
(183, 'Write a Python program to find the total number of even or odd divisors of a given integer.', 'write-a-python-program-to-find-the-total-number-of-even-or-odd-divisors-of-a-given-integer.', '<p>def divisor(n):</p><p>&nbsp; x = len([i for i in range(1,n+1) if not n % i])</p><p>&nbsp; return x</p><br><p>print(divisor(15))</p><p>print(divisor(12))</p><p>print(divisor(9))</p><p>print(divisor(6))</p><p>print(divisor(3))</p>', 'def divisor(n):\r\n  x = len([i for i in range(1,n+1) if not n % i])\r\n  return x\r\n\r\nprint(divisor(15))\r\nprint(divisor(12))\r\nprint(divisor(9))\r\nprint(divisor(6))\r\nprint(divisor(3))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 18:57:46', 1),
(184, 'Write a Python program to find the digits that are missing from a given mobile number.', 'write-a-python-program-to-find-the-digits-that-are-missing-from-a-given-mobile-number.', '<p>def absent_digits(n):</p><p>&nbsp; all_nums = set([0,1,2,3,4,5,6,7,8,9])</p><p>&nbsp; n = set([int(i) for i in n])</p><p>&nbsp; n = n.symmetric_difference(all_nums)</p><p>&nbsp; n = sorted(n)</p><p>&nbsp; return n</p><br><p>print(absent_digits([9,8,3,2,2,0,9,7,6,3]))</p>', 'def absent_digits(n):\r\n  all_nums = set([0,1,2,3,4,5,6,7,8,9])\r\n  n = set([int(i) for i in n])\r\n  n = n.symmetric_difference(all_nums)\r\n  n = sorted(n)\r\n  return n\r\n\r\nprint(absent_digits([9,8,3,2,2,0,9,7,6,3]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:05:58', 1),
(185, 'Write a Python program to compute the summation of the absolute difference of all distinct pairs in a given array (non-decreasing order).', 'write-a-python-program-to-compute-the-summation-of-the-absolute-difference-of-all-distinct-pairs-in-a-given-array-(non-decreasing-order).', '<p>def sum_distinct_pairs(arr):</p><p>&nbsp; &nbsp; result = 0</p><p>&nbsp; &nbsp; i = 0</p><p>&nbsp; &nbsp; while i&lt;len(arr):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result+=i*arr[i]-(len(arr)-i-1)*arr[i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i+=1</p><p>&nbsp; &nbsp; return result</p><br><p>print(sum_distinct_pairs([1,2,3]))</p><p>print(sum_distinct_pairs([1,4,5]))</p>', 'def sum_distinct_pairs(arr):\r\n    result = 0\r\n    i = 0\r\n    while i<len(arr):\r\n        result+=i*arr[i]-(len(arr)-i-1)*arr[i]\r\n        i+=1\r\n    return result\r\n\r\nprint(sum_distinct_pairs([1,2,3]))\r\nprint(sum_distinct_pairs([1,4,5]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:13:43', 3),
(186, 'Write a Python program to find the type of the progression (arithmetic progression / geometric progression) and the next successive member of the three successive members of a sequence.', 'write-a-python-program-to-find-the-type-of-the-progression-(arithmetic-progression-/-geometric-progression)-and-the-next-successive-member-of-the-three-successive-members-of-a-sequence.', '<p>def ap_gp_sequence(arr):</p><p>&nbsp; if arr[0]==arr[1]==arr[2]==0:</p><p>&nbsp; &nbsp; return \"Wrong Numbers\"</p><p>&nbsp; else:</p><p>&nbsp; &nbsp; if arr[1]-arr[0]==arr[2]-arr[1]:</p><p>&nbsp; &nbsp; &nbsp; n=2*arr[2]-arr[1]</p><p>&nbsp; &nbsp; &nbsp; return \"AP sequence, \"+\'Next number of the sequence: \'+str(n)</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; n=arr[2]**2/arr[1]</p><p>&nbsp; &nbsp; &nbsp; return \"GP sequence, \" + \'Next number of the sequence:&nbsp; \'+str(n)</p><br><p>print(ap_gp_sequence([1,2,3]))</p><p>print(ap_gp_sequence([2,6,18]))</p><p>print(ap_gp_sequence([0,0,0]))</p>', 'def ap_gp_sequence(arr):\r\n  if arr[0]==arr[1]==arr[2]==0:\r\n    return \"Wrong Numbers\"\r\n  else:\r\n    if arr[1]-arr[0]==arr[2]-arr[1]:\r\n      n=2*arr[2]-arr[1]\r\n      return \"AP sequence, \"+\'Next number of the sequence: \'+str(n)\r\n    else:\r\n      n=arr[2]**2/arr[1]\r\n      return \"GP sequence, \" + \'Next number of the sequence:  \'+str(n)\r\n\r\nprint(ap_gp_sequence([1,2,3]))\r\nprint(ap_gp_sequence([2,6,18]))\r\nprint(ap_gp_sequence([0,0,0]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:19:58', 1),
(187, 'Write a Python program to print the length of the series and the series from the given 3rd term, 3rd last term and the sum of a series.', 'write-a-python-program-to-print-the-length-of-the-series-and-the-series-from-the-given-3rd-term,-3rd-last-term-and-the-sum-of-a-series.', '<p>tn = int(input(\"Enter the third term of the series:\"))</p><p>tltn = int(input(\"Enter 3rd last term:\"))</p><p>s_sum = int(input(\"Sum of the series:\"))</p><br><p>n = int(2*s_sum/(tn+tltn))</p><p>print(\"Length of the series: \",n)</p><br><p>if n-5==0:</p><p>&nbsp; d = (s_sum-3*tn)//6</p><p>else:</p><p>&nbsp; d = (tltn-tn)/(n-5)</p><br><p>a = tn-2*d</p><p>j = 0</p><p>print(\"Series:\")</p><p>for j in range(n-1):</p><p>&nbsp; print(int(a),end=\" \")</p><p>&nbsp; a+=d</p><p>print(int(a),end=\" \")</p>', '#Enter the third term of the series\r\ntn = int(input( ))\r\n#Enter 3rd last term\r\ntltn = int(input( ))\r\n#Sum of the series\r\ns_sum = int(input( ))\r\n\r\nn = int(2*s_sum/(tn+tltn))\r\nprint(\"Length of the series: \",n)\r\n\r\nif n-5==0:\r\n  d = (s_sum-3*tn)//6\r\nelse:\r\n  d = (tltn-tn)/(n-5)\r\n\r\na = tn-2*d\r\nj = 0\r\nprint(\"Series:\")\r\nfor j in range(n-1):\r\n  print(int(a),end=\" \")\r\n  a+=d\r\nprint(int(a),end=\" \")', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 19:32:21', 1),
(188, 'Write a Python program to find common divisors between two numbers in a given pair.', 'write-a-python-program-to-find-common-divisors-between-two-numbers-in-a-given-pair.', '<p>def ngcd(x, y):</p><p>&nbsp; &nbsp; i=1</p><p>&nbsp; &nbsp; while(i&lt;=x and i&lt;=y):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if(x%i==0 and y%i == 0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gcd=i;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i+=1</p><p>&nbsp; &nbsp; return gcd;</p><p>def num_comm_div(x, y):</p><p>&nbsp; n = ngcd(x, y)</p><p>&nbsp; result = 0</p><p>&nbsp; z = int(n**0.5)</p><p>&nbsp; i = 1</p><p>&nbsp; while( i &lt;= z ):</p><p>&nbsp; &nbsp; if(n % i == 0):</p><p>&nbsp; &nbsp; &nbsp; result += 2&nbsp;</p><p>&nbsp; &nbsp; &nbsp; if(i == n/i):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result-=1</p><p>&nbsp; &nbsp; i+=1</p><p>&nbsp; return result</p><br><p>print(\"Number of common divisors: \",num_comm_div(2, 4))</p><p>print(\"Number of common divisors: \",num_comm_div(2, 8))</p><p>print(\"Number of common divisors: \",num_comm_div(12, 24))</p>', 'def ngcd(x, y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x, y):\r\n  n = ngcd(x, y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while( i <= z ):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result\r\n\r\nprint(\"Number of common divisors: \",num_comm_div(2, 4))\r\nprint(\"Number of common divisors: \",num_comm_div(2, 8))\r\nprint(\"Number of common divisors: \",num_comm_div(12, 24))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:38:27', 1),
(189, 'Write a Python program to reverse the digits of a given number and add them to the original. Repeat this procedure if the sum is not a palindrome.', 'write-a-python-program-to-reverse-the-digits-of-a-given-number-and-add-them-to-the-original.-repeat-this-procedure-if-the-sum-is-not-a-palindrome.', '<p>def rev_number(n):</p><p>&nbsp; s = 0</p><p>&nbsp; while True:</p><p>&nbsp; &nbsp; k = str(n)</p><p>&nbsp; &nbsp; if k == k[::-1]:</p><p>&nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; m = int(k[::-1])</p><p>&nbsp; &nbsp; &nbsp; n += m</p><p>&nbsp; &nbsp; &nbsp; s += 1</p><p>&nbsp; return n&nbsp;</p><br><p>print(rev_number(1234))</p><p>print(rev_number(1473))</p>', 'def rev_number(n):\r\n  s = 0\r\n  while True:\r\n    k = str(n)\r\n    if k == k[::-1]:\r\n      break\r\n    else:\r\n      m = int(k[::-1])\r\n      n += m\r\n      s += 1\r\n  return n \r\n\r\nprint(rev_number(1234))\r\nprint(rev_number(1473))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:42:14', 1),
(190, 'Write a Python program to count the number of carry operations for each addition problem.', 'write-a-python-program-to-count-the-number-of-carry-operations-for-each-addition-problem.', '<p>def carry_number(x, y):</p><p>&nbsp; ctr = 0</p><p>&nbsp; if(x == 0 and y == 0):</p><p>&nbsp; &nbsp; return 0</p><p>&nbsp; z = 0&nbsp;&nbsp;</p><p>&nbsp; for i in reversed(range(10)):</p><p>&nbsp; &nbsp; &nbsp; z = x%10 + y%10 + z</p><p>&nbsp; &nbsp; &nbsp; if z &gt; 9:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; z = 1</p><p>&nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; z = 0</p><p>&nbsp; &nbsp; &nbsp; ctr += z</p><p>&nbsp; &nbsp; &nbsp; x //= 10</p><p>&nbsp; &nbsp; &nbsp; y //= 10</p><br><p>&nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; if ctr == 0:</p><p>&nbsp; &nbsp; return \"No carry operation.\"</p><p>&nbsp; elif ctr == 1:</p><p>&nbsp; &nbsp; return ctr</p><p>&nbsp; else:</p><p>&nbsp; &nbsp; return ctr</p><br><p>print(carry_number(786, 457))</p><p>print(carry_number(5, 6))</p>', 'def carry_number(x, y):\r\n  ctr = 0\r\n  if(x == 0 and y == 0):\r\n    return 0\r\n  z = 0  \r\n  for i in reversed(range(10)):\r\n      z = x%10 + y%10 + z\r\n      if z > 9:\r\n        z = 1\r\n      else:\r\n        z = 0\r\n      ctr += z\r\n      x //= 10\r\n      y //= 10\r\n      \r\n  if ctr == 0:\r\n    return \"No carry operation.\"\r\n  elif ctr == 1:\r\n    return ctr\r\n  else:\r\n    return ctr\r\n\r\nprint(carry_number(786, 457))\r\nprint(carry_number(5, 6))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-04 19:47:35', 1),
(191, 'Write a Python program to find the heights of the top three buildings in descending order from eight given buildings.', 'write-a-python-program-to-find-the-heights-of-the-top-three-buildings-in-descending-order-from-eight-given-buildings.', '<p>print(\"Enter the heights of eight buildings:\")</p><p>l = [int(input()) for i in range(8)]</p><br><p>print(\"Heights of the top three buildings:\")</p><p>l = sorted(l)</p><p>print(*l[:4:-1], sep=\'\\n\')</p>', '#Enter the heights of eight buildings\r\nl = [int(input()) for i in range(8)]\r\n\r\nprint(\"Heights of the top three buildings:\")\r\nl = sorted(l)\r\nprint(*l[:4:-1], sep=\'\\n\')', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 19:52:45', 1),
(192, 'Write a Python program to compute the digit number of the sum of two given integers.', 'write-a-python-program-to-compute-the-digit-number-of-the-sum-of-two-given-integers.', '<p>print(\"Enter two integers(a b): \")</p><p>a,b = map(int,input().split(\" \"))</p><br><p>print(\"Number of digit of a and b.:\")</p><p>print(len(str(a+b)))</p>', '#Enter two integers(a b)\r\na,b = map(int,input().split(\" \"))\r\n\r\nprint(\"Number of digit of a and b.:\")\r\nprint(len(str(a+b)))', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 19:59:01', 1),
(193, 'Write a Python program to check whether three given lengths (integers) of three sides form a right triangle. Print \"Yes\" if the given sides form a right triangle otherwise print \"No\".', 'write-a-python-program-to-check-whether-three-given-lengths-(integers)-of-three-sides-form-a-right-triangle.-print-\"yes\"-if-the-given-sides-form-a-right-triangle-otherwise-print-\"no\".', '<p>print(\"Enter three integers(sides of a triangle)\")</p><p>int_num = list(map(int,input().split()))</p><p>x,y,z = sorted(int_num)</p><br><p>if x**2+y**2==z**2:</p><p>&nbsp; &nbsp; print(\'Yes\')</p><p>else:</p><p>&nbsp; &nbsp; print(\'No\')</p>', '#Enter three integers(sides of a triangle\r\nint_num = list(map(int,input().split()))\r\nx,y,z = sorted(int_num)\r\n\r\nif x**2+y**2==z**2:\r\n    print(\'Yes\')\r\nelse:\r\n    print(\'No\')', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 20:05:20', 1),
(194, 'Write a Python program which solve the equation:\r\nax+by=c\r\ndx+ey=f\r\nPrint the values of x, y where a, b, c, d, e and f are given.', 'write-a-python-program-which-solve-the-equation:\r\nax+by=c\r\ndx+ey=f\r\nprint-the-values-of-x,-y-where-a,-b,-c,-d,-e-and-f-are-given.', '<p>print(\"Enter the value of a, b, c, d, e, f:\")</p><p>a, b, c, d, e, f = map(float, input().split())</p><p>n = a*e - b*d</p><br><p>print(\"Values of x and y:\")</p><p>if n != 0:</p><p>&nbsp; &nbsp; x = (c*e - b*f) / n</p><p>&nbsp; &nbsp; y = (a*f - c*d) / n</p><p>&nbsp; &nbsp; print(\'{:.3f} {:.3f}\'.format(x+0, y+0))</p>', '#Enter the value of a, b, c, d, e, f\r\na, b, c, d, e, f = map(float, input().split())\r\nn = a*e - b*d\r\n\r\nprint(\"Values of x and y:\")\r\nif n != 0:\r\n    x = (c*e - b*f) / n\r\n    y = (a*f - c*d) / n\r\n    print(\'{:.3f} {:.3f}\'.format(x+0, y+0))', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 20:10:04', 1),
(195, 'Write a Python program to compute the amount of debt in n months. Each month, the loan adds 5% interest to the $100,000 debt and rounds to the nearest 1,000 above.', 'write-a-python-program-to-compute-the-amount-of-debt-in-n-months.-each-month,-the-loan-adds-5%-interest-to-the-$100,000-debt-and-rounds-to-the-nearest-1,000-above.', '<p>def round_n(n):</p><p>&nbsp; &nbsp; if n%1000:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return (1+n//1000)*1000</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return n</p><br><p>def compute_debt(n):</p><p>&nbsp; &nbsp; if n==0: return 100000</p><p>&nbsp; &nbsp; return int(round_n(compute_debt(n-1)*1.05))</p><br><p>print(\"Input number of months:\")</p><p>result = compute_debt(int(input()))</p><p>print(\"Amount of debt: \",\"$\"+str(result).strip())</p>', 'def round_n(n):\r\n    if n%1000:\r\n        return (1+n//1000)*1000\r\n    else:\r\n        return n\r\n     \r\ndef compute_debt(n):\r\n    if n==0: return 100000\r\n    return int(round_n(compute_debt(n-1)*1.05))\r\n\r\n#Input number of months\r\nresult = compute_debt(int(input()))\r\nprint(\"Amount of debt: \",\"$\"+str(result).strip())', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 20:16:57', 1),
(196, 'Write a Python program that reads an integer n and finds the number of combinations of a,b,c and d (0 = a,b,c,d = 9) where (a + b + c + d) will be equal to n.', 'write-a-python-program-that-reads-an-integer-n-and-finds-the-number-of-combinations-of-a,b,c-and-d-(0-=-a,b,c,d-=-9)-where-(a-+-b-+-c-+-d)-will-be-equal-to-n.', '<p>import itertools</p><br><p>print(\"Input the number(n):\")</p><p>n=int(input())</p><p>result=0</p><br><p>for (i,j,k) in itertools.product(range(10),range(10),range(10)):</p><p>&nbsp; &nbsp; result+=(0&lt;=n-(i+j+k)&lt;=9)</p><br><p>print(\"Number of combinations:\",result)</p>', 'import itertools\r\n\r\n#Input the number(n)\r\nn=int(input())\r\nresult=0\r\n\r\nfor (i,j,k) in itertools.product(range(10),range(10),range(10)):\r\n    result+=(0<=n-(i+j+k)<=9)\r\n\r\nprint(\"Number of combinations:\",result)', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 20:21:44', 1),
(197, 'Write a Python program to print the number of prime numbers that are less than or equal to a given number.', 'write-a-python-program-to-print-the-number-of-prime-numbers-that-are-less-than-or-equal-to-a-given-number.', '<p>primes = [1] * 500000</p><p>primes[0] = 0</p><br><p>for i in range(3, 1000, 2):</p><p>&nbsp; &nbsp; if primes[i // 2]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; primes[(i * i) // 2::i] = [0] * len(primes[(i * i) // 2::i])</p><br><p>print(\"Input the number(n):\")</p><p>n=int(input())</p><p>if n &lt; 4:</p><p>&nbsp; &nbsp; print(\"Number of prime numbers which are less than or equal to n.:\",n - 1)</p><p>else:</p><p>&nbsp; &nbsp; print(\"Number of prime numbers which are less than or equal to n.:\",sum(primes[:(n + 1) // 2]) + 1)</p>', 'primes = [1] * 500000\r\nprimes[0] = 0\r\n \r\nfor i in range(3, 1000, 2):\r\n    if primes[i // 2]:\r\n        primes[(i * i) // 2::i] = [0] * len(primes[(i * i) // 2::i])\r\n \r\n#Input the number(n)\r\nn=int(input())\r\nif n < 4:\r\n    print(\"Number of prime numbers which are less than or equal to n.:\",n - 1)\r\nelse:\r\n    print(\"Number of prime numbers which are less than or equal to n.:\",sum(primes[:(n + 1) // 2]) + 1)', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-04 20:27:19', 1),
(198, 'Write a program to compute the radius and the central coordinate (x, y) of a circle which is constructed from three given points on the plane surface.', 'write-a-program-to-compute-the-radius-and-the-central-coordinate-(x,-y)-of-a-circle-which-is-constructed-from-three-given-points-on-the-plane-surface.', '<p>print(\"Enter three coordinate of the circle:\")</p><p>x1, y1, x2, y2, x3, y3 = map(float, input().split())</p><br><p>c = (x1-x2)**2 + (y1-y2)**2</p><p>a = (x2-x3)**2 + (y2-y3)**2</p><p>b = (x3-x1)**2 + (y3-y1)**2</p><p>s = 2*(a*b + b*c + c*a) - (a*a + b*b + c*c)&nbsp;</p><p>px = (a*(b+c-a)*x1 + b*(c+a-b)*x2 + c*(a+b-c)*x3) / s</p><p>py = (a*(b+c-a)*y1 + b*(c+a-b)*y2 + c*(a+b-c)*y3) / s&nbsp;</p><p>ar = a**0.5</p><p>br = b**0.5</p><p>cr = c**0.5&nbsp;</p><p>r = ar*br*cr / ((ar+br+cr)*(-ar+br+cr)*(ar-br+cr)*(ar+br-cr))**0.5</p><br><p>print(\"Radius of the said circle:\")</p><p>print(\"{:&gt;.3f}\".format(r))</p><p>print(\"Central coordinate (x, y) of the circle:\")</p><p>print(\"{:&gt;.3f}\".format(px),\"{:&gt;.3f}\".format(py))</p>', '#Enter three coordinate of the circle\r\nx1, y1, x2, y2, x3, y3 = map(float, input().split())\r\n\r\nc = (x1-x2)**2 + (y1-y2)**2\r\na = (x2-x3)**2 + (y2-y3)**2\r\nb = (x3-x1)**2 + (y3-y1)**2\r\ns = 2*(a*b + b*c + c*a) - (a*a + b*b + c*c) \r\npx = (a*(b+c-a)*x1 + b*(c+a-b)*x2 + c*(a+b-c)*x3) / s\r\npy = (a*(b+c-a)*y1 + b*(c+a-b)*y2 + c*(a+b-c)*y3) / s \r\nar = a**0.5\r\nbr = b**0.5\r\ncr = c**0.5 \r\nr = ar*br*cr / ((ar+br+cr)*(-ar+br+cr)*(ar-br+cr)*(ar+br-cr))**0.5\r\n\r\nprint(\"Radius of the said circle:\")\r\nprint(\"{:>.3f}\".format(r))\r\nprint(\"Central coordinate (x, y) of the circle:\")\r\nprint(\"{:>.3f}\".format(px),\"{:>.3f}\".format(py))', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-05 07:06:50', 1),
(199, 'Write a Python program to check if a point (x,y) is in a triangle or not. A triangle is formed by three points.', 'write-a-python-program-to-check-if-a-point-(x,y)-is-in-a-triangle-or-not.-a-triangle-is-formed-by-three-points.', '<p>print(\"Enter x1, y1, x2, y2, x3, y3, xp, yp: \")</p><p>x1,y1,x2,y2,x3,y3,xp,yp = map(float, input().split())</p><br><p>c1 = (x2-x1)*(yp-y1)-(y2-y1)*(xp-x1)</p><p>c2 = (x3-x2)*(yp-y2)-(y3-y2)*(xp-x2)</p><p>c3 = (x1-x3)*(yp-y3)-(y1-y3)*(xp-x3)</p><br><p>if (c1&lt;0 and c2&lt;0 and c3&lt;0) or (c1&gt;0 and c2&gt;0 and c3&gt;0):</p><p>&nbsp; &nbsp; print(\"The point is in the triangle.\")</p><p>else:</p><p>&nbsp; &nbsp; print(\"The point is outside the triangle.\")</p>', '#Enter x1, y1, x2, y2, x3, y3, xp, yp\r\nx1,y1,x2,y2,x3,y3,xp,yp = map(float, input().split())\r\n\r\nc1 = (x2-x1)*(yp-y1)-(y2-y1)*(xp-x1)\r\nc2 = (x3-x2)*(yp-y2)-(y3-y2)*(xp-x2)\r\nc3 = (x1-x3)*(yp-y3)-(y1-y3)*(xp-x3)\r\n\r\nif (c1<0 and c2<0 and c3<0) or (c1>0 and c2>0 and c3>0):\r\n    print(\"The point is in the triangle.\")\r\nelse:\r\n    print(\"The point is outside the triangle.\")', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-05 07:16:24', 1),
(200, 'Write a Python program to compute and print the sum of two given integers (greater or equal to zero). In the event that the given integers or the sum exceed 80 digits, print \"overflow\".', 'write-a-python-program-to-compute-and-print-the-sum-of-two-given-integers-(greater-or-equal-to-zero).-in-the-event-that-the-given-integers-or-the-sum-exceed-80-digits,-print-\"overflow\".', '<p>print(\"Input first integer:\")</p><p>x = int(input( ))</p><p>print(\"Input second integer:\")</p><p>y = int(input( ))</p><br><p>if x &gt;= 10 ** 80 or y &gt;= 10 ** 80 or x + y &gt;= 10 ** 80:</p><p>&nbsp; &nbsp; print(\"Overflow!\")</p><p>else:</p><p>&nbsp; &nbsp; print(\"Sum of the two integers: \",x + y)</p>', '#Enter the first integer\r\nx = int(input( ))\r\n#Enter the second integer\r\ny = int(input( ))\r\n\r\nif x >= 10 ** 80 or y >= 10 ** 80 or x + y >= 10 ** 80:\r\n    print(\"Overflow!\")\r\nelse:\r\n    print(\"Sum of the two integers: \",x + y)', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-05 07:22:54', 1),
(201, 'Write a Python program that accepts six numbers as input and sorts them in descending order.', 'write-a-python-program-that-accepts-six-numbers-as-input-and-sorts-them-in-descending-order.', '<p>print(\"Enter six integers:\")</p><p>nums = list(map(int, input().split()))</p><br><p>nums.sort()</p><p>nums.reverse()</p><br><p>print(\"After sorting the said integers:\")</p><p>print(*nums)</p>', '#Enter six integers\r\nnums = list(map(int, input().split()))\r\n\r\nnums.sort()\r\nnums.reverse()\r\n\r\nprint(\"After sorting the said integers:\")\r\nprint(*nums)', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-05 07:28:47', 1),
(202, 'Write a Python program to test whether two lines PQ and RS are parallel. The four points are P(x1, y1), Q(x2, y2), R(x3, y3), S(x4, y4).', 'write-a-python-program-to-test-whether-two-lines-pq-and-rs-are-parallel.-the-four-points-are-p(x1,-y1),-q(x2,-y2),-r(x3,-y3),-s(x4,-y4).', '<p>print(\"Input x1,y1,x2,y2,x3,y3,xp,yp:\")</p><p>x1, y1,x2, y2, x3, y3, x4, y4 = map(float, input().split())</p><br><p>print(\'PQ and RS are parallel.\' if abs((x2 - x1)*(y4 - y3) - (x4 - x3)*(y2 - y1)) &lt; 1e-10 else \'PQ and RS are not parallel\')</p>', '#Input x1,y1,x2,y2,x3,y3,xp,yp\r\nx1, y1,x2, y2, x3, y3, x4, y4 = map(float, input().split())\r\n\r\nprint(\'PQ and RS are parallel.\' if abs((x2 - x1)*(y4 - y3) - (x4 - x3)*(y2 - y1)) < 1e-10 else \'PQ and RS are not parallel\')', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:21:05', 1),
(203, 'Write a Python program to find the maximum sum of a contiguous subsequence from a given sequence of numbers a1, a2, a3, ... an. A subsequence of one element is also a continuous subsequence.', 'write-a-python-program-to-find-the-maximum-sum-of-a-contiguous-subsequence-from-a-given-sequence-of-numbers-a1,-a2,-a3,-...-an.-a-subsequence-of-one-element-is-also-a-continuous-subsequence.', '<p>while True:</p><p>&nbsp; &nbsp; print(\"Input number of sequence of numbers you want to input (0 to exit):\")</p><p>&nbsp; &nbsp; n = int(input())</p><p>&nbsp; &nbsp; if n == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; A = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Sum = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Input numbers:\")&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A.append(int(input()))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Wa = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Wa += A[i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Sum.append(Wa)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0 , n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(0 , i):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Num = Sum[i] - Sum[j]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Sum.append(Num)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Maximum sum of the said contiguous subsequence:\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(max(Sum))</p>', 'while True:\r\n    print(\"Input number of sequence of numbers you want to input (0 to exit):\")\r\n    n = int(input())\r\n    if n == 0:\r\n        break\r\n    else:\r\n        A = []\r\n        Sum = []\r\n        print(\"Input numbers:\") \r\n        for i in range(n):\r\n            A.append(int(input()))\r\n        Wa = 0\r\n        for i in range(0,n):\r\n            Wa += A[i]\r\n            Sum.append(Wa)\r\n        for i in range(0 , n):\r\n            for j in range(0 , i):\r\n                Num = Sum[i] - Sum[j]\r\n                Sum.append(Num)\r\n        print(\"Maximum sum of the said contiguous subsequence:\")\r\n        print(max(Sum))', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:29:27', 1),
(204, 'Write a Python program that reads a date (from 2016/1/1 to 2016/12/31) and prints the day of the date. Jan. 1, 2016, is Friday. Note that 2016 is a leap year.', 'write-a-python-program-that-reads-a-date-(from-2016/1/1-to-2016/12/31)-and-prints-the-day-of-the-date.-jan.-1,-2016,-is-friday.-note-that-2016-is-a-leap-year.', '<p>from datetime import date</p><br><p>print(\"Input month and date (separated by a single space):\")</p><p>m, d = map(int, input().split())</p><br><p>weeks = {1:\'Monday\',2:\'Tuesday\',3:\'Wednesday\',4:\'Thursday\',5:\'Friday\',6:\'Saturday\',7:\'Sunday\'}</p><p>w = date.isoweekday(date(2016, m, d))</p><p>print(\"Name of the date: \",weeks[w])</p>', 'from datetime import date\r\n\r\n#Input month and date (separated by a single space)\r\nm, d = map(int, input().split())\r\n\r\nweeks={1:\'Monday\',2:\'Tuesday\',3:\'Wednesday\',4:\'Thursday\',5:\'Friday\',6:\'Saturday\',7:\'Sunday\'}\r\nw = date.isoweekday(date(2016, m, d))\r\nprint(\"Name of the date: \",weeks[w])', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:37:40', 1),
(205, 'Write a Python program that reads n digits (given) chosen from 0 to 9 and prints the number of combinations where the sum of the digits equals another given number (s). Do not use the same digits in a combination.', 'write-a-python-program-that-reads-n-digits-(given)-chosen-from-0-to-9-and-prints-the-number-of-combinations-where-the-sum-of-the-digits-equals-another-given-number-(s).-do-not-use-the-same-digits-in-a-combination.', '<p>import itertools</p><br><p>print(\"Input number of combinations and sum, input 0 0 to exit:\")</p><p>while True:</p><p>&nbsp; x, y = map(int, input(). split())</p><p>&nbsp; if x == 0 and y == 0:</p><p>&nbsp; &nbsp; break</p><p>&nbsp; s = list(itertools.combinations(range(10), x))</p><p>&nbsp; ctr = 0</p><p>&nbsp; for i in s:</p><p>&nbsp; &nbsp; if sum(i) == y:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctr += 1</p><p>&nbsp;</p><br><p>print(ctr)</p>', 'import itertools\r\n\r\n#Input number of combinations and sum, input 0 0 to exit\r\nwhile True:\r\n  x, y = map(int, input(). split())\r\n  if x == 0 and y == 0:\r\n    break\r\n  s = list(itertools.combinations(range(10), x))\r\n  ctr = 0\r\n  for i in s:\r\n    if sum(i) == y:\r\n            ctr += 1\r\n \r\nprint(ctr)', 0, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:47:58', 1),
(206, 'Write a Python program that reads the two adjoining sides and the diagonal of a parallelogram and checks whether the parallelogram is a rectangle or a rhombus.', 'write-a-python-program-that-reads-the-two-adjoining-sides-and-the-diagonal-of-a-parallelogram-and-checks-whether-the-parallelogram-is-a-rectangle-or-a-rhombus.', '<p>print(\"Input two adjoined sides and the diagonal of a parallelogram (comma separated):\")</p><p>a,b,c = map(int, input().split(\",\"))</p><br><p>if c**2 == a**2+b**2 :</p><p>&nbsp; &nbsp; print(\"This is a rectangle.\")</p><p>if a == b:</p><p>&nbsp; &nbsp; print(\"This is a rhombus.\")</p>', '#Input two adjoined sides and the diagonal of a parallelogram (comma separated)\r\na,b,c = map(int, input().split(\",\"))\r\n\r\nif c**2 == a**2+b**2 :\r\n    print(\"This is a rectangle.\")\r\nif a == b:\r\n    print(\"This is a rhombus.\")', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:53:51', 1),
(207, 'Write a Python program to replace a string \"Python\" with \"Java\" and \"Java\" with \"Python\" in a given string.', 'write-a-python-program-to-replace-a-string-\"python\"-with-\"java\"-and-\"java\"-with-\"python\"-in-a-given-string.', '<p>print(\"Input a text with two words \'Python\' and \'Java\'\")</p><p>text = input().split()</p><br><p>for i in range(len(text)):</p><p>&nbsp; &nbsp; if \"Python\" in text[i]:n = text[i].index(\"Python\");text[i] = text[i][:n] + \"Java\" + text[i][n + 6:]</p><p>&nbsp; &nbsp; elif \"Java\" in text[i]:n = text[i].index(\"Java\");text[i] = text[i][:n] + \"Python\" + text[i][n + 4:]</p><p>print(*text)</p>', '#Input a text with two words \'Python\' and \'Java\'\r\ntext = input().split()\r\n\r\nfor i in range(len(text)):\r\n    if \"Python\" in text[i]:n = text[i].index(\"Python\");text[i] = text[i][:n] + \"Java\" + text[i][n + 6:]\r\n    elif \"Java\" in text[i]:n = text[i].index(\"Java\");text[i] = text[i][:n] + \"Python\" + text[i][n + 4:]\r\nprint(*text)', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 06:59:59', 1),
(208, 'Write a Python program that determines the difference between the largest and smallest integers created by 8 numbers from 0 to 9. The number that can be rearranged shall start with 0 as in 00135668.', 'write-a-python-program-that-determines-the-difference-between-the-largest-and-smallest-integers-created-by-8-numbers-from-0-to-9.-the-number-that-can-be-rearranged-shall-start-with-0-as-in-00135668.', '<p>print(\"Input an integer created by 8 numbers from 0 to 9.:\")</p><p>num = list(input())</p><br><p>print(\"Difference between the largest and the smallest integer from the given integer:\")</p><p>print(int(\"\".join(sorted(num,reverse=True))) - int(\"\".join(sorted(num))))</p>', '#Input an integer created by 8 numbers from 0 to 9.\r\nnum = list(input())\r\n\r\nprint(\"Difference between the largest & the smallest int. from the given integer:\")\r\nprint(int(\"\".join(sorted(num,reverse=True))) - int(\"\".join(sorted(num))))', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 07:13:09', 1),
(209, 'Write a Python program to compute the sum of the first n prime numbers.', 'write-a-python-program-to-compute-the-sum-of-the-first-n-prime-numbers.', '<p>MAX = 105000</p><p>print(\"Input a number (n≤10000) to compute the sum:(0 to exit)\")&nbsp;</p><p>is_prime = [True for _ in range(MAX)]</p><p>is_prime[0] = is_prime[1] = False</p><p>for i in range(2, int(MAX ** (1 / 2)) + 1):</p><p>&nbsp; if is_prime[i]:</p><p>&nbsp; &nbsp; for j in range(i ** 2, MAX, i):</p><p>&nbsp; &nbsp; &nbsp; is_prime[j] = False&nbsp;</p><p>primes = [i for i in range(MAX) if is_prime[i]]&nbsp;</p><p>while True:</p><p>&nbsp; n = int(input())</p><p>&nbsp; if not n:</p><p>&nbsp; &nbsp; break</p><p>&nbsp; print(\"Sum of first\",n,\"prime numbers:\")</p><p>&nbsp; print(sum(primes[:n]))</p>', 'MAX = 105000\r\n#Input a number (n≤10000) to compute the sum:(0 to exit)\r\nis_prime = [True for _ in range(MAX)]\r\nis_prime[0] = is_prime[1] = False\r\nfor i in range(2, int(MAX ** (1 / 2)) + 1):\r\n  if is_prime[i]:\r\n    for j in range(i ** 2, MAX, i):\r\n      is_prime[j] = False \r\nprimes = [i for i in range(MAX) if is_prime[i]] \r\nwhile True:\r\n  n = int(input())\r\n  if not n:\r\n    break\r\n  print(\"Sum of first\",n,\"prime numbers:\")\r\n  print(sum(primes[:n]))', 6, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 12:33:07', 1),
(210, 'Write a Python program which accepts an even number (>=4, Goldbach number) from the user and creates combinations which express the given number as a sum of two prime numbers. Print the number of combinations.', 'write-a-python-program-which-accepts-an-even-number-(>=4,-goldbach-number)-from-the-user-and-creates-combinations-which-express-the-given-number-as-a-sum-of-two-prime-numbers.-print-the-number-of-combinations.', '<p>import sys</p><p>from bisect import bisect_right</p><p>from itertools import chain, compress</p><br><p>print(\"Input an even number (0 to exit):\")&nbsp;</p><p>ub = 50000</p><p>is_prime = [0, 0, 1, 1] + [0]*(ub-3)</p><p>is_prime[5::6] = is_prime[7::6] = [1]*int(ub/6)</p><p>primes = [2, 3]</p><p>append = primes.append</p><br><p>for n in chain(range(5, ub, 6), range(7, ub, 6)):</p><p>&nbsp; &nbsp; if is_prime[n]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; append(n)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; is_prime[n*3::n*2] = [0]*((ub-n)//(n*2))</p><p>primes.sort()</p><br><p>for n in map(int, sys.stdin):</p><p>&nbsp; &nbsp; if not n:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; if n%2:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Number of combinations:\")&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(is_prime[n-2])</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Number of combinations:\")&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(len([1 for p in primes[:bisect_right(primes, n/2)] if is_prime[n-p]]))</p><br>', 'import sys\r\nfrom bisect import bisect_right\r\nfrom itertools import chain, compress\r\n\r\n#Input an even number (0 to exit)\r\nub = 50000\r\nis_prime = [0, 0, 1, 1] + [0]*(ub-3)\r\nis_prime[5::6] = is_prime[7::6] = [1]*int(ub/6)\r\nprimes = [2, 3]\r\nappend = primes.append\r\n \r\nfor n in chain(range(5, ub, 6), range(7, ub, 6)):\r\n    if is_prime[n]:\r\n        append(n)\r\n        is_prime[n*3::n*2] = [0]*((ub-n)//(n*2))\r\nprimes.sort()\r\n\r\nfor n in map(int, sys.stdin):\r\n    if not n:\r\n        break\r\n    if n%2:\r\n        print(\"Number of combinations:\")  \r\n        print(is_prime[n-2])\r\n    else:\r\n        print(\"Number of combinations:\")  \r\n        print(len([1 for p in primes[:bisect_right(primes, n/2)] if is_prime[n-p]]))', 6, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 12:27:00', 1),
(211, 'Write a Python program to create the maximum number of regions obtained by drawing n given straight lines.', 'write-a-python-program-to-create-the-maximum-number-of-regions-obtained-by-drawing-n-given-straight-lines.', '<p>print(\"Input number of straight lines (o to exit): \")</p><p>n=int(input())</p><p>print(\"Number of regions:\")</p><p>print((n*n+n+2)//2)</p>', '#Input the number of straight lines.\r\nn=int(input())\r\nprint(\"Number of regions:\") \r\nprint((n*n+n+2)//2)', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 11:04:47', 1),
(212, 'There are four different points on a plane, P(xp,yp), Q(xq, yq), R(xr, yr) and S(xs, ys). Write a Python program to determine whether AB and CD are orthogonal.', 'there-are-four-different-points-on-a-plane,-p(xp,yp),-q(xq,-yq),-r(xr,-yr)-and-s(xs,-ys).-write-a-python-program-to-determine-whether-ab-and-cd-are-orthogonal.', '<p>print(\"Input xp, yp, xq, yq, xr, yr, xs, ys:\")</p><p>while True:</p><p>&nbsp; &nbsp; try:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x_p, y_p, x_q, y_q, x_r, y_r, x_s, y_s = map(float, input().split())</p><p>&nbsp; &nbsp; &nbsp; &nbsp; pq_x, pq_y = x_q - x_p, y_q - y_p</p><p>&nbsp; &nbsp; &nbsp; &nbsp; rs_x, rs_y = x_s - x_r, y_s - y_r</p><p>&nbsp; &nbsp; &nbsp; &nbsp; rs = pq_x*rs_x + pq_y*rs_y</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if abs(rs) &gt; 1e-10:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"AB and CD are not orthogonal!\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"AB and CD are orthogonal!\")</p><p>&nbsp; &nbsp; except:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break</p><br>', '#Input xp, yp, xq, yq, xr, yr, xs, ys\r\nwhile True:\r\n    try:\r\n        x_p, y_p, x_q, y_q, x_r, y_r, x_s, y_s = map(float, input().split())\r\n        pq_x, pq_y = x_q - x_p, y_q - y_p\r\n        rs_x, rs_y = x_s - x_r, y_s - y_r\r\n        rs = pq_x*rs_x + pq_y*rs_y\r\n        if abs(rs) > 1e-10:\r\n            print(\"AB and CD are not orthogonal!\")\r\n        else:\r\n            print(\"AB and CD are orthogonal!\")\r\n    except:\r\n        break', 6, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 12:55:27', 1),
(213, 'Write a Python program to sum all numerical values (positive integers) embedded in a sentence.', 'write-a-python-program-to-sum-all-numerical-values-positive-integers-embedded-in-a-sentence.', '<p>import sys,re</p><br><p>def test(stri):</p><p>&nbsp; &nbsp; print(\"Sum of the numeric values: \",sum([sum(map(int,re.findall(r\"[0-9]{1,5}\",stri)))]))</p><br><p>print(test(\"sd1fdsfs23 dssd56\"))</p><p>print(test(\"15apple2banana\"))</p><p>print(test(\"flowers5fruit5\"))</p><br>', 'import sys,re\r\n\r\ndef test(stri):\r\n  print(\"Sum of the numeric values: \",sum([sum(map(int,re.findall(r\"[0-9]{1,5}\",stri)))]))\r\n\r\nprint(test(\"sd1fdsfs23 dssd56\"))\r\nprint(test(\"15apple2banana\"))\r\nprint(test(\"flowers5fruit5\"))', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 11:45:18', 1),
(214, 'Write a Python program to restore the original string by entering the compressed string with this rule. However, the # character does not appear in the restored character string.', 'write-a-python-program-to-restore-the-original-string-by-entering-the-compressed-string-with-this-rule.-however,-the-#-character-does-not-appear-in-the-restored-character-string.', '<p>def restore_original_str(a1):</p><p>&nbsp; result = \"\"</p><p>&nbsp; ind = 0</p><p>&nbsp; end = len(a1)</p><p>&nbsp; while ind &lt; end:</p><p>&nbsp; &nbsp; if a1[ind] == \"#\":</p><p>&nbsp; &nbsp; &nbsp; result += a1[ind + 2] * int(a1[ind + 1])</p><p>&nbsp; &nbsp; &nbsp; ind += 3</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; result += a1[ind]</p><p>&nbsp; &nbsp; &nbsp; ind += 1</p><p>&nbsp; return result</p><br><p>print(\"Original text:\",\"XY#6Z1#4023\")</p><p>print(restore_original_str(\"XY#6Z1#4023\"))</p><p>print(\"Original text:\",\"#39+1=1#30\")</p><p>print(restore_original_str(\"#39+1=1#30\"))</p><br>', 'def restore_original_str(a1):\r\n  result = \"\"\r\n  ind = 0\r\n  end = len(a1)\r\n  while ind < end:\r\n    if a1[ind] == \"#\":\r\n      result += a1[ind + 2] * int(a1[ind + 1])\r\n      ind += 3\r\n    else:\r\n      result += a1[ind]\r\n      ind += 1\r\n  return result\r\n\r\nprint(\"Original text:\",\"XY#6Z1#4023\")\r\nprint(restore_original_str(\"XY#6Z1#4023\"))\r\nprint(\"Original text:\",\"#39+1=1#30\")\r\nprint(restore_original_str(\"#39+1=1#30\"))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 13:01:00', 1),
(215, 'Write a Python program that compute the area of the polygon . The vertices have the names vertex 1, vertex 2, vertex 3, ... vertex n according to the order of edge connections', 'write-a-python-program-that-compute-the-area-of-the-polygon-.-the-vertices-have-the-names-vertex-1,-vertex-2,-vertex-3,-...-vertex-n-according-to-the-order-of-edge-connections', '<p>def poly_area(c):</p><p>&nbsp; add = []</p><p>&nbsp; for i in range(0, (len(c) - 2), 2):</p><p>&nbsp; &nbsp; add.append(c[i] * c[i + 3] - c[i + 1] * c[i + 2])</p><p>&nbsp; &nbsp; add.append(c[len(c) - 2] * c[1] - c[len(c) - 1] * c[0])</p><p>&nbsp; &nbsp; return abs(sum(add) / 2)</p><p>no_sides = int(input(\'Input number of sides: \'))</p><p>cord_data = []</p><p>for z in range(no_sides):</p><p>&nbsp; &nbsp; print(\"Side:\",z+1)</p><p>&nbsp; &nbsp; print(\"Input the Coordinate:\")</p><p>&nbsp; &nbsp; x = int(input(\'Input Coordinate x:\'))</p><p>&nbsp; &nbsp; y = int(input(\'Input Coordinate y:\'))</p><p>&nbsp; &nbsp; cord_data.append(x)</p><p>&nbsp; &nbsp; cord_data.append(y)</p><p>print(\"\\nArea of the Polygon:\",poly_area(cord_data))</p><br>', 'def poly_area(c):\r\n  add = []\r\n  for i in range(0, (len(c) - 2), 2):\r\n    add.append(c[i] * c[i + 3] - c[i + 1] * c[i + 2])\r\n    add.append(c[len(c) - 2] * c[1] - c[len(c) - 1] * c[0])\r\n    return abs(sum(add) / 2)\r\nno_sides = int(input(\'Input number of sides: \'))\r\ncord_data = []\r\nfor z in range(no_sides):\r\n    print(\"Side:\",z+1)\r\n    print(\"Input the Coordinate:\")\r\n    x = int(input(\'Input Coordinate x:\'))\r\n    y = int(input(\'Input Coordinate y:\'))\r\n    cord_data.append(x)\r\n    cord_data.append(y)\r\nprint(\"\\nArea of the Polygon:\",poly_area(cord_data))', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 14:20:10', 1),
(216, 'Write a Python program to cut out words of 3 to 6 characters length from a given sentence not more than 1024 characters.', 'write-a-python-program-to-cut-out-words-of-3-to-6-characters-length-from-a-given-sentence-not-more-than-1024-characters.', '<p>print(\"Input a sentence (1024 characters. max.)\")</p><p>yy = input()</p><p>yy = yy.replace(\",\", \" \")</p><p>yy = yy.replace(\".\", \" \")</p><p>print(\"3 to 6 characters length of words:\")</p><p>print(*[y for y in yy.split() if 3 &lt;= len(y) &lt;= 6])</p><br>', '#Input a sentence (1024 characters. max.)\r\nyy = input()\r\nyy = yy.replace(\",\", \" \")\r\nyy = yy.replace(\".\", \" \")\r\nprint(\"3 to 6 characters length of words:\")\r\nprint(*[y for y in yy.split() if 3 <= len(y) <= 6])', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 14:19:22', 1),
(217, 'Write a Python program that compute the maximum value of the sum of the passing integers.', 'write-a-python-program-that-compute-the-maximum-value-of-the-sum-of-the-passing-integers.', '<p>import sys</p><br><p>print(\"Input the numbers (ctrl+d to exit):\")</p><p>nums = [list(map(int, l.split(\",\"))) for l in sys.stdin]</p><p>mvv = nums[0]</p><br><p>for i in range(1, (len(nums)+1)//2):</p><p>&nbsp; &nbsp; rvv = [0]*(i+1)</p><p>&nbsp; &nbsp; for j in range(i):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; rvv[j] = max(rvv[j], mvv[j]+nums[i][j])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; rvv[j+1] = max(rvv[j+1], mvv[j]+nums[i][j+1])</p><p>&nbsp; &nbsp; mvv = rvv</p><br><p>for i in range((len(nums)+1)//2, len(nums)):</p><p>&nbsp; &nbsp; rvv = [0]*(len(mvv)-1)</p><p>&nbsp; &nbsp; for j in range(len(rvv)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; rvv[j] = max(mvv[j], mvv[j+1]) + nums[i][j]</p><p>&nbsp; &nbsp; mvv = rvv</p><p>print(\"Maximum value of the sum of integers passing according to the rule on one line.\")&nbsp;</p><p>print(mvv[0])</p>', 'import sys\r\n\r\nprint(\"Input the numbers (ctrl+d to exit):\")\r\nnums = [list(map(int, l.split(\",\"))) for l in sys.stdin]\r\nmvv = nums[0]\r\n\r\nfor i in range(1, (len(nums)+1)//2):\r\n    rvv = [0]*(i+1)\r\n    for j in range(i):\r\n        rvv[j] = max(rvv[j], mvv[j]+nums[i][j])\r\n        rvv[j+1] = max(rvv[j+1], mvv[j]+nums[i][j+1])\r\n    mvv = rvv\r\n\r\nfor i in range((len(nums)+1)//2, len(nums)):\r\n    rvv = [0]*(len(mvv)-1)\r\n    for j in range(len(rvv)):\r\n        rvv[j] = max(mvv[j], mvv[j+1]) + nums[i][j]\r\n    mvv = rvv\r\nprint(\"Maximum value of the sum of integers passing according to the rule on one line.\") \r\nprint(mvv[0])', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 15:36:28', 1),
(218, 'Write a Python program to find the number of combinations that satisfy p + q + r + s = n where n is a given number <= 4000 and p, q, r, s are between 0 to 1000.', 'write-a-python-program-to-find-the-number-of-combinations-that-satisfy-p-+-q-+-r-+-s-=-n-where-n-is-a-given-number-<=-4000-and-p,-q,-r,-s-are-between-0-to-1000.', '<p>from collections import Counter</p><p>print(\"Input a positive integer: \")</p><p>pair_dict = Counter()</p><p>for i in range(2001):</p><p>&nbsp; pair_dict[i] = min(i, 2000 - i) + 1</p><br><p>while True:</p><p>&nbsp; try:</p><p>&nbsp; &nbsp; n = int(input())</p><p>&nbsp; &nbsp; ans = 0</p><p>&nbsp; &nbsp; for i in range(n + 1):</p><p>&nbsp; &nbsp; &nbsp; ans += pair_dict[i] * pair_dict[n - i]</p><p>&nbsp; &nbsp; print(\"Number of combinations of a,b,c,d:\",ans)&nbsp;</p><p>&nbsp; except EOFError:</p><p>&nbsp; &nbsp; break</p>', 'from collections import Counter\r\n#Input a positive integer\r\npair_dict = Counter()\r\nfor i in range(2001):\r\n  pair_dict[i] = min(i, 2000 - i) + 1 \r\n \r\nwhile True:\r\n  try:\r\n    n = int(input())\r\n    ans = 0\r\n    for i in range(n + 1):\r\n      ans += pair_dict[i] * pair_dict[n - i]\r\n    print(\"Number of combinations of a,b,c,d:\",ans) \r\n  except EOFError:\r\n    break', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 17:25:05', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(219, 'Write a Python program that adds up the columns and rows of the given table as shown in a specified figure.', 'write-a-python-program-that-adds-up-the-columns-and-rows-of-the-given-table-as-shown-in-a-specified-figure.', '<p>while True:</p><p>&nbsp; &nbsp; print(\"Input number of rows/columns (0 to exit)\")</p><p>&nbsp; &nbsp; n = int(input())</p><p>&nbsp; &nbsp; if n == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; print(\"Input cell value:\")</p><p>&nbsp; &nbsp; x = []</p><p>&nbsp; &nbsp; for i in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x.append([int(num) for num in input().split()])</p><br><p>&nbsp; &nbsp; for i in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum += x[i][j]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x[i].append(sum)</p><br><p>&nbsp; &nbsp; x.append([])</p><p>&nbsp; &nbsp; for i in range(n + 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum += x[j][i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x[n].append(sum)</p><p>&nbsp; &nbsp; print(\"Result:\")</p><p>&nbsp; &nbsp; for i in range(n + 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n + 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'{0:&gt;5}\'.format(x[i][j]), end=\"\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print()</p>', 'while True:\r\n    print(\"Input number of rows/columns (0 to exit)\")\r\n    n = int(input())\r\n    if n == 0:\r\n        break\r\n    print(\"Input cell value:\")\r\n    x = []\r\n    for i in range(n):\r\n        x.append([int(num) for num in input().split()])\r\n\r\n    for i in range(n):\r\n        sum = 0\r\n        for j in range(n):\r\n            sum += x[i][j]\r\n        x[i].append(sum)\r\n\r\n    x.append([])\r\n    for i in range(n + 1):\r\n        sum = 0\r\n        for j in range(n):\r\n            sum += x[j][i]\r\n        x[n].append(sum)\r\n    print(\"Result:\")\r\n    for i in range(n + 1):\r\n        for j in range(n + 1):\r\n            print(\'{0:>5}\'.format(x[i][j]), end=\"\")\r\n        print()', 2, 1, NULL, '2023-03-26 06:49:32', '2023-08-06 17:34:05', 1),
(220, 'Given a list of numbers and a number k, write a Python program to check whether the sum of any two numbers from the list is equal to k or not.', 'given-a-list-of-numbers-and-a-number-k,-write-a-python-program-to-check-whether-the-sum-of-any-two-numbers-from-the-list-is-equal-to-k-or-not.', '<p>def check_sum(nums, k):&nbsp; &nbsp;</p><p>&nbsp; &nbsp; for i in range(len(nums)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(i+1, len(nums)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if nums[i] + nums[j] == k:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</p><p>&nbsp; &nbsp; return False</p><br><p>print(check_sum([12, 5, 0, 5], 10))</p><p>print(check_sum([20, 20, 4, 5], 40))</p><p>print(check_sum([1, -1], 0))</p><p>print(check_sum([1, 1, 0], 0))</p>', 'def check_sum(nums, k):   \r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] + nums[j] == k:\r\n                return True\r\n    return False\r\n\r\nprint(check_sum([12, 5, 0, 5], 10))\r\nprint(check_sum([20, 20, 4, 5], 40))\r\nprint(check_sum([1, -1], 0))\r\nprint(check_sum([1, 1, 0], 0))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:36:15', 1),
(221, 'Write a Python program to find the longest word in a set of words which is a subsequence of a given string.', 'write-a-python-program-to-find-the-longest-word-in-a-set-of-words-which-is-a-subsequence-of-a-given-string.', '<p>def longest_word_sequence(s, d):</p><p>&nbsp;long_word = \"\"</p><br><p>&nbsp;for word in d:&nbsp;</p><p>&nbsp; temp_word = \'\'&nbsp;</p><p>&nbsp; j = 0</p><p>&nbsp; for letter in word:&nbsp;</p><br><p>&nbsp; &nbsp;for i in range(j, len(s)):&nbsp;</p><br><p>&nbsp; &nbsp; if letter == s[i]:&nbsp;</p><p>&nbsp; &nbsp; &nbsp;temp_word += letter&nbsp;</p><p>&nbsp; &nbsp; &nbsp;j = i</p><p>&nbsp; &nbsp; &nbsp;break</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp;continue</p><br><p>&nbsp; if (temp_word) == word and len(long_word) &lt; len(temp_word):</p><p>&nbsp; &nbsp;long_word = temp_word</p><br><p>&nbsp; else:</p><p>&nbsp; &nbsp;continue</p><p>&nbsp;return long_word</p><br><p>print(longest_word_sequence(\"Green\", {\"Gn\", \"Gren\", \"ree\", \"en\"}))</p><p>print(longest_word_sequence(\"pythonexercises\", {\"py\", \"ex\", \"exercises\"}))</p>', 'def longest_word_sequence(s, d):\r\n long_word = \"\"\r\n \r\n for word in d: \r\n  temp_word = \'\' \r\n  j = 0\r\n  for letter in word: \r\n\r\n   for i in range(j, len(s)): \r\n\r\n    if letter == s[i]: \r\n     temp_word += letter \r\n     j = i                  \r\n     break\r\n    else:    \r\n     continue        \r\n\r\n  if (temp_word) == word and len(long_word) < len(temp_word):\r\n   long_word = temp_word\r\n\r\n  else:\r\n   continue\r\n return long_word\r\n\r\nprint(longest_word_sequence(\"Green\", {\"Gn\", \"Gren\", \"ree\", \"en\"}))\r\nprint(longest_word_sequence(\"pythonexercises\", {\"py\", \"ex\", \"exercises\"}))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:43:28', 1),
(222, 'Write a Python program to check whether a number is \"happy\" or not.', 'write-a-python-program-to-check-whether-a-number-is-\"happy\"-or-not.', '<p>def is_Happy_num(n):</p><p>&nbsp; past = set()</p><p>&nbsp; while n != 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n = sum(int(i)**2 for i in str(n))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n in past:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</p><p>&nbsp; &nbsp; &nbsp; &nbsp; past.add(n)</p><p>&nbsp; return True</p><br><p>print(is_Happy_num(7))</p><p>print(is_Happy_num(932))</p><p>print(is_Happy_num(6))</p>', 'def is_Happy_num(n):\r\n  past = set()\r\n  while n != 1:\r\n        n = sum(int(i)**2 for i in str(n))\r\n        if n in past:\r\n            return False\r\n        past.add(n)\r\n  return True\r\n\r\nprint(is_Happy_num(7))\r\nprint(is_Happy_num(932))\r\nprint(is_Happy_num(6))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:45:25', 1),
(223, 'Write a Python program to find and print the first 10 happy numbers.', 'write-a-python-program-to-find-and-print-the-first-10-happy-numbers.', '<p>def happy_numbers(n):</p><p>&nbsp; &nbsp; past = set()<span style=\"white-space:pre\">			</span></p><p>&nbsp; &nbsp; while n != 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n = sum(int(i)**2 for i in str(n))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n in past:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</p><p>&nbsp; &nbsp; &nbsp; &nbsp; past.add(n)</p><p>&nbsp; &nbsp; return True</p><br><p>print([x for x in range(500) if happy_numbers(x)][:10])</p>', 'def happy_numbers(n):\r\n    past = set()			\r\n    while n != 1:\r\n        n = sum(int(i)**2 for i in str(n))\r\n        if n in past:\r\n            return False\r\n        past.add(n)\r\n    return True\r\n\r\nprint([x for x in range(500) if happy_numbers(x)][:10])', 6, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:47:57', 1),
(224, 'Write a Python program that counts the number of prime numbers that are less than a given non-negative number.', 'write-a-python-program-that-counts-the-number-of-prime-numbers-that-are-less-than-a-given-non-negative-number.', '<p>def count_Primes_nums(n):</p><p>&nbsp; &nbsp; ctr = 0</p><br><p>&nbsp; &nbsp; for num in range(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if num &lt;= 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(2, num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (num % i) == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctr += 1</p><br><p>&nbsp; &nbsp; return ctr</p><br><p>print(count_Primes_nums(10))</p><p>print(count_Primes_nums(100))</p>', 'def count_Primes_nums(n):\r\n    ctr = 0\r\n    \r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2, num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n\r\n    return ctr\r\n\r\nprint(count_Primes_nums(10))\r\nprint(count_Primes_nums(100))', 6, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:52:18', 1),
(225, 'Write a Python program to check if two given strings are isomorphic to each other or not.', 'write-a-python-program-to-check-if-two-given-strings-are-isomorphic-to-each-other-or-not.', '<p>def isIsomorphic(str1, str2):</p><p>&nbsp; &nbsp; dict_str1 = {}</p><p>&nbsp; &nbsp; dict_str2 = {}</p><br><p>&nbsp; &nbsp; for i, value in enumerate(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; dict_str1[value] = dict_str1.get(value, []) + [i]</p><br><p>&nbsp; &nbsp; for j, value in enumerate(str2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; dict_str2[value] = dict_str2.get(value, []) + [j]</p><br><p>&nbsp; &nbsp; if sorted(dict_str1.values()) == sorted(dict_str2.values()):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return True</p><p>&nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return False</p><br><p>print(isIsomorphic(\"foo\", \"bar\"));</p><p>print(isIsomorphic(\"bar\", \"foo\"));</p><p>print(isIsomorphic(\"paper\", \"title\"));</p><p>print(isIsomorphic(\"title\", \"paper\"));</p><p>print(isIsomorphic(\"apple\", \"orange\"));</p><p>print(isIsomorphic(\"aa\", \"ab\"));</p><p>print(isIsomorphic(\"ab\", \"aa\"));</p>', 'def isIsomorphic(str1, str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    \r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value, []) + [i]\r\n            \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value, []) + [j]\r\n    \r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(isIsomorphic(\"foo\", \"bar\"));         \r\nprint(isIsomorphic(\"bar\", \"foo\"));      \r\nprint(isIsomorphic(\"paper\", \"title\"));   \r\nprint(isIsomorphic(\"title\", \"paper\"));\r\nprint(isIsomorphic(\"apple\", \"orange\"));\r\nprint(isIsomorphic(\"aa\", \"ab\"));\r\nprint(isIsomorphic(\"ab\", \"aa\"));', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 17:58:37', 1),
(226, 'Write a Python program to find the longest common prefix string among a given array of strings. Return false if there is no common prefix.', 'write-a-python-program-to-find-the-longest-common-prefix-string-among-a-given-array-of-strings.-return-false-if-there-is-no-common-prefix.', '<p>def longest_Common_Prefix(str1):</p><br><p>&nbsp; &nbsp; if not str1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \"\"</p><br><p>&nbsp; &nbsp; short_str = min(str1,key=len)</p><br><p>&nbsp; &nbsp; for i, char in enumerate(short_str):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for other in str1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if other[i] != char:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return short_str[:i]</p><br><p>&nbsp; &nbsp; return short_str</p><br><p>print(longest_Common_Prefix([\"abcdefgh\",\"abcefgh\"]))</p><p>print(longest_Common_Prefix([\"pro\",\"programming\"]))</p><p>print(longest_Common_Prefix([\"Python\",\"PHP\", \"Perl\"]))</p><p>print(longest_Common_Prefix([\"Python\",\"PHP\", \"Java\"]))</p>', 'def longest_Common_Prefix(str1):\r\n    \r\n    if not str1:\r\n        return \"\"\r\n\r\n    short_str = min(str1,key=len)\r\n\r\n    for i, char in enumerate(short_str):\r\n        for other in str1:\r\n            if other[i] != char:\r\n                return short_str[:i]\r\n\r\n    return short_str \r\n\r\nprint(longest_Common_Prefix([\"abcdefgh\",\"abcefgh\"]))\r\nprint(longest_Common_Prefix([\"pro\",\"programming\"]))\r\nprint(longest_Common_Prefix([\"Python\",\"PHP\", \"Perl\"]))\r\nprint(longest_Common_Prefix([\"Python\",\"PHP\", \"Java\"]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:53:45', 1),
(227, 'Write a Python program to reverse only the vowels of a given string.', 'write-a-python-program-to-reverse-only-the-vowels-of-a-given-string.', '<p>def reverse_vowels(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; vowels = \"\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for char in str1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if char in \"aeiouAEIOU\":</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vowels += char</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result_string = \"\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for char in str1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if char in \"aeiouAEIOU\":</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result_string += vowels[-1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vowels = vowels[:-1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result_string += char</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return result_string</p><br><p>print(reverse_vowels(\"Pyshikho\"))</p><p>print(reverse_vowels(\"Python\"))</p><p>print(reverse_vowels(\"Perl\"))</p><p>print(reverse_vowels(\"USA\"))</p>', 'def reverse_vowels(str1):\r\n    vowels = \"\"\r\n    for char in str1:\r\n        if char in \"aeiouAEIOU\":\r\n            vowels += char\r\n    result_string = \"\"\r\n    for char in str1:\r\n        if char in \"aeiouAEIOU\":\r\n            result_string += vowels[-1]\r\n            vowels = vowels[:-1]\r\n        else:\r\n            result_string += char\r\n    return result_string\r\n\r\nprint(reverse_vowels(\"Pyshikho\"))\r\nprint(reverse_vowels(\"Python\"))\r\nprint(reverse_vowels(\"Perl\"))\r\nprint(reverse_vowels(\"USA\"))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:54:22', 1),
(228, 'Write a Python program to check whether a given integer is a palindrome or not.', 'write-a-python-program-to-check-whether-a-given-integer-is-a-palindrome-or-not.', '<p>def is_Palindrome(n):</p><p>&nbsp; &nbsp; return str(n) == str(n)[::-1]</p><br><p>print(is_Palindrome(100))</p><p>print(is_Palindrome(252))</p><p>print(is_Palindrome(-838))</p>', 'def is_Palindrome(n):\r\n    return str(n) == str(n)[::-1]\r\n\r\nprint(is_Palindrome(100))\r\nprint(is_Palindrome(252))\r\nprint(is_Palindrome(-838))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 18:35:45', 1),
(229, 'Write a Python program that removes duplicate elements from a given array of numbers so that each element appears only once and returns the new length of the array.', 'write-a-python-program-that-removes-duplicate-elements-from-a-given-array-of-numbers-so-that-each-element-appears-only-once-and-returns-the-new-length-of-the-array.', '<p>def remove_duplicates(nums):</p><p>&nbsp; &nbsp; for i in range (len(nums)-1, 0, -1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if nums[i] == nums[i-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; del nums[i-1]</p><p>&nbsp; &nbsp; return len(nums)</p><br><p>print(remove_duplicates([0,0,1,1,2,2,3,3,4,4,4]))</p><p>print(remove_duplicates([1, 2, 2, 3, 4, 4]))</p>', 'def remove_duplicates(nums):\r\n    for i in range (len(nums)-1, 0, -1):\r\n        if nums[i] == nums[i-1]:\r\n            del nums[i-1]\r\n    return len(nums)\r\n\r\nprint(remove_duplicates([0,0,1,1,2,2,3,3,4,4,4]))\r\nprint(remove_duplicates([1, 2, 2, 3, 4, 4]))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 18:39:37', 1),
(230, 'Write a Python program to calculate the maximum profit from selling and buying values of stock. An array of numbers represent the stock prices in chronological order.', 'write-a-python-program-to-calculate-the-maximum-profit-from-selling-and-buying-values-of-stock.-an-array-of-numbers-represent-the-stock-prices-in-chronological-order.', '<p>def buy_and_sell(stock_price):</p><p>&nbsp; &nbsp; max_profit_val, current_max_val = 0, 0</p><p>&nbsp; &nbsp; for price in reversed(stock_price):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; current_max_val = max(current_max_val, price)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; potential_profit = current_max_val - price</p><p>&nbsp; &nbsp; &nbsp; &nbsp; max_profit_val = max(potential_profit, max_profit_val)</p><br><p>&nbsp; &nbsp; return max_profit_val</p><br><p>print(buy_and_sell([8, 10, 7, 5, 7, 15]))</p><p>print(buy_and_sell([1, 2, 8, 1]))</p><p>print(buy_and_sell([]))</p>', 'def buy_and_sell(stock_price):\r\n    max_profit_val, current_max_val = 0, 0 \r\n    for price in reversed(stock_price):                       \r\n        current_max_val = max(current_max_val, price)          \r\n        potential_profit = current_max_val - price          \r\n        max_profit_val = max(potential_profit, max_profit_val)\r\n\r\n    return max_profit_val\r\n\r\nprint(buy_and_sell([8, 10, 7, 5, 7, 15]))\r\nprint(buy_and_sell([1, 2, 8, 1]))\r\nprint(buy_and_sell([]))', 6, 0, NULL, '2023-03-26 06:49:32', '2023-08-06 18:57:01', 1),
(231, 'Write a Python program to remove all instances of a given value from a given array of integers and find the length of the newly created array.', 'write-a-python-program-to-remove-all-instances-of-a-given-value-from-a-given-array-of-integers-and-find-the-length-of-the-newly-created-array.', '<p>def remove_element(array_nums, val):</p><p>&nbsp; &nbsp; i = 0</p><p>&nbsp; &nbsp; while i &lt; len(array_nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if array_nums[i] == val:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; array_nums.remove(array_nums[i])</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1</p><br><p>&nbsp; &nbsp; return len(array_nums)</p><br><p>print(remove_element([1, 2, 3, 4, 5, 6, 7, 5], 5))</p><p>print(remove_element([10,10,10,10,10], 10))</p><p>print(remove_element([10,10,10,10,10], 20))</p><p>print(remove_element([], 1))</p>', 'def remove_element(array_nums, val):\r\n    i = 0\r\n    while i < len(array_nums):\r\n        if array_nums[i] == val:\r\n            array_nums.remove(array_nums[i])\r\n\r\n        else:\r\n            i += 1\r\n\r\n    return len(array_nums)\r\n\r\nprint(remove_element([1, 2, 3, 4, 5, 6, 7, 5], 5))\r\nprint(remove_element([10,10,10,10,10], 10)) \r\nprint(remove_element([10,10,10,10,10], 20)) \r\nprint(remove_element([], 1))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 04:48:28', 1),
(232, 'Write a Python program to find the starting and ending position of a given value in a given array of integers, sorted in ascending order.', 'write-a-python-program-to-find-the-starting-and-ending-position-of-a-given-value-in-a-given-array-of-integers,-sorted-in-ascending-order.', '<p>def search_Range(array_nums, target_val):</p><p>&nbsp; result_arra = []</p><p>&nbsp; start_pos = 0</p><p>&nbsp; end_pos = 0</p><p>&nbsp; for i in range(len(array_nums)):</p><p>&nbsp; &nbsp; &nbsp; if target_val == array_nums[i] and start_pos == -1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; start_pos = i</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end_pos = i</p><p>&nbsp; &nbsp; &nbsp; elif target_val == array_nums[i] and start_pos != -1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end_pos = i</p><p>&nbsp; result_arra.append(start_pos)</p><p>&nbsp; result_arra.append(end_pos)</p><p>&nbsp; return result_arra</p><br><p>print(search_Range([5, 7, 7, 8, 8, 8], 8))</p><p>print(search_Range([1, 3, 6, 9, 13, 14], 4))</p><p>print(search_Range([5, 7, 7, 8, 10], 8))</p>', 'def search_Range(array_nums, target_val):\r\n  result_arra = []\r\n  start_pos = 0\r\n  end_pos = 0\r\n  for i in range(len(array_nums)):\r\n      if target_val == array_nums[i] and start_pos == -1:\r\n          start_pos = i\r\n          end_pos = i\r\n      elif target_val == array_nums[i] and start_pos != -1:\r\n          end_pos = i\r\n  result_arra.append(start_pos)\r\n  result_arra.append(end_pos)\r\n  return result_arra\r\n\r\nprint(search_Range([5, 7, 7, 8, 8, 8], 8))\r\nprint(search_Range([1, 3, 6, 9, 13, 14], 4))\r\nprint(search_Range([5, 7, 7, 8, 10], 8))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 04:54:51', 1),
(233, 'Write a Python program to find the maximum profit in one transaction i.e., buy one and sell one share of the stock from the given price value of the said array. You cannot sell a stock before you buy one.', 'write-a-python-program-to-find-the-maximum-profit-in-one-transaction-i.e.,-buy-one-and-sell-one-share-of-the-stock-from-the-given-price-value-of-the-said-array.-you-cannot-sell-a-stock-before-you-buy-one.\r\n&nbsp; &nbsp; &nbsp; &nbsp;', '<p>def max_profit(stock_price):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_profit_amt = 0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for i in range(len(stock_price)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; profit_amt = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(i+1, len(stock_price)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; profit_amt = stock_price[j] - stock_price[i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if  profit_amt > max_profit_amt:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_profit_amt = profit_amt</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return max_profit_amt</p><br><p>print(max_profit([224, 236, 247, 258, 259, 225]))</p><br>', 'def max_profit(stock_price):\r\n        max_profit_amt = 0\r\n\r\n        for i in range(len(stock_price)):\r\n                profit_amt = 0\r\n                for j in range(i+1, len(stock_price)):\r\n                        profit_amt = stock_price[j] - stock_price[i]\r\n                        if  profit_amt > max_profit_amt:\r\n                                max_profit_amt = profit_amt\r\n        return max_profit_amt\r\n\r\nprint(max_profit([224, 236, 247, 258, 259, 225]))', 6, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:13:23', 1),
(234, 'Write a Python program to print a given N by M matrix of numbers line by line in forward > backwards > forward >... order.', 'write-a-python-program-to-print-a-given-n-by-m-matrix-of-numbers-line-by-line-in-forward->-backwards->-forward->...-order.', '<p>def print_matrix(nums):</p><p>&nbsp; &nbsp; flag = True&nbsp;</p><br><p>&nbsp; &nbsp; for line in nums:</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if flag == True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while i &lt; len(line):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(line[i])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flag = False</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i = -1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while i &gt; -1 * len(line) - 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(line[i])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i = i - 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flag = True</p><br><p>print_matrix([[1, 2, 3, 4],</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [5, 6, 7, 8],</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [0, 6, 2, 8],</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [2, 3, 0, 2]])</p>', 'def print_matrix(nums):\r\n    flag = True \r\n    \r\n    for line in nums:\r\n\r\n        if flag == True: \r\n            i = 0\r\n            while i < len(line):\r\n                print(line[i])\r\n                i += 1\r\n            flag = False\r\n\r\n        else: \r\n            i = -1\r\n            while i > -1 * len(line) - 1:\r\n                print(line[i])\r\n                i = i - 1\r\n            flag = True\r\n\r\nprint_matrix([[1, 2, 3, 4],\r\n              [5, 6, 7, 8],\r\n              [0, 6, 2, 8],\r\n              [2, 3, 0, 2]])', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:20:37', 1),
(235, 'Write a Python program to calculate the median from a list of numbers.', 'write-a-python-program-to-calculate-the-median-from-a-list-of-numbers.', '<p>def cal_median(nums):</p><p>&nbsp; &nbsp; &nbsp; nums.sort()</p><p>&nbsp; &nbsp; &nbsp; n = len(nums)</p><p>&nbsp; &nbsp; &nbsp; m = n // 2</p><p>&nbsp; &nbsp; &nbsp; if n % 2 == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (nums[m - 1] + nums[m]) / 2</p><p>&nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return nums[m]</p><br><p>print(cal_median([1,2,3,4,5]))</p><p>print(cal_median([1,2,3,4,5,6]))</p><p>print(cal_median([6,1,2,4,5,3]))</p><p>print(cal_median([1.0,2.11,3.3,4.2,5.22,6.55]))</p><p>print(cal_median([1.0,2.11,3.3,4.2,5.22]))</p><p>print(cal_median([2.0,12.11,22.3,24.12,55.22]))</p>', 'def cal_median(nums):\r\n   nums.sort()\r\n   n = len(nums)\r\n   m = n // 2\r\n   if n % 2 == 0:\r\n     return (nums[m - 1] + nums[m]) / 2\r\n   else:\r\n     return nums[m]\r\n\r\nprint(cal_median([1,2,3,4,5]))\r\nprint(cal_median([1,2,3,4,5,6]))\r\nprint(cal_median([6,1,2,4,5,3]))\r\nprint(cal_median([1.0,2.11,3.3,4.2,5.22,6.55]))\r\nprint(cal_median([1.0,2.11,3.3,4.2,5.22]))\r\nprint(cal_median([2.0,12.11,22.3,24.12,55.22]))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:34:34', 1),
(236, 'Write a Python program to test whether a given number is symmetrical or not. A number is symmetrical when it is equal to its reverse.', 'write-a-python-program-to-test-whether-a-given-number-is-symmetrical-or-not.-a-number-is-symmetrical-when-it-is-equal-to-its-reverse.', '<p>def is_symmetrical_num(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return str(n) == str(n)[::-1]</p><br><p>print(is_symmetrical_num(121))</p><p>print(is_symmetrical_num(0))</p><p>print(is_symmetrical_num(122))</p><p>print(is_symmetrical_num(990099))</p>', 'def is_symmetrical_num(n):\r\n    return str(n) == str(n)[::-1]\r\n\r\nprint(is_symmetrical_num(121))\r\nprint(is_symmetrical_num(0))\r\nprint(is_symmetrical_num(122))\r\nprint(is_symmetrical_num(990099))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:32:45', 1),
(237, 'Write a Python program that accepts a list of numbers. Count the negative numbers and compute the sum of the positive numbers of the said list. Return these values through a list.', 'write-a-python-program-that-accepts-a-list-of-numbers.-count-the-negative-numbers-and-compute-the-sum-of-the-positive-numbers-of-the-said-list.-return-these-values-through-a-list.', '<p>def count_sum(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if not nums: return []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return [len([n for n in nums if n &lt; 0]), sum(n for n in nums if n &gt; 0)]</p><p>nums = [1, 2, 3, 4, 5]</p><p>print(\"Original list:\",nums)</p><p>print(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))</p><br><p>nums = [-1, -2, -3, -4, -5]</p><p>print(\"Original list:\",nums)</p><p>print(count_sum(nums))</p><p>print(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))</p><br><p>nums = [1, 2, 3, -4, -5]</p><p>print(\"Original list:\",nums)</p><p>print(count_sum(nums))</p><p>print(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))</p><br><p>nums = [1, 2, -3, -4, -5]</p><p>print(\"Original list:\",nums)</p><p>print(count_sum(nums))</p><p>print(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))</p><br>', 'def count_sum(nums):\r\n   if not nums: return []\r\n   return [len([n for n in nums if n < 0]), sum(n for n in nums if n > 0)]\r\n\r\nnums = [1, 2, 3, 4, 5]\r\nprint(\"Original list:\",nums)\r\nprint(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))\r\n\r\nnums = [-1, -2, -3, -4, -5]\r\nprint(\"Original list:\",nums)\r\nprint(count_sum(nums))\r\nprint(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))\r\n\r\nnums = [1, 2, 3, -4, -5]\r\nprint(\"Original list:\",nums)\r\nprint(count_sum(nums))\r\nprint(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))\r\n\r\nnums = [1, 2, -3, -4, -5]\r\nprint(\"Original list:\",nums)\r\nprint(count_sum(nums))\r\nprint(\"Number of negative of numbers and sum of the positive numbers of the said list:\",count_sum(nums))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:43:54', 1),
(238, 'Write a Python program to check whether a given string is an \"isogram\" or not.', 'write-a-python-program-to-check-whether-a-given-string-is-an-\"isogram\"-or-not.', '<p>def check_isogram(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return len(str1) == len(set(str1.lower()))</p><br><p>print(check_isogram(\"Pyshikho\"))</p><p>print(check_isogram(\"World\"))</p><p>print(check_isogram(\"Python\"))</p><p>print(check_isogram(\"Java\"))</p>', 'def check_isogram(str1):\r\n    return len(str1) == len(set(str1.lower()))\r\n\r\nprint(check_isogram(\"Pyshikho\"))\r\nprint(check_isogram(\"World\"))\r\nprint(check_isogram(\"Python\"))\r\nprint(check_isogram(\"Java\"))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:49:31', 1),
(239, 'Write a Python program to count the number of equal numbers from three given integers.', 'write-a-python-program-to-count-the-number-of-equal-numbers-from-three-given-integers.', '<p>def test_three_equal(x, y, z):</p><p>&nbsp; &nbsp; &nbsp; result= set([x, y, z])</p><p>&nbsp; &nbsp; &nbsp; if len(result)==3:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0</p><p>&nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (4 - len(result))</p><br><p>print(test_three_equal(1, 1, 1))</p><p>print(test_three_equal(1, 2, 2))</p><p>print(test_three_equal(-1, -2, -3))</p><p>print(test_three_equal(-1, -1, -1))</p>', 'def test_three_equal(x, y, z):\r\n   result= set([x, y, z])\r\n   if len(result)==3:\r\n     return 0\r\n   else:\r\n     return (4 - len(result))\r\n\r\nprint(test_three_equal(1, 1, 1))\r\nprint(test_three_equal(1, 2, 2))\r\nprint(test_three_equal(-1, -2, -3))\r\nprint(test_three_equal(-1, -1, -1))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 05:58:46', 1),
(240, 'Write a Python program to check whether a given employee code is exactly 8 digits or 12 digits. Return True if the employee code is valid and False if it\'s not.', 'write-a-python-program-to-check-whether-a-given-employee-code-is-exactly-8-digits-or-12-digits.-return-true-if-the-employee-code-is-valid-and-false-if-it\'s-not.', '<p>def is_valid_emp_code(emp_code):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return len(emp_code) in [8, 12] and emp_code.isdigit()</p><br><p>print(is_valid_emp_code(\'12345678\'))</p><p>print(is_valid_emp_code(\'1234567j\'))</p><p>print(is_valid_emp_code(\'12345678j\'))</p><p>print(is_valid_emp_code(\'123456789123\'))</p><p>print(is_valid_emp_code(\'123456abcdef\'))</p>', 'def is_valid_emp_code(emp_code):\r\n    return len(emp_code) in [8, 12] and emp_code.isdigit()\r\n\r\nprint(is_valid_emp_code(\'12345678\'))\r\nprint(is_valid_emp_code(\'1234567j\'))\r\nprint(is_valid_emp_code(\'12345678j\'))\r\nprint(is_valid_emp_code(\'123456789123\'))\r\nprint(is_valid_emp_code(\'123456abcdef\'))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 06:01:31', 1),
(241, 'Write a Python program that accepts two strings and determines whether the letters in the second string are present in the first string.', 'write-a-python-program-that-accepts-two-strings-and-determines-whether-the-letters-in-the-second-string-are-present-in-the-first-string.', '<p>def string_letter_check(str1, str2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return all([char in str1.lower() for char in str2.lower()])</p><br><p>print(string_letter_check(\"python\", \"ypth\"))</p><p>print(string_letter_check(\"python\", \"ypths\"))</p><p>print(string_letter_check(\"python\", \"ypthon\"))</p><p>print(string_letter_check(\"123456\", \"01234\"))</p><p>print(string_letter_check(\"123456\", \"1234\"))</p>', 'def string_letter_check(str1, str2):\r\n    return all([char in str1.lower() for char in str2.lower()])\r\n\r\nprint(string_letter_check(\"python\", \"ypth\"))\r\nprint(string_letter_check(\"python\", \"ypths\"))\r\nprint(string_letter_check(\"python\", \"ypthon\"))\r\nprint(string_letter_check(\"123456\", \"01234\"))\r\nprint(string_letter_check(\"123456\", \"1234\"))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 07:51:42', 1),
(242, 'Write a Python program to compute the sum of the three lowest positive numbers from a given list of numbers.', 'write-a-python-program-to-compute-the-sum-of-the-three-lowest-positive-numbers-from-a-given-list-of-numbers.', '<p>def sum_three_smallest_nums(lst):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return sum(sorted([x for x in lst if x &gt; 0])[:3])</p><br><p>nums = [10, 20, 30, 40, 50, 60, 7]</p><p>print(\"Original list of numbers: \",nums)</p><p>print(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))</p><p>nums = [1, 2, 3, 4, 5]</p><p>print(\"\\nOriginal list of numbers: \",nums)</p><p>print(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))</p><p>nums = [0, 1, 2, 3, 4, 5]</p><p>print(\"\\nOriginal list of numbers: \",nums)</p><p>print(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))</p>', 'def sum_three_smallest_nums(lst):\r\n     return sum(sorted([x for x in lst if x > 0])[:3])\r\n\r\nnums = [10, 20, 30, 40, 50, 60, 7]\r\nprint(\"Original list of numbers: \",nums)\r\nprint(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))\r\nnums = [1, 2, 3, 4, 5]\r\nprint(\"\\nOriginal list of numbers: \",nums)\r\nprint(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))\r\nnums = [0, 1, 2, 3, 4, 5]\r\nprint(\"\\nOriginal list of numbers: \",nums)\r\nprint(\"Sum of the three lowest positive numbers of the said array: \",sum_three_smallest_nums(nums))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:00:46', 1),
(243, 'Write a Python program that replaces all but the last five characters of a string with \"*\" and returns the modified string.', 'write-a-python-program-that-replaces-all-but-the-last-five-characters-of-a-string-with-\"*\"-and-returns-the-modified-string.', '<p>def new_string(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \'*\'*(len(str1)-5) + str1[-5:]</p><br><p>text = \"kdi39323swe\"</p><p>print(\"Original String: \",text)</p><p>print(\"new string: \",new_string(text))</p><p>text = \"12345abcdef\"</p><p>print(\"\\nOriginal String: \",text)</p><p>print(\"new string: \",new_string(text))</p><p>text = \"12345\"</p><p>print(\"\\nOriginal String: \",text)</p><p>print(\"new string: \",new_string(text))</p>', 'def new_string(str1):\r\n     return \'*\'*(len(str1)-5) + str1[-5:]\r\n\r\ntext = \"kdi39323swe\"\r\nprint(\"Original String: \",text)\r\nprint(\"new string: \",new_string(text))\r\ntext = \"12345abcdef\"\r\nprint(\"\\nOriginal String: \",text)\r\nprint(\"new string: \",new_string(text))\r\ntext = \"12345\"\r\nprint(\"\\nOriginal String: \",text)\r\nprint(\"new string: \",new_string(text))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:07:45', 1),
(244, 'Write a Python program to count the number of arguments in a given function.', 'write-a-python-program-to-count-the-number-of-arguments-in-a-given-function.', '<p>def num_of_args(*args):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return(len(args))</p><br><p>print(num_of_args())</p><p>print(num_of_args(1))</p><p>print(num_of_args(1, 2))</p><p>print(num_of_args(1, 2, 3))</p><p>print(num_of_args(1, 2, 3, 4))</p><p>print(num_of_args([1, 2, 3, 4]))</p>', 'def num_of_args(*args):\r\n     return(len(args))\r\n\r\nprint(num_of_args())\r\nprint(num_of_args(1))\r\nprint(num_of_args(1, 2))\r\nprint(num_of_args(1, 2, 3))\r\nprint(num_of_args(1, 2, 3, 4))\r\nprint(num_of_args([1, 2, 3, 4]))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:15:52', 1),
(245, 'Write a Python program to compute the cumulative sum of numbers in a given list. Note: Cumulative sum = sum of itself + all previous numbers in the said list.', 'write-a-python-program-to-compute-the-cumulative-sum-of-numbers-in-a-given-list.-note:-cumulative-sum-=-sum-of-itself-+-all-previous-numbers-in-the-said-list.', '<p>def nums_cumulative_sum(nums_list):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return [sum(nums_list[:i+1]) for i in range(len(nums_list))]</p><br><p>print(nums_cumulative_sum([10, 20, 30, 40, 50, 60, 7]))</p><p>print(nums_cumulative_sum([1, 2, 3, 4, 5]))</p><p>print(nums_cumulative_sum([0, 1, 2, 3, 4, 5]))</p>', 'def nums_cumulative_sum(nums_list):\r\n     return [sum(nums_list[:i+1]) for i in range(len(nums_list))]\r\n\r\nprint(nums_cumulative_sum([10, 20, 30, 40, 50, 60, 7]))\r\nprint(nums_cumulative_sum([1, 2, 3, 4, 5]))\r\nprint(nums_cumulative_sum([0, 1, 2, 3, 4, 5]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:31:26', 1),
(246, 'Write a Python program to find the central character(s) of a given string. Return the two middle characters if the length of the string is even. Return the middle character if the length of the string is odd.', 'write-a-python-program-to-find-the-central-character(s)-of-a-given-string.-return-the-two-middle-characters-if-the-length-of-the-string-is-even.-return-the-middle-character-if-the-length-of-the-string-is-odd.', '<p>def middle_char(txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return txt[(len(txt)-1)//2:(len(txt)+2)//2]</p><br><p>text = \"Python\"</p><p>print(\"Original string: \",text)</p><p>print(\"Middle character(s) of the said string: \",middle_char(text))</p><p>text = \"PHP\"</p><p>print(\"Original string: \",text)</p><p>print(\"Middle character(s) of the said string: \",middle_char(text))</p><p>text = \"Java\"</p><p>print(\"Original string: \",text)</p><p>print(\"Middle character(s) of the said string: \",middle_char(text))</p>', 'def middle_char(txt):\r\n     return txt[(len(txt)-1)//2:(len(txt)+2)//2]\r\n\r\ntext = \"Python\"\r\nprint(\"Original string: \",text)\r\nprint(\"Middle character(s) of the said string: \",middle_char(text))\r\ntext = \"PHP\"\r\nprint(\"Original string: \",text)\r\nprint(\"Middle character(s) of the said string: \",middle_char(text))\r\ntext = \"Java\"\r\nprint(\"Original string: \",text)\r\nprint(\"Middle character(s) of the said string: \",middle_char(text))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:39:20', 1),
(247, 'Write a Python program to find the largest product of a pair of adjacent elements from a given list of integers.', 'write-a-python-program-to-find-the-largest-product-of-a-pair-of-adjacent-elements-from-a-given-list-of-integers.', '<p>def adjacent_num_product(list_nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return max(a*b for a, b in zip(list_nums, list_nums[1:]))</p><br><p>nums = [1,2,3,4,5,6]</p><p>print(\"Original list: \",nums)</p><p>print(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))</p><p>nums = [1,2,3,4,5]</p><p>print(\"\\nOriginal list: \",nums)</p><p>print(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))</p><p>nums = [2,3]</p><p>print(\"\\nOriginal list: \",nums)</p><p>print(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))</p>', 'def adjacent_num_product(list_nums):\r\n     return max(a*b for a, b in zip(list_nums, list_nums[1:]))\r\n\r\nnums = [1,2,3,4,5,6]\r\nprint(\"Original list: \",nums)\r\nprint(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))\r\nnums = [1,2,3,4,5]\r\nprint(\"\\nOriginal list: \",nums)\r\nprint(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))\r\nnums = [2,3]\r\nprint(\"\\nOriginal list: \",nums)\r\nprint(\"Largest product of the pair of adjacent elements of the said list:\", adjacent_num_product(nums))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 08:48:30', 1),
(248, 'Write a Python program that checks whether every even index contains an even number and every odd index contains an odd number of a given list.', 'write-a-python-program-that-checks-whether-every-even-index-contains-an-even-number-and-every-odd-index-contains-an-odd-number-of-a-given-list.', '<p>def odd_even_position(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return all(nums[i]%2==i%2 for i in range(len(nums)))</p><br><p>nums = [2, 1, 4, 3, 6, 7, 6, 3]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")</p><p>print(odd_even_position(nums))</p><p>nums = [2, 1, 4, 3, 6, 7, 6, 4]</p><p>print(\"\\nOriginal list of numbers:\", nums)</p><p>print(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")</p><p>print(odd_even_position(nums))</p><p>print(\"\\nOriginal list of numbers:\", nums)</p><p>nums = [4, 1, 2]</p><p>print(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")</p><p>print(odd_even_position(nums))</p><br>', 'def odd_even_position(nums):\r\n       return all(nums[i]%2==i%2 for i in range(len(nums)))\r\n\r\nnums = [2, 1, 4, 3, 6, 7, 6, 3]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")\r\nprint(odd_even_position(nums))\r\nnums = [2, 1, 4, 3, 6, 7, 6, 4]\r\nprint(\"\\nOriginal list of numbers:\", nums)\r\nprint(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")\r\nprint(odd_even_position(nums))\r\nprint(\"\\nOriginal list of numbers:\", nums)\r\nnums = [4, 1, 2]\r\nprint(\"Check whether every even index contains an even number and every \\nodd index contains odd number of a given list:\")\r\nprint(odd_even_position(nums))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:12:16', 1),
(249, 'Write a Python program to check whether a given number is a narcissistic number or not.', 'write-a-python-program-to-check-whether-a-given-number-is-a-narcissistic-number-or-not.', '<p>def is_narcissistic_num(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return num == sum([int(x) ** len(str(num)) for x in str(num)])</p><br><p>print(is_narcissistic_num(153))</p><p>print(is_narcissistic_num(370))</p><p>print(is_narcissistic_num(407))</p><p>print(is_narcissistic_num(409))</p><p>print(is_narcissistic_num(1634))</p><p>print(is_narcissistic_num(8208))</p><p>print(is_narcissistic_num(9474))</p><p>print(is_narcissistic_num(9475))</p>', 'def is_narcissistic_num(num):\r\n     return num == sum([int(x) ** len(str(num)) for x in str(num)])\r\n\r\nprint(is_narcissistic_num(153))\r\nprint(is_narcissistic_num(370))\r\nprint(is_narcissistic_num(407))\r\nprint(is_narcissistic_num(409))\r\nprint(is_narcissistic_num(1634))\r\nprint(is_narcissistic_num(8208))\r\nprint(is_narcissistic_num(9474))\r\nprint(is_narcissistic_num(9475))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:15:20', 1),
(250, 'Write a Python program to find the highest and lowest number from a given string of space-separated integers.', 'write-a-python-program-to-find-the-highest-and-lowest-number-from-a-given-string-of-space-separated-integers.', '<p>def highest_lowest_num(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; num_list = list(map(int, str1.split()))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return max(num_list), min(num_list)</p><br><p>text = \"1 4 5 77 9 0\"</p><p>print(\"Original string:\", text)</p><p>print(\"Highest and lowest number of the said string:\",highest_lowest_num(text))</p><p>text = \"-1 -4 -5 -77 -9 0\"</p><p>print(\"\\nOriginal string:\", text)</p><p>print(\"Highest and lowest number of the said string:\",highest_lowest_num(text))</p><p>text = \"0 0\"</p><p>print(\"\\nOriginal string:\", text)</p><p>print(\"Highest and lowest number of the said string:\",highest_lowest_num(text))</p>', 'def highest_lowest_num(str1):\r\n     num_list = list(map(int, str1.split()))\r\n     return max(num_list), min(num_list)\r\n\r\ntext = \"1 4 5 77 9 0\"\r\nprint(\"Original string:\", text)\r\nprint(\"Highest and lowest number of the said string:\",highest_lowest_num(text))\r\ntext = \"-1 -4 -5 -77 -9 0\"\r\nprint(\"\\nOriginal string:\", text)\r\nprint(\"Highest and lowest number of the said string:\",highest_lowest_num(text))\r\ntext = \"0 0\"\r\nprint(\"\\nOriginal string:\", text)\r\nprint(\"Highest and lowest number of the said string:\",highest_lowest_num(text))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:17:38', 1),
(251, 'Write a Python program to check whether a sequence of numbers has an increasing trend or not.', 'write-a-python-program-to-check-whether-a-sequence-of-numbers-has-an-increasing-trend-or-not.', '<p>def increasing_trend(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (sorted(nums) == nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</p><br><p>print(increasing_trend([1,2,3,4]))</p><p>print(increasing_trend([1,2,5,3,4]))</p><p>print(increasing_trend([-1,-2,-3,-4]))</p><p>print(increasing_trend([-4,-3,-2,-1]))</p><p>print(increasing_trend([1,2,3,4,0]))</p>', 'def increasing_trend(nums):\r\n    if (sorted(nums) == nums):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(increasing_trend([1,2,3,4]))\r\nprint(increasing_trend([1,2,5,3,4]))\r\nprint(increasing_trend([-1,-2,-3,-4]))\r\nprint(increasing_trend([-4,-3,-2,-1]))\r\nprint(increasing_trend([1,2,3,4,0]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:23:15', 1),
(252, 'Write a Python program to find the position of the second occurrence of a given string in another given string. If there is no such string return -1.', 'write-a-python-program-to-find-the-position-of-the-second-occurrence-of-a-given-string-in-another-given-string.-if-there-is-no-such-string-return--1.', '<p>def find_string(txt, str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return txt.find(str1, txt.find(str1)+1)</p><br><p>print(find_string(\"The quick brown fox jumps over the lazy dog\", \"the\"))</p><p>print(find_string(\"the quick brown fox jumps over the lazy dog\", \"the\"))</p>', 'def find_string(txt, str1):\r\n      return txt.find(str1, txt.find(str1)+1)\r\n\r\nprint(find_string(\"The quick brown fox jumps over the lazy dog\", \"the\"))\r\nprint(find_string(\"the quick brown fox jumps over the lazy dog\", \"the\"))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:28:46', 1),
(253, 'Write a Python program to compute the sum of all items in a given array of integers where each integer is multiplied by its index. Return 0 if there is no number.', 'write-a-python-program-to-compute-the-sum-of-all-items-in-a-given-array-of-integers-where-each-integer-is-multiplied-by-its-index.-return-0-if-there-is-no-number.', '<p>def sum_index_multiplier(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return sum(j*i for i, j in enumerate(nums))</p><br><p>print(sum_index_multiplier([1,2,3,4]))</p><p>print(sum_index_multiplier([-1,-2,-3,-4]))</p><p>print(sum_index_multiplier([]))</p>', 'def sum_index_multiplier(nums):\r\n      return sum(j*i for i, j in enumerate(nums))\r\n\r\nprint(sum_index_multiplier([1,2,3,4]))\r\nprint(sum_index_multiplier([-1,-2,-3,-4]))\r\nprint(sum_index_multiplier([]))', 6, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:37:36', 1),
(254, 'Write a Python program to find the name of the oldest student in a given dictionary containing the names and ages of a group of students.', 'write-a-python-program-to-find-the-name-of-the-oldest-student-in-a-given-dictionary-containing-the-names-and-ages-of-a-group-of-students.', '<p>def oldest_student(students):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return max(students, key=students.get)</p><br><p>print(oldest_student({\"Bernita Ahner\": 12, \"Kristie Marsico\": 11, \"Sara Pardee\": 14, \"Fallon Fabiano\": 11, \"Nidia Dominique\": 15}))&nbsp;</p><p>print(oldest_student({\"Nilda Woodside\": 12, \"Jackelyn Pineda\": 12.2, \"Sofia Park\": 12.4, \"Joannie Archibald\": 12.6, \"Becki Saunder\": 12.7}))</p>', 'def oldest_student(students):\r\n      return max(students, key=students.get)\r\n\r\nprint(oldest_student({\"Bernita Ahner\": 12, \"Kristie Marsico\": 11, \"Sara Pardee\": 14, \"Fallon Fabiano\": 11, \"Nidia Dominique\": 15})) \r\nprint(oldest_student({\"Nilda Woodside\": 12, \"Jackelyn Pineda\": 12.2, \"Sofia Park\": 12.4, \"Joannie Archibald\": 12.6, \"Becki Saunder\": 12.7}))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:42:33', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(255, 'Write a Python program to create a string with no duplicate consecutive letters from a given string.', 'write-a-python-program-to-create-a-string-with-no-duplicate-consecutive-letters-from-a-given-string.', '<p>def no_consecutive_letters (txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return txt[0] + \'\'.join(txt[i] for i in range(1,len(txt)) if txt[i] != txt[i-1])</p><br><p>print(no_consecutive_letters(\"PPYYYTTHON\"))</p><p>print(no_consecutive_letters(\"PPyyythonnn\"))</p><p>print(no_consecutive_letters(\"Java\"))</p><p>print(no_consecutive_letters(\"PPPHHHPPP\"))</p>', 'def no_consecutive_letters (txt):\r\n      return txt[0] + \'\'.join(txt[i] for i in range(1,len(txt)) if txt[i] != txt[i-1])\r\n\r\nprint(no_consecutive_letters(\"PPYYYTTHON\"))\r\nprint(no_consecutive_letters(\"PPyyythonnn\"))\r\nprint(no_consecutive_letters(\"Java\"))\r\nprint(no_consecutive_letters(\"PPPHHHPPP\"))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:47:04', 1),
(256, 'Write a Python program to check whether two given lines are parallel or not.', 'write-a-python-program-to-check-whether-two-given-lines-are-parallel-or-not.', '<p>def parallel_lines(line1, line2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return line1[0]/line1[1] == line2[0]/line2[1]</p><br><p>#2x + 3y = 4, 2x + 3y = 8</p><p>print(parallel_lines([2,3,4], [2,3,8]))</p><p>#2x + 3y = 4, 4x - 3y = 8</p><p>print(parallel_lines([2,3,4], [4,-3,8]))</p>', 'def parallel_lines(line1, line2):\r\n      return line1[0]/line1[1] == line2[0]/line2[1]\r\n\r\n#2x + 3y = 4, 2x + 3y = 8\r\nprint(parallel_lines([2,3,4], [2,3,8]))\r\n#2x + 3y = 4, 4x - 3y = 8\r\nprint(parallel_lines([2,3,4], [4,-3,8]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:49:16', 1),
(257, 'Write a Python program to find a number in a given matrix that is maximum in its column and minimum in its row.', 'write-a-python-program-to-find-a-number-in-a-given-matrix-that-is-maximum-in-its-column-and-minimum-in-its-row.', '<p># Number in a Matrix: Maximum in its column and minimum in its row.</p><p>def matrix_number(matrix):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = set(map(min, matrix)) &amp; set(map(max, zip(*matrix)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return list(result)</p><br><p>m1 = [[1,2], [2,3]]</p><p>print(\"Original matrix:\",m1)</p><p>print(\"Number in the said matrix which is maximum in its column and minimum in its row:\")</p><p>print(matrix_number(m1))</p><br><p>m1 = [[1,2,3], [3,4,5]]</p><p>print(\"\\nOriginal matrix:\",m1)</p><p>print(\"Number in the said matrix which is maximum in its column and minimum in its row:\")</p><p>print(matrix_number(m1))</p><br><p>m1 = [[7,5,6], [3,4,4], [6,5,7]]</p><p>print(\"\\nOriginal matrix:\",m1)</p><p>print(\"Number in the said matrix which is maximum in its column and minimum in its row:\")</p><p>print(matrix_number(m1))</p><br>', '# Number in a Matrix: Maximum in its column and minimum in its row.\r\ndef matrix_number(matrix):\r\n      result = set(map(min, matrix)) & set(map(max, zip(*matrix)))\r\n      return list(result)\r\n\r\nm1 = [[1,2], [2,3]]\r\nprint(\"Original matrix:\",m1)\r\nprint(\"Number in the said matrix which is maximum in its column and minimum in its row:\")\r\nprint(matrix_number(m1))\r\n\r\nm1 = [[1,2,3], [3,4,5]]\r\nprint(\"\\nOriginal matrix:\",m1)\r\nprint(\"Number in the said matrix which is maximum in its column and minimum in its row:\")\r\nprint(matrix_number(m1))\r\n\r\nm1 = [[7,5,6], [3,4,4], [6,5,7]]\r\nprint(\"\\nOriginal matrix:\",m1)\r\nprint(\"Number in the said matrix which is maximum in its column and minimum in its row:\")\r\nprint(matrix_number(m1))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 09:55:22', 1),
(258, 'Write a Python program to check whether a given sequence is linear, quadratic or cubic.', 'write-a-python-program-to-check-whether-a-given-sequence-is-linear,-quadratic-or-cubic.', '<p>def Seq_Linear_Quadratic_Cubic(seq_nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if len(set(seq_nums)) == 1: return \"Linear Sequence\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if len(set(seq_nums)) == 1: return \"Quadratic Sequence\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if len(set(seq_nums)) == 1: return \"Cubic Sequence\"</p><br><p>nums = [0,2,4,6,8,10]</p><p>print(\"Original Sequence:\",nums)</p><p>print(\"Check the said sequence is Linear, Quadratic or Cubic?\")</p><p>print(Seq_Linear_Quadratic_Cubic(nums))</p><br><p>nums = [1,4,9,16,25]</p><p>print(\"\\nOriginal Sequence:\",nums)</p><p>print(\"Check the said sequence is Linear, Quadratic or Cubic?\")</p><p>print(Seq_Linear_Quadratic_Cubic(nums))</p><br><p>nums = [0,12,10,0,-12,-20]</p><p>print(\"\\nOriginal Sequence:\",nums)</p><p>print(\"Check the said sequence is Linear, Quadratic or Cubic?\")</p><p>print(Seq_Linear_Quadratic_Cubic(nums))</p><br><p>nums = [1,2,3,4,5]</p><p>print(\"\\nOriginal Sequence:\",nums)</p><p>print(\"Check the said sequence is Linear, Quadratic or Cubic?\")</p><p>print(Seq_Linear_Quadratic_Cubic(nums))</p><br>', 'def Seq_Linear_Quadratic_Cubic(seq_nums):\r\n      seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n      if len(set(seq_nums)) == 1: return \"Linear Sequence\"\r\n      seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n      if len(set(seq_nums)) == 1: return \"Quadratic Sequence\"\r\n      seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n      if len(set(seq_nums)) == 1: return \"Cubic Sequence\"\r\n\r\nnums = [0,2,4,6,8,10]\r\nprint(\"Original Sequence:\",nums)\r\nprint(\"Check the said sequence is Linear, Quadratic or Cubic?\")\r\nprint(Seq_Linear_Quadratic_Cubic(nums))\r\n\r\nnums = [1,4,9,16,25]\r\nprint(\"\\nOriginal Sequence:\",nums)\r\nprint(\"Check the said sequence is Linear, Quadratic or Cubic?\")\r\nprint(Seq_Linear_Quadratic_Cubic(nums))\r\n\r\nnums = [0,12,10,0,-12,-20]\r\nprint(\"\\nOriginal Sequence:\",nums)\r\nprint(\"Check the said sequence is Linear, Quadratic or Cubic?\")\r\nprint(Seq_Linear_Quadratic_Cubic(nums))\r\n\r\nnums = [1,2,3,4,5]\r\nprint(\"\\nOriginal Sequence:\",nums)\r\nprint(\"Check the said sequence is Linear, Quadratic or Cubic?\")\r\nprint(Seq_Linear_Quadratic_Cubic(nums))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 10:01:10', 1),
(259, 'Write a Python program to test whether a given integer is a Pandigital number or not.', 'write-a-python-program-to-test-whether-a-given-integer-is-a-pandigital-number-or-not.', '<p>def is_pandigital_num(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return len(set(str(n))) == 10</p><br><p>n = 1023456897</p><p>print(\"Original number:\",n)</p><p>print(\"Check the said number is Pandigital number or not?\")</p><p>print(is_pandigital_num(n))</p><br><p>n = 1023456798</p><p>print(\"Original number:\",n)</p><p>print(\"Check the said number is Pandigital number or not?\")</p><p>print(is_pandigital_num(n))</p><br><p>n = 1023457689</p><p>print(\"Original number:\",n)</p><p>print(\"Check the said number is Pandigital number or not?\")</p><p>print(is_pandigital_num(n))</p><br><p>n = 1023456789</p><p>print(\"Original number:\",n)</p><p>print(\"Check the said number is Pandigital number or not?\")</p><p>print(is_pandigital_num(n))</p><br><p>n = 102345679</p><p>print(\"Original number:\",n)</p><p>print(\"Check the said number is Pandigital number or not?\")</p><p>print(is_pandigital_num(n))</p><br>', 'def is_pandigital_num(n):\r\n      return len(set(str(n))) == 10\r\n\r\nn = 1023456897\r\nprint(\"Original number:\",n)\r\nprint(\"Check the said number is Pandigital number or not?\")\r\nprint(is_pandigital_num(n))\r\n\r\nn = 1023456798\r\nprint(\"Original number:\",n)\r\nprint(\"Check the said number is Pandigital number or not?\")\r\nprint(is_pandigital_num(n))\r\n\r\nn = 1023457689\r\nprint(\"Original number:\",n)\r\nprint(\"Check the said number is Pandigital number or not?\")\r\nprint(is_pandigital_num(n))\r\n\r\nn = 1023456789\r\nprint(\"Original number:\",n)\r\nprint(\"Check the said number is Pandigital number or not?\")\r\nprint(is_pandigital_num(n))\r\n\r\nn = 102345679\r\nprint(\"Original number:\",n)\r\nprint(\"Check the said number is Pandigital number or not?\")\r\nprint(is_pandigital_num(n))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 10:05:02', 1),
(260, 'Write a Python program to check whether a given number is Oddish or Evenish.', 'write-a-python-program-to-check-whether-a-given-number-is-Oddish -or-Evenish.', '<p>def oddish_evenish_num(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \'Oddish\' if sum(map(int, str(n))) % 2 else \'Evenish\'</p><br><p>n = 120</p><p>print(\"Original Number\",n)</p><p>print(\"Check whether the sum of all digits of the said number is odd or even!\")</p><p>print(oddish_evenish_num(120))</p><br><p>n = 321</p><p>print(\"Original Number\",n)</p><p>print(\"Check whether the sum of all digits of the said number is odd or even!\")</p><p>print(oddish_evenish_num(321))</p><br><p>n = 43</p><p>print(\"Original Number\",n)</p><p>print(\"Check whether the sum of all digits of the said number is odd or even!\")</p><p>print(oddish_evenish_num(43))</p><br><p>n = 4433</p><p>print(\"Original Number\",n)</p><p>print(\"Check whether the sum of all digits of the said number is odd or even!\")</p><p>print(oddish_evenish_num(4433))</p><br><p>n = 373</p><p>print(\"Original Number\",n)</p><p>print(\"Check whether the sum of all digits of the said number is odd or even!\")</p><p>print(oddish_evenish_num(373))</p><br>', 'def oddish_evenish_num(n):\r\n      return \'Oddish\' if sum(map(int, str(n))) % 2 else \'Evenish\'\r\n\r\nn = 120\r\nprint(\"Original Number\",n)\r\nprint(\"Check whether the sum of all digits of the said number is odd or even!\")\r\nprint(oddish_evenish_num(120))\r\n\r\nn = 321\r\nprint(\"Original Number\",n)\r\nprint(\"Check whether the sum of all digits of the said number is odd or even!\")\r\nprint(oddish_evenish_num(321))\r\n\r\nn = 43 \r\nprint(\"Original Number\",n)\r\nprint(\"Check whether the sum of all digits of the said number is odd or even!\")\r\nprint(oddish_evenish_num(43))\r\n\r\nn = 4433\r\nprint(\"Original Number\",n)\r\nprint(\"Check whether the sum of all digits of the said number is odd or even!\")\r\nprint(oddish_evenish_num(4433))\r\n\r\nn = 373\r\nprint(\"Original Number\",n)\r\nprint(\"Check whether the sum of all digits of the said number is odd or even!\")\r\nprint(oddish_evenish_num(373))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 10:16:34', 1),
(261, 'Write a Python program that takes three integers and checks whether the sum of the last digit of the first number and the last digit of the second number equals the last digit of the third number.', 'write-a-python-program-that-takes-three-integers-and-checks-whether-the-sum-of-the-last-digit-of-the-first-number-and-the-last-digit-of-the-second-number-equals-the-last-digit-of-the-third-number.', '<p>def check_last_digit(x, y, z):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return str(x+z)[-1] == str(y)[-1]</p><br><p>print(check_last_digit(12, 26, 44))</p><p>print(check_last_digit(145, 122, 1010))</p><p>print(check_last_digit(0, 20, 40))</p><p>print(check_last_digit(1, 22, 40))</p><p>print(check_last_digit(145, 129, 104))</p>', 'def check_last_digit(x, y, z):\r\n      return str(x+z)[-1] == str(y)[-1]\r\n\r\nprint(check_last_digit(12, 26, 44))\r\nprint(check_last_digit(145, 122, 1010))\r\nprint(check_last_digit(0, 20, 40))\r\nprint(check_last_digit(1, 22, 40))\r\nprint(check_last_digit(145, 129, 104))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:14:27', 1),
(262, 'Write a Python program to find the indices of all occurrences of a given item in a given list.', 'write-a-python-program-to-find-the-indices-of-all-occurrences-of-a-given-item-in-a-given-list.', '<p>def indices_in_list(nums_list, n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return [idx for idx, i in enumerate(nums_list) if i == n]</p><br><p>nums = [1,2,3,4,5,2]</p><p>print(\"Original list of numbers:\",nums)</p><p>n = 2</p><p>print(\"Given Number\",n)</p><p>print(\"Indices of all occurrences of the said item in the given list:\")</p><p>print(indices_in_list(nums, n))</p><br><p>nums = [3,1,2,3,4,5,6,3,3]</p><p>print(\"\\nOriginal list of numbers:\",nums)</p><p>n = 3</p><p>print(\"Given Number\",n)</p><p>print(\"Indices of all occurrences of the said item in the given list:\")</p><p>print(indices_in_list(nums, n))</p><br><p>nums = [1,2,3,-4,5,2,-4]</p><p>print(\"\\nOriginal list of numbers:\",nums)</p><p>n = -4</p><p>print(\"Given Number\",n)</p><p>print(\"Indices of all occurrences of the said item in the given list:\")</p><p>print(indices_in_list(nums, n))</p><br><p>nums = [1,2,3,4,5,2]</p><p>print(\"\\nOriginal list of numbers:\",nums)</p><p>n = 7</p><p>print(\"Given Number\",n)</p><p>print(\"Indices of all occurrences of the said item in the given list:\")</p><p>print(indices_in_list(nums, n))</p><br>', 'def indices_in_list(nums_list, n):\r\n      return [idx for idx, i in enumerate(nums_list) if i == n]\r\n\r\nnums = [1,2,3,4,5,2]\r\nprint(\"Original list of numbers:\",nums)\r\nn = 2\r\nprint(\"Given Number\",n)\r\nprint(\"Indices of all occurrences of the said item in the given list:\")\r\nprint(indices_in_list(nums, n))\r\n\r\nnums = [3,1,2,3,4,5,6,3,3]\r\nprint(\"\\nOriginal list of numbers:\",nums)\r\nn = 3\r\nprint(\"Given Number\",n)\r\nprint(\"Indices of all occurrences of the said item in the given list:\")\r\nprint(indices_in_list(nums, n))\r\n\r\nnums = [1,2,3,-4,5,2,-4]\r\nprint(\"\\nOriginal list of numbers:\",nums)\r\nn = -4\r\nprint(\"Given Number\",n)\r\nprint(\"Indices of all occurrences of the said item in the given list:\")\r\nprint(indices_in_list(nums, n))\r\n\r\nnums = [1,2,3,4,5,2]\r\nprint(\"\\nOriginal list of numbers:\",nums)\r\nn = 7\r\nprint(\"Given Number\",n)\r\nprint(\"Indices of all occurrences of the said item in the given list:\")\r\nprint(indices_in_list(nums, n))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:19:59', 1),
(263, 'Write a Python program to remove duplicate numbers from a given list of numbers.', 'write-a-python-program-to-remove-duplicate-numbers-from-a-given-list-of-numbers.', '<p>def unique_nums(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return [i for i in nums if nums.count(i)==1]</p><br><p>nums = [1,2,3,2,3,4,5]</p><p>print(\"Original list of numbers:\",nums)</p><p>print(\"After removing the duplicate numbers from the said list:\")</p><p>print(unique_nums(nums))</p><br><p>nums = [1,2,3,2,4,5]</p><p>print(\"\\nOriginal list of numbers:\",nums)</p><p>print(\"After removing the duplicate numbers from the said list:\")</p><p>print(unique_nums(nums))</p><br><p>nums = [1,2,3,4,5]</p><p>print(\"\\nOriginal list of numbers:\",nums)</p><p>print(\"After removing the duplicate numbers from the said list:\")</p><p>print(unique_nums(nums))</p><br>', 'def unique_nums(nums):\r\n      return [i for i in nums if nums.count(i)==1]\r\n\r\nnums = [1,2,3,2,3,4,5]\r\nprint(\"Original list of numbers:\",nums)\r\nprint(\"After removing the duplicate numbers from the said list:\")\r\nprint(unique_nums(nums))\r\n\r\nnums = [1,2,3,2,4,5]\r\nprint(\"\\nOriginal list of numbers:\",nums)\r\nprint(\"After removing the duplicate numbers from the said list:\")\r\nprint(unique_nums(nums))\r\n\r\nnums = [1,2,3,4,5]\r\nprint(\"\\nOriginal list of numbers:\",nums)\r\nprint(\"After removing the duplicate numbers from the said list:\")\r\nprint(unique_nums(nums))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:22:34', 1),
(264, 'Write a Python program which checks whether two circles in the same plane (with the same center (x,y) and radius) intersect. If intersection occurs, return true, otherwise return false.', 'write-a-python-program-which-checks-whether-two-circles-in-the-same-plane-(with-the-same-center-(x,y)-and-radius)-intersect.-if-intersection-occurs,-return-true,-otherwise-return-false.', '<p>def is_circle_collision(circle1, circle2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x1, y1, r1 = circle1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x2, y2, r2 = circle2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; distance = ((x1-x2)**2 + (y1-y2)**2)**0.5</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return distance &lt;= r1 + r2</p><br><p>print(is_circle_collision([1,2, 4], [1,2, 8]))</p><p>print(is_circle_collision([0,0, 2], [10,10, 5]))</p>', 'def is_circle_collision(circle1, circle2):\r\n      x1, y1, r1 = circle1\r\n      x2, y2, r2 = circle2\r\n      distance = ((x1-x2)**2 + (y1-y2)**2)**0.5\r\n      return distance <= r1 + r2\r\n\r\nprint(is_circle_collision([1,2, 4], [1,2, 8]))\r\nprint(is_circle_collision([0,0, 2], [10,10, 5]))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:26:07', 1),
(265, 'Write a Python program to compute the digit distance between two integers.', 'write-a-python-program-to-compute-the-digit-distance-between-two-integers.', '<p>def digit_distance_nums(num1: int, num2: int) -&gt; int:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return(sum(abs(i - j) for i, j in</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zip(map(int, str(num1)), map(int, str(num2)))))</p><br><p>print(digit_distance_nums(509, 510))</p><p>print(digit_distance_nums(123, 256))</p><p>print(digit_distance_nums(23, 56))</p><p>print(digit_distance_nums(1, 2))</p><p>print(digit_distance_nums(24232, 45645))</p>', 'def digit_distance_nums(num1: int, num2: int) -> int:\r\n      return(sum(abs(i - j) for i, j in\r\n      zip(map(int, str(num1)), map(int, str(num2)))))\r\n\r\nprint(digit_distance_nums(509, 510))\r\nprint(digit_distance_nums(123, 256))\r\nprint(digit_distance_nums(23, 56))\r\nprint(digit_distance_nums(1, 2))\r\nprint(digit_distance_nums(24232, 45645))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:39:00', 1),
(266, 'Write a Python program to reverse all words of even lengths.', 'write-a-python-program-to-reverse-all-words-of-odd-lengths.', '<p>def reverse_even(txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \' \'.join(i[::-1] if not len(i)%2 else i for i in txt.split())</p><br><p>print(reverse_even(\"The quick brown fox jumps over the lazy dog\"))</p><p>print(reverse_even(\"Python Exercises\"))</p>', 'def reverse_even(txt):\r\n      return \' \'.join(i[::-1] if not len(i)%2 else i for i in txt.split())\r\n\r\nprint(reverse_even(\"The quick brown fox jumps over the lazy dog\"))\r\nprint(reverse_even(\"Python Exercises\"))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:43:33', 1),
(267, 'Write a Python program to print letters from the English alphabet from a-z and A-Z.', 'write-a-python-program-to-print-letters-from-the-english-alphabet-from-a-z-and-a-z.', '<p>import string</p><br><p>print(\"Alphabet from a-z:\")</p><p>for letter in string.ascii_lowercase:</p><p>&nbsp; &nbsp; &nbsp; print(letter, end =\" \")</p><br><p>print(\"\\nAlphabet from A-Z:\")</p><p>for letter in string.ascii_uppercase:</p><p>&nbsp; &nbsp; &nbsp; print(letter, end =\" \")</p>', 'import string\r\n\r\nprint(\"Alphabet from a-z:\")\r\nfor letter in string.ascii_lowercase:\r\n   print(letter, end =\" \")\r\n\r\nprint(\"\\nAlphabet from A-Z:\")\r\nfor letter in string.ascii_uppercase:\r\n   print(letter, end =\" \")', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 15:48:50', 1),
(268, 'Write a Python program to generate and print a list of numbers from 1 to 10.', 'write-a-python-program-to-generate-and-print-a-list-of-numbers-from-1-to-10.', '<p>nums = range(1,10)</p><p>print(list(nums))</p><p>print(list(map(str, nums)))</p>', 'nums = range(1,10)\r\nprint(list(nums))\r\nprint(list(map(str, nums)))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 16:32:13', 1),
(269, 'Write a Python program to identify non-prime numbers between 1 and 100 (integers). Print the non-prime numbers.', 'write-a-python-program-to-identify-non-prime-numbers-between-1-and-100-(integers).-print-the-non-prime-numbers.', '<p>import math</p><br><p>def is_not_prime(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;ans = False</p><p>&nbsp; &nbsp; &nbsp; &nbsp;for i in range(2, int(math.sqrt(n)) + 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if n % i == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ans = True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return ans</p><p>print(\"Nonprime numbers between 1 to 100:\")</p><p>for x in filter(is_not_prime, range(1, 101)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(x)</p>', 'import math\r\n\r\ndef is_not_prime(n):\r\n    ans = False\r\n    for i in range(2, int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            ans = True\r\n    return ans\r\nprint(\"Nonprime numbers between 1 to 100:\")\r\nfor x in filter(is_not_prime, range(1, 101)):\r\n    print(x)', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 16:11:11', 1),
(270, 'Write a Python program to identify prime numbers between 1 and 100 (integers). Print the prime numbers.', 'write-a-python-program-to-identify-prime-numbers-between-1-and-100-(integers).-print-the-prime-numbers.', '<p>minimum = 1</p><p>maximum = int(input(\" Please Enter the Maximum Value: \"))</p><br><p>for Number in range (minimum, maximum + 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; count = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(2, (Number//2 + 1)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(Number % i == 0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count = count + 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break<p/><br>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if (count == 0 and Number != 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\" %d\" %Number, end = \'\\n\')</p>', 'minimum = 1\r\n#Please Enter the Maximum Value\r\nmaximum = int(input( ))\r\n\r\nfor Number in range (minimum, maximum + 1):\r\n    count = 0\r\n    for i in range(2, (Number//2 + 1)):\r\n        if(Number % i == 0):\r\n            count = count + 1\r\n            break\r\n\r\n    if (count == 0 and Number != 1):\r\n        print(\" %d\" %Number, end = \'\\n\')', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-07 16:44:12', 1),
(271, 'In multiprocessing, processes are spawned by creating a Process object.Write a Python program to show the individual process IDs (parent process, process ID etc.) involved.', 'in-multiprocessing,-processes-are-spawned-by-creating-a-process-object.write-a-python-program-to-show-the-individual-process-ids-(parent-process,-process-id-etc.)-involved.', '<p>from multiprocessing import Process</p><p>import os</p><br><p>def info(title):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(title)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'module name:\', __name__)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'parent process:\', os.getppid())</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'process id:\', os.getpid())</p><br><p>def f(name):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; info(\'function f\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  print(\'hello\', name)</p><br><p>if __name__ == \'__main__\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; info(\'Main line\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; p = Process(target=f, args=(\'bob\',))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; p.start()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; p.join()</p>', 'from multiprocessing import Process\r\nimport os\r\n\r\ndef info(title):\r\n    print(title)\r\n    print(\'module name:\', __name__)\r\n    print(\'parent process:\', os.getppid())\r\n    print(\'process id:\', os.getpid())\r\n\r\ndef f(name):\r\n    info(\'function f\')\r\n    print(\'hello\', name)\r\n\r\nif __name__ == \'__main__\':\r\n    info(\'Main line\')\r\n    p = Process(target=f, args=(\'bob\',))\r\n    p.start()\r\n    p.join()', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 18:50:53', 1),
(272, 'Write a Python program to check if two given numbers are Co Prime or not. Return True if two numbers are Co Prime otherwise return false.', 'write-a-python-program-to-check-if-two-given-numbers-are-co-prime-or-not.-return-true-if-two-numbers-are-co-prime-otherwise-return-false.', '<p>def gcd(p,q):</p><p># Create the gcd of two positive integers.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while q != 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p, q = q, p%q</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return p</p><br><p>def is_coprime(x, y):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return gcd(x, y) == 1</p><br><p>print(is_coprime(17, 13))</p><p>print(is_coprime(17, 21))</p><p>print(is_coprime(15, 21))</p><p>print(is_coprime(25, 45))</p>', 'def gcd(p,q):\r\n# Create the gcd of two positive integers.\r\n    while q != 0:\r\n        p, q = q, p%q\r\n    return p\r\n\r\ndef is_coprime(x, y):\r\n    return gcd(x, y) == 1\r\n\r\nprint(is_coprime(17, 13))\r\nprint(is_coprime(17, 21))\r\nprint(is_coprime(15, 21))\r\nprint(is_coprime(25, 45))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 18:57:09', 1),
(273, 'Write a Python program to calculate Euclid\'s totient function for a given integer. Use a primitive method to calculate Euclid\'s totient function.', 'write-a-python-program-to-calculate-euclid\'s-totient-function-for-a-given-integer.-use-a-primitive-method-to-calculate-euclid\'s-totient-function.', '<p>def gcd(p,q):</p><p># Create the gcd of two positive integers.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while q != 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; p, q = q, p%q</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return p</p><br><p>def is_coprime(x, y):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return gcd(x, y) == 1</p><br><p>def phi_func(x):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if x == 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = [y for y in range(1,x) if is_coprime(x,y)]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return len(n)</p><br><p>print(phi_func(10))</p><p>print(phi_func(15))</p><p>print(phi_func(33))</p><br>', 'def gcd(p,q):\r\n# Create the gcd of two positive integers.\r\n    while q != 0:\r\n        p, q = q, p%q\r\n    return p\r\n\r\ndef is_coprime(x, y):\r\n    return gcd(x, y) == 1\r\n\r\ndef phi_func(x):\r\n    if x == 1:\r\n        return 1\r\n    else:\r\n        n = [y for y in range(1,x) if is_coprime(x,y)]\r\n        return len(n)\r\n\r\nprint(phi_func(10))\r\nprint(phi_func(15))\r\nprint(phi_func(33))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:05:49', 1),
(274, 'Write a Python program to create a coded string from a given string, using a specified formula.', 'write-a-python-program-to-create-a-coded-string-from-a-given-string,-using-a-specified-formula.', '<p>def test(str):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return str.translate(str.maketrans(\'PTSHA\', \'90168\'))</p><br><p>str = \"PHP\"</p><p>print(\"Original string: \",str)</p><p>print(\"Coded string: \",test(str))</p><br><p>str = \"JAVASCRIPT\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Coded string: \",test(str))</p>', 'def test(str):\r\n     return str.translate(str.maketrans(\'PTSHA\', \'90168\'))\r\n\r\nstr = \"PHP\"\r\nprint(\"Original string: \",str)\r\nprint(\"Coded string: \",test(str))\r\n\r\nstr = \"JAVASCRIPT\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Coded string: \",test(str))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:08:57', 1),
(275, 'Write a Python program to check if a given string contains only lowercase or uppercase characters.', 'write-a-python-program-to-check-if-a-given-string-contains-only-lowercase-or-uppercase-characters.', '<p>def test(str):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; return str.islower() or str.isupper()</p><br><p>str = \"PHP\"</p><p>print(\"Original string: \",str)</p><p>print(\"Coded string: \",test(str))</p><br><p>str = \"javascript\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Coded string: \",test(str))</p><br><p>str = \"JavaScript\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Coded string: \",test(str))</p><br>', 'def test(str):\r\n     return str.islower() or str.isupper()\r\n\r\nstr = \"PHP\"\r\nprint(\"Original string: \",str)\r\nprint(\"Coded string: \",test(str))\r\n\r\nstr = \"javascript\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Coded string: \",test(str))\r\n\r\nstr = \"JavaScript\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Coded string: \",test(str))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:14:05', 1),
(276, 'Write a Python program to remove the first and last elements from a given string.', 'write-a-python-program-to-remove-the-first-and-last-elements-from-a-given-string.', '<p>def test(str):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return str if len(str) &lt; 3 else str[1:-1]</p><br><p>str = \"PHP\"</p><p>print(\"Original string: \",str)</p><p>print(\"Removing the first and last elements from the said string: \",test(str))</p><br><p>str = \"Python\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Removing the first and last elements from the said string: \",test(str))</p><br><p>str = \"JavaScript\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Removing the first and last elements from the said string: \",test(str))</p><br>', 'def test(str):\r\n     return str if len(str) < 3 else str[1:-1]\r\n\r\nstr = \"PHP\"\r\nprint(\"Original string: \",str)\r\nprint(\"Removing the first and last elements from the said string: \",test(str))\r\n\r\nstr = \"Python\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Removing the first and last elements from the said string: \",test(str))\r\n\r\nstr = \"JavaScript\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Removing the first and last elements from the said string: \",test(str))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:17:45', 1),
(277, 'Write a Python program to check if a given string contains two similar consecutive letters.', 'write-a-python-program-to-check-if-a-given-string-contains-two-similar-consecutive-letters.', '<p>def test(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return any(c1 == c2 for c1, c2 in zip(str1, str1[1:]))</p><br><p>str = \"PHP\"</p><p>print(\"Original string: \",str)</p><p>print(\"Check for consecutive similar letters! \",test(str))</p><br><p>str = \"PHHP\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Check for consecutive similar letters! \",test(str))</p><br><p>str = \"PHPP\"</p><p>print(\"\\nOriginal string: \",str)</p><p>print(\"Check for consecutive similar letters! \",test(str))</p><br>', 'def test(str1):\r\n     return any(c1 == c2 for c1, c2 in zip(str1, str1[1:]))\r\n\r\nstr = \"PHP\"\r\nprint(\"Original string: \",str)\r\nprint(\"Check for consecutive similar letters! \",test(str))\r\n\r\nstr = \"PHHP\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Check for consecutive similar letters! \",test(str))\r\n\r\nstr = \"PHPP\"\r\nprint(\"\\nOriginal string: \",str)\r\nprint(\"Check for consecutive similar letters! \",test(str))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:20:24', 1),
(278, 'Write a Python program to reverse a given string in lower case.', 'write-a-python-program-to-reverse-a-given-string-in-lower-case.', '<p>def test(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return str1[::-1].lower()</p><br><p>str = \"PHP\"</p><p>print(\"Original string:\",str)</p><p>print(\"Reverse the said string in lower case:\",test(str))</p><br><p>str = \"JavaScript\"</p><p>print(\"\\nOriginal string:\",str)</p><p>print(\"Reverse the said string in lower case:\",test(str))</p><br><p>str = \"PHPP\"</p><p>print(\"\\nOriginal string:\",str)</p><p>print(\"Reverse the said string in lower case:\",test(str))</p><br>', 'def test(str1):\r\n     return str1[::-1].lower()\r\n\r\nstr = \"PHP\"\r\nprint(\"Original string:\",str)\r\nprint(\"Reverse the said string in lower case:\",test(str))\r\n\r\nstr = \"JavaScript\"\r\nprint(\"\\nOriginal string:\",str)\r\nprint(\"Reverse the said string in lower case:\",test(str))\r\n\r\nstr = \"PHPP\"\r\nprint(\"\\nOriginal string:\",str)\r\nprint(\"Reverse the said string in lower case:\",test(str))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:22:33', 1),
(279, 'Write a Python program to convert the letters of a given string (same case-upper/lower) into alphabetical order.', 'write-a-python-program-to-convert-the-letters-of-a-given-string-(same-case-upper/lower)-into-alphabetical-order.', '<p>def test(str1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \'\'.join(sorted(str1))</p><br><p>str1 = \"PHP\"</p><p>print(\"Original string:\",str1)</p><p>print(\"Convert the letters of the said string into alphabetical order:\",test(str1))</p><br><p>str1 = \"javascript\"</p><p>print(\"\\nOriginal string:\",str1)</p><p>print(\"Convert the letters of the said string into alphabetical order:\",test(str1))</p><br><p>str1 = \"python\"</p><p>print(\"\\nOriginal string:\",str1)</p><p>print(\"Convert the letters of the said string into alphabetical order:\",test(str1))</p><br>', 'def test(str1):\r\n     return \'\'.join(sorted(str1))\r\n\r\nstr1 = \"PHP\"\r\nprint(\"Original string:\",str1)\r\nprint(\"Convert the letters of the said string into alphabetical order:\",test(str1))\r\n\r\nstr1 = \"javascript\"\r\nprint(\"\\nOriginal string:\",str1)\r\nprint(\"Convert the letters of the said string into alphabetical order:\",test(str1))\r\n\r\nstr1 = \"python\"\r\nprint(\"\\nOriginal string:\",str1)\r\nprint(\"Convert the letters of the said string into alphabetical order:\",test(str1))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:33:33', 1),
(280, 'Write a Python program to check whether the average value of the elements of a given array of numbers is a whole number or not.', 'write-a-python-program-to-check-whether-the-average-value-of-the-elements-of-a-given-array-of-numbers-is-a-whole-number-or-not.', '<p>import array as arr</p><br><p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  return sum(nums) % len(nums) == 0</p><br><p>array_num = arr.array(\'i\', [1, 3, 5, 7, 9])</p><p>print(\"Original array:\")</p><p>for i in range(len(array_num)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(array_num[i], end=\' \')</p><p>print(\"\\nCheck the average value of the elements of the said array is a whole number or not:\\n\",test(array_num))</p><br><p>array_num = arr.array(\'i\', [2, 4, 2, 6, 4, 8])</p><p>print(\"\\nOriginal array:\")</p><p>for i in range(len(array_num)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(array_num[i], end=\' \')</p><p>print(\"\\nCheck the average value of the elements of the said array is a whole number or not:\\n\",test(array_num))</p><br>', 'import array as arr\r\n\r\ndef test(nums):\r\n    return sum(nums) % len(nums) == 0\r\n\r\narray_num = arr.array(\'i\', [1, 3, 5, 7, 9])\r\nprint(\"Original array:\")\r\nfor i in range(len(array_num)):    \r\n    print(array_num[i], end=\' \')\r\nprint(\"\\nCheck the average value of the elements of the said array is a whole number or not:\\n\",test(array_num))\r\n\r\narray_num = arr.array(\'i\', [2, 4, 2, 6, 4, 8])\r\nprint(\"\\nOriginal array:\")\r\nfor i in range(len(array_num)):    \r\n    print(array_num[i], end=\' \')\r\nprint(\"\\nCheck the average value of the elements of the said array is a whole number or not:\\n\",test(array_num))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-07 19:56:03', 1),
(281, 'Write a Python program to remove all vowels from a given string.', 'write-a-python-program-to-remove-all-vowels-from-a-given-string.', '<p>import re</p><br><p>def test(text):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return re.sub(r\'[aeiou]+\', \'\', text, flags=re.IGNORECASE)</p><br><p>text = \"Python\";</p><p>print(\"Original string:\",text)</p><p>print(\"After removing all the vowels from the said string: \" + test(text))</p><br><p>text = \"C Sharp\"</p><p>print(\"\\nOriginal string:\",text)</p><p>print(\"After removing all the vowels from the said string: \" + test(text))</p><br><p>text = \"JavaScript\"</p><p>print(\"\\nOriginal string:\",text)</p><p>print(\"After removing all the vowels from the said string: \" + test(text))</p><br>', 'import re\r\n\r\ndef test(text):\r\n    return re.sub(r\'[aeiou]+\', \'\', text, flags=re.IGNORECASE)\r\n\r\ntext = \"Python\";\r\nprint(\"Original string:\",text)\r\nprint(\"After removing all the vowels from the said string: \" + test(text))\r\n\r\ntext = \"C Sharp\"\r\nprint(\"\\nOriginal string:\",text)\r\nprint(\"After removing all the vowels from the said string: \" + test(text))\r\n\r\ntext = \"JavaScript\"\r\nprint(\"\\nOriginal string:\",text)\r\nprint(\"After removing all the vowels from the said string: \" + test(text))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 07:47:42', 1),
(282, 'Write a Python program to get the index number of all lower case letters in a given string.', 'write-a-python-program-to-get-the-index-number-of-all-lower-case-letters-in-a-given-string.', '<p>def test(text):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return [x for x in range(len(text)) if text[x].islower()]</p><br><p>text = \"Python\";</p><p>print(\"Original string:\",text)</p><p>print(\"Indices of all lower case letters of the said string:\\n\",test(text))</p><br><p>text = \"JavaScript\";</p><p>print(\"Original string:\",text)</p><p>print(\"Indices of all lower case letters of the said string:\\n\",test(text))</p><br><p>text = \"PHP\";</p><p>print(\"Original string:\",text)</p><p>print(\"Indices of all lower case letters of the said string:\\n\",test(text))</p><br>', 'def test(text):\r\n    return [x for x in range(len(text)) if text[x].islower()]\r\n\r\ntext = \"Python\";\r\nprint(\"Original string:\",text)\r\nprint(\"Indices of all lower case letters of the said string:\\n\",test(text))\r\n\r\ntext = \"JavaScript\";\r\nprint(\"Original string:\",text)\r\nprint(\"Indices of all lower case letters of the said string:\\n\",test(text))\r\n\r\ntext = \"PHP\";\r\nprint(\"Original string:\",text)\r\nprint(\"Indices of all lower case letters of the said string:\\n\",test(text))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 07:51:44', 1),
(283, 'Write a Python program to check whether a given month and year contains a Monday 13th.', 'write-a-python-program-to-check-whether-a-given-month-and-year-contains-a-monday-13th.', '<p>from datetime import date</p><br><p>def test(month, year):&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return str(date(year,month,13).strftime(\"%A\")==\'Monday\')</p><br><p>month = 11;</p><p>year = 2022;</p><p>print(\"Month No.: \", month, \" Year: \", year);</p><p>print(\"Check whether the said month and year contains a Monday 13th.: \" + test(month, year));</p><br><p>month = 6;</p><p>year = 2022;</p><p>print(\"\\nMonth No.: \", month, \" Year: \", year);</p><p>print(\"Check whether the said month and year contains a Monday 13th.: \" + test(month, year));</p><br>', 'from datetime import date\r\n\r\ndef test(month, year): \r\n    return str(date(year,month,13).strftime(\"%A\")==\'Monday\')\r\n\r\nmonth = 11;\r\nyear = 2022;            \r\nprint(\"Month No.: \", month, \" Year: \", year);\r\nprint(\"Check whether the said month and year contains a Monday 13th.: \" + test(month, year));\r\n\r\nmonth = 6;\r\nyear = 2022;            \r\nprint(\"\\nMonth No.: \", month, \" Year: \", year);\r\nprint(\"Check whether the said month and year contains a Monday 13th.: \" + test(month, year));', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 07:58:34', 1),
(284, 'Write a Python program to count the number of zeros and ones in the binary representation of a given integer.', 'write-a-python-program-to-count-the-number-of-zeros-and-ones-in-the-binary-representation-of-a-given-integer.', '<p>def test(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; ones =&nbsp; bin(num). replace(\"0b\", \"\").count(\'1\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; zeros = bin(num). replace(\"0b\", \"\").count(\'0\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \"Number of zeros: \" + str(zeros) + \", Number of ones: \" + str(ones);</p><br><p>n = 12;</p><p>print(\"Original number: \",n);</p><p>print(\"Number of ones and zeros in the binary representation of the said number:\");</p><p>print(test(n));</p><br><p>n = 1234;</p><p>print(\"\\nOriginal number: \",n);</p><p>print(\"Number of ones and zeros in the binary representation of the said number:\");</p><p>print(test(n));</p><br>', 'def test(num):\r\n    ones =  bin(num). replace(\"0b\", \"\").count(\'1\')\r\n    zeros = bin(num). replace(\"0b\", \"\").count(\'0\')\r\n    return \"Number of zeros: \" + str(zeros) + \", Number of ones: \" + str(ones);\r\n\r\nn = 12; \r\nprint(\"Original number: \",n);\r\nprint(\"Number of ones and zeros in the binary representation of the said number:\");\r\nprint(test(n));\r\n\r\nn = 1234;\r\nprint(\"\\nOriginal number: \",n);\r\nprint(\"Number of ones and zeros in the binary representation of the said number:\");\r\nprint(test(n));', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:04:03', 1),
(285, 'Write a Python program to find all the factors of a given natural number.', 'write-a-python-program-to-find-all-the-factors-of-a-given-natural-number.', '<p>from functools import reduce</p><br><p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return set(reduce(list.__add__,&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))</p><br><p>n = 1</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Factors of the said number:\",test(n))</p><br><p>n = 12</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Factors of the said number:\",test(n))</p><br><p>n = 100</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Factors of the said number:\",test(n))</p><br>', 'from functools import reduce\r\n\r\ndef test(n):    \r\n    return set(reduce(list.__add__, \r\n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\r\n\r\nn = 1\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Factors of the said number:\",test(n))\r\n\r\nn = 12\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Factors of the said number:\",test(n))\r\n\r\nn = 100\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Factors of the said number:\",test(n))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:19:09', 1),
(286, 'Write a Python program to compute the sum of the negative and positive numbers in an array of integers and display the largest sum.', 'write-a-python-program-to-compute-the-sum-of-the-negative-and-positive-numbers-in-an-array-of-integers-and-display-the-largest-sum.', '<p>def test(lst):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; pos_sum = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; neg_sum = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for n in lst:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if n &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pos_sum += n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elif n &lt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; neg_sum += n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return max(pos_sum, neg_sum, key=abs)</p><br><p>nums = { 0, -10, -11, -12, -13, -14, 15, 16, 17, 18, 19, 20 };</p><p>print(\"Original array elements:\");</p><p>print(nums)</p><p>print(\"Largest sum - Positive/Negative numbers of the said array: \", test(nums));</p><br><p>nums = { -11, -22, -44, 0, 3, 4 , 5, 9 };</p><p>print(\"\\nOriginal array elements:\");</p><p>print(nums)</p><p>print(\"Largest sum - Positive/Negative numbers of the said array: \", test(nums));</p><br>', 'def test(lst):\r\n    pos_sum = 0\r\n    neg_sum = 0\r\n    for n in lst:\r\n       if n > 0:\r\n          pos_sum += n\r\n       elif n < 0:\r\n          neg_sum += n\r\n    return max(pos_sum, neg_sum, key=abs)\r\n\r\nnums = { 0, -10, -11, -12, -13, -14, 15, 16, 17, 18, 19, 20 };\r\nprint(\"Original array elements:\");\r\nprint(nums)\r\nprint(\"Largest sum - Positive/Negative numbers of the said array: \", test(nums));\r\n\r\nnums = { -11, -22, -44, 0, 3, 4 , 5, 9 };\r\nprint(\"\\nOriginal array elements:\");\r\nprint(nums)\r\nprint(\"Largest sum - Positive/Negative numbers of the said array: \", test(nums));', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:30:38', 1),
(287, 'Write a Python program that alternates the case of each letter in a given string, with the first letter in the string being uppercase.', 'write-a-python-program-that-alternates-the-case-of-each-letter-in-a-given-string,-with-the-first-letter-in-the-string-being-uppercase.', '<p>def test(txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result_str = \"\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; s = True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in txt:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result_str += i.upper() if s else i.lower()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if i.isalpha():</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = not s</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return result_str</p><br><p>str1 = \"Python Exercises\";</p><p>print(\"Original string: \", str1);</p><p>print(\"After alternating the case of each letter of the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"C# is used to develop web apps, desktop apps, mobile apps, games and much more.\";</p><p>print(\"\\nOriginal string: \", str1);</p><p>print(\"After alternating the case of each letter of the said string:\")</p><p>print(test(str1))</p><br>', 'def test(txt):\r\n    result_str = \"\"\r\n    s = True\r\n    for i in txt:\r\n        result_str += i.upper() if s else i.lower()\r\n        if i.isalpha():\r\n            s = not s\r\n    return result_str\r\n\r\nstr1 = \"Python Exercises\";\r\nprint(\"Original string: \", str1);\r\nprint(\"After alternating the case of each letter of the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"C# is used to develop web apps, desktop apps, mobile apps, games and much more.\";\r\nprint(\"\\nOriginal string: \", str1);\r\nprint(\"After alternating the case of each letter of the said string:\")\r\nprint(test(str1))', 4, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:43:27', 1),
(288, 'Write a Python program that calculates the Least Common Multiple (LCM) of more than two numbers. The numbers should be taken from a given list of positive integers.', 'write-a-python-program-that-calculates-the-least-common-multiple-(lcm)-of-more-than-two-numbers.-the-numbers-should-be-taken-from-a-given-list-of-positive-integers.', '<p>from functools import reduce</p><br><p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return reduce(lambda x,y:lcm(x,y),nums)</p><br><p>def gcd(a, b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while b:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a%b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return a</p><br><p>def lcm(a, b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return a*b // gcd(a, b)</p><br><p>nums = [ 4, 6, 8 ]</p><p>print(\"Original list elements:\")</p><p>print(nums)</p><p>print(\"LCM of the numbers of the said array of positive integers: \", test(nums))</p><br><p>nums = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</p><p>print(\"\\nOriginal list elements:\")</p><p>print(nums)</p><p>print(\"LCM of the numbers of the said array of positive integers: \", test(nums))</p><br><p>nums = [ 48, 72, 108&nbsp; ]</p><p>print(\"\\nOriginal list elements:\")</p><p>print(nums)</p><p>print(\"LCM of the numbers of the said array of positive integers: \", test(nums))</p><br>', 'from functools import reduce\r\n\r\ndef test(nums):\r\n    return reduce(lambda x,y:lcm(x,y),nums)\r\n\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a%b\r\n    return a\r\n\r\ndef lcm(a, b):\r\n    return a*b // gcd(a, b)\r\n\r\nnums = [ 4, 6, 8 ]\r\nprint(\"Original list elements:\")\r\nprint(nums)\r\nprint(\"LCM of the numbers of the said array of positive integers: \", test(nums))\r\n\r\nnums = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\r\nprint(\"\\nOriginal list elements:\")\r\nprint(nums)\r\nprint(\"LCM of the numbers of the said array of positive integers: \", test(nums))\r\n\r\nnums = [ 48, 72, 108  ]\r\nprint(\"\\nOriginal list elements:\")\r\nprint(nums)\r\nprint(\"LCM of the numbers of the said array of positive integers: \", test(nums))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:56:26', 1),
(289, 'Write a Python program to reverse all words of odd lengths.', 'write-a-python-program-to-reverse-all-words-of-odd-lengths.', '<p>def test(txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \' \'.join(i[::-1] if len(i)%2 else i for i in txt.split())</p><br><p>text = \"The quick brown fox jumps over the lazy dog\"</p><p>print(\"Original string:\")</p><p>print(text)</p><p>print(\"Reverse all the words of the said string which have odd length:\")</p><p>print(test(text))</p><br><p>text = \"Python Exercises\"</p><p>print(\"\\nOriginal string:\")</p><p>print(text)</p><p>print(\"Reverse all the words of the said string which have odd length:\")</p><p>print(test(text))</p><br>', 'def test(txt):\r\n    return \' \'.join(i[::-1] if len(i)%2 else i for i in txt.split())\r\n \r\ntext = \"The quick brown fox jumps over the lazy dog\"\r\nprint(\"Original string:\")\r\nprint(text)\r\nprint(\"Reverse all the words of the said string which have odd length:\")\r\nprint(test(text))\r\n\r\ntext = \"Python Exercises\"\r\nprint(\"\\nOriginal string:\")\r\nprint(text)\r\nprint(\"Reverse all the words of the said string which have odd length:\")\r\nprint(test(text))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 08:59:12', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(290, 'Write a Python program to find the longest common ending between two given strings.', 'write-a-python-program-to-find-the-longest-common-ending-between-two-given-strings.', '<p>def test(str1, str2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(len(str2)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while str2[i:] in str1 and str2[-1]==str1[-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return str2[i:]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \"\"</p><br><p>str1 = \"running\";</p><p>str2 = \"ruminating\";</p><p>print(\"Original strings: \" + str1 + \"&nbsp; \" + str2);</p><p>print(\"Common ending between said two strings: \" + test(str1, str2));</p><br><p>str1 = \"thisisatest\";</p><p>str2 = \"testing123testing\";</p><p>print(\"\\nOriginal strings: \" + str1 + \"&nbsp; \" + str2);</p><p>print(\"Common ending between said two strings: \" + test(str1, str2));</p><br>', 'def test(str1, str2):\r\n    for i in range(len(str2)):\r\n        while str2[i:] in str1 and str2[-1]==str1[-1]:\r\n            return str2[i:]\r\n    return \"\"\r\n\r\nstr1 = \"running\";\r\nstr2 = \"ruminating\";\r\nprint(\"Original strings: \" + str1 + \"  \" + str2);\r\nprint(\"Common ending between said two strings: \" + test(str1, str2));\r\n\r\nstr1 = \"thisisatest\";\r\nstr2 = \"testing123testing\";\r\nprint(\"\\nOriginal strings: \" + str1 + \"  \" + str2);\r\nprint(\"Common ending between said two strings: \" + test(str1, str2));', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 09:04:11', 1),
(291, 'Write a Python program to reverse the binary representation of a given number and convert the reversed binary number into an integer.', 'write-a-python-program-to-reverse-the-binary-representation-of-a-given-number-and-convert-the-reversed-binary-number-into-an-integer.', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return int(bin(n)[::-1][:-2], 2)</p><br><p>n = 13</p><p>print(\"Original number: \", n);</p><p>print(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));</p><br><p>n = 145</p><p>print(\"Original number: \", n);</p><p>print(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));</p><br><p>n = 1342</p><p>print(\"Original number: \", n);</p><p>print(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));</p><br>', 'def test(n):\r\n    return int(bin(n)[::-1][:-2], 2)\r\n\r\nn = 13\r\nprint(\"Original number: \", n);\r\nprint(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));\r\n\r\nn = 145\r\nprint(\"Original number: \", n);\r\nprint(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));\r\n\r\nn = 1342\r\nprint(\"Original number: \", n);\r\nprint(\"Reverse the binary representation of the said integer and convert it into an integer:\\n\",test(n));', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:16:59', 1),
(292, 'Write a Python program to find the closest palindrome number to a given integer. If there are two palindrome numbers in absolute distance return the smaller number.', 'write-a-python-program-to-find-the-closest-palindrome-number-to-a-given-integer.-if-there-are-two-palindrome-numbers-in-absolute-distance-return-the-smaller-number.', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x = n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y = n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if str(x) == str(x)[::-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x -=&nbsp; 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if str(y) == str(y)[::-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return y</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return int(bin(n)[::-1][:-2], 2)</p><br><p>n = 120;</p><p>print(\"Original number: \", n);</p><p>print(\"Closest Palindrome number of the said number: \",test(n));</p><br><p>n = 321;</p><p>print(\"Original number: \", n);</p><p>print(\"Closest Palindrome number of the said number: \",test(n));</p><br><p>n = 43;</p><p>print(\"Original number: \", n);</p><p>print(\"Closest Palindrome number of the said number: \",test(n));</p><br><p>n = 1234;</p><p>print(\"Original number: \", n);</p><p>print(\"Closest Palindrome number of the said number: \",test(n));</p><br>', 'def test(n):\r\n    x = n\r\n    y = n\r\n    while True:\r\n        if str(x) == str(x)[::-1]:\r\n            return x\r\n        x -=  1\r\n        if str(y) == str(y)[::-1]:\r\n            return y\r\n        y += 1\r\n    return int(bin(n)[::-1][:-2], 2)\r\n\r\nn = 120;\r\nprint(\"Original number: \", n);\r\nprint(\"Closest Palindrome number of the said number: \",test(n));\r\n\r\nn = 321;\r\nprint(\"Original number: \", n);\r\nprint(\"Closest Palindrome number of the said number: \",test(n));\r\n\r\nn = 43;\r\nprint(\"Original number: \", n);\r\nprint(\"Closest Palindrome number of the said number: \",test(n));\r\n\r\nn = 1234;\r\nprint(\"Original number: \", n);\r\nprint(\"Closest Palindrome number of the said number: \",test(n));', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:24:20', 1),
(293, 'Write a Python program to convert all items in a given list to float values.', 'write-a-python-program-to-convert-all-items-in-a-given-list-to-float-values.', '<p>nums = [\'0.49\', \'0.54\', \'0.54\', \'0.54\', \'0.54\', \'0.54\', \'0.55\', \'0.54\', \'0.54\',&nbsp; \'0.54\', \'0.55\', \'0.55\', \'0.55\', \'0.54\', \'0.55\', \'0.55\', \'0.54\', \'0.55\', \'0.55\', \'0.54\']</p><br><p>print(\"Original list:\")</p><p>print(nums)</p><br><p>print(\"\\nList of Floats:\")</p><p>nums_of_floats = []</p><br><p>for item in nums:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; nums_of_floats.append(float(item))</p><p>print(nums_of_floats)</p><br>', 'nums = [\'0.49\', \'0.54\', \'0.54\', \'0.54\', \'0.54\', \'0.54\', \'0.55\', \'0.54\', \'0.54\',  \'0.54\', \'0.55\', \'0.55\', \'0.55\', \'0.54\', \'0.55\', \'0.55\', \'0.54\', \'0.55\', \'0.55\', \'0.54\']\r\n\r\nprint(\"Original list:\")\r\nprint(nums)\r\n\r\nprint(\"\\nList of Floats:\")\r\nnums_of_floats = []\r\n\r\nfor item in nums:\r\n    nums_of_floats.append(float(item))\r\nprint(nums_of_floats)', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:34:18', 1),
(294, 'Write a Python program to get the domain name using PTR DNS records from a given IP address.', 'write-a-python-program-to-get-the-domain-name-using-ptr-dns-records-from-a-given-ip-address.', '<p>def get_domain_name(ip_address):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; import socket</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result=socket.gethostbyaddr(ip_address)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return list(result)[0]</p><br><p>print(\"Domain name using PTR DNS:\")</p><p>print(get_domain_name(\"8.8.8.8\"))</p><p>print(get_domain_name(\"13.251.106.90\"))</p><p>print(get_domain_name(\"8.8.4.4\"))</p><p>print(get_domain_name(\"23.23.212.126\"))</p>', 'def get_domain_name(ip_address):\r\n   import socket\r\n   result=socket.gethostbyaddr(ip_address)\r\n   return list(result)[0]\r\n\r\nprint(\"Domain name using PTR DNS:\")\r\nprint(get_domain_name(\"8.8.8.8\"))\r\nprint(get_domain_name(\"13.251.106.90\"))\r\nprint(get_domain_name(\"8.8.4.4\"))\r\nprint(get_domain_name(\"23.23.212.126\"))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:37:43', 1),
(295, 'Write a Python program to check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones of the same length in a given string. Return True/False.', 'write-a-python-program-to-check-if-every-consecutive-sequence-of-zeroes-is-followed-by-a-consecutive-sequence-of-ones-of-the-same-length-in-a-given-string.-return-true/false.', '<p>import re</p><p>def test(txt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return [len(i) for i in re.findall(\'0+\',txt)]==[len(i) for i in re.findall(\'1+\',txt)]</p><br><p>str1 = \"001011\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"01010101\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"00\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"000111000111\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"00011100011\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br><p>str1 = \"0011101\"</p><p>print(\"\\nOriginal sequence:\",str1)</p><p>print(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")</p><p>print(test(str1))</p><br>', 'import re\r\ndef test(txt):\r\n    return [len(i) for i in re.findall(\'0+\',txt)]==[len(i) for i in re.findall(\'1+\',txt)]\r\n\r\nstr1 = \"001011\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"01010101\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"00\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"000111000111\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"00011100011\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))\r\n\r\nstr1 = \"0011101\"\r\nprint(\"\\nOriginal sequence:\",str1)\r\nprint(\"Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:\")\r\nprint(test(str1))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:44:42', 1),
(296, 'Write a Python program to print Emojis using Unicode characters or CLDR (Common Locale Data Repository) short names.', 'write-a-python-program-to-print-emojis-using-unicode-characters-or-cldr-(common-locale-data-repository)-short-names.', '<p>print(\"Smiling face with heart-eyes:\")</p><p>print(\"\\U0001F60D\")</p><p>print(\"Unamused face:\")</p><p>print(\"\\U0001F612\")</p><p>print(\"Beaming face with smiling eyes:\")</p><p>print(\"\\U0001F601\")</p><p>print(\"Grinning face with sweat:\")</p><p>print(\"\\U0001F605\")</p><p>print(\"Face with tears of joy:\")</p><p>print(\"\\U0001F602\")</p><p>print(\"Slightly smiling face:\")</p><p>print(\"\\U0001F642\")</p><p>print(\"Smiling face with halo:\")</p><p>print(\"\\U0001F607\")</p><p>print(\"Zipper-mouth face:\")</p><p>print(\"\\U0001F910\")</p><p>print(\"Grinning face:\")</p><p>print(\"\\U0001F600\")</p><p>print(\"Rolling on the floor laughing:\")</p><p>print(\"\\U0001F923\")</p><br>', 'print(\"Smiling face with heart-eyes:\")\r\nprint(\"\\U0001F60D\")\r\nprint(\"Unamused face:\")\r\nprint(\"\\U0001F612\")\r\nprint(\"Beaming face with smiling eyes:\")\r\nprint(\"\\U0001F601\")\r\nprint(\"Grinning face with sweat:\")\r\nprint(\"\\U0001F605\")\r\nprint(\"Face with tears of joy:\")\r\nprint(\"\\U0001F602\")\r\nprint(\"Slightly smiling face:\")\r\nprint(\"\\U0001F642\")\r\nprint(\"Smiling face with halo:\")\r\nprint(\"\\U0001F607\")\r\nprint(\"Zipper-mouth face:\")\r\nprint(\"\\U0001F910\")\r\nprint(\"Grinning face:\")\r\nprint(\"\\U0001F600\")\r\nprint(\"Rolling on the floor laughing:\")\r\nprint(\"\\U0001F923\")', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:52:22', 1),
(297, 'Write a Python program to convert integer to string.', 'write-a-python-program-to-convert-integer-to-string.', '<p>language = \"Python\"</p><p>version = 3.6</p><br><p>print(\'Language: \' + language + \',\' + \' Version: \' + str(version))</p>', 'language = \"Python\"\r\nversion = 3.6\r\n\r\nprint(\'Language: \' + language + \',\' + \' Version: \' + str(version))', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 10:54:08', 1),
(298, 'Write a Python program to find the largest and smallest digits of a given number.', 'write-a-python-program-to-find-the-largest-and-smallest-digits-of-a-given-number.', '<p>def Largest_Smallest_digit(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; largest_digit = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; smallest_digit = 9</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while (n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; digit = n % 10</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; # largest digit</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; largest_digit = max(digit, largest_digit)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # smallest digit</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; smallest_digit = min(digit, smallest_digit)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = n // 10</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return largest_digit, smallest_digit</p><br><p>n = 9387422</p><p>print(\"Original Number:\", n)</p><p>result = Largest_Smallest_digit(n)</p><p>print(\"Largest Digit of the said number:\", result[0])</p><p>print(\"Smallest Digit of the said number:\", result[1])</p><br><p>n = 500</p><p>print(\"\\nOriginal Number:\", n)</p><p>result = Largest_Smallest_digit(n)</p><p>print(\"Largest Digit of the said number:\", result[0])</p><p>print(\"Smallest Digit of the said number:\", result[1])</p><br><p>n = 231548</p><p>print(\"\\nOriginal Number:\", n)</p><p>result = Largest_Smallest_digit(n)</p><p>print(\"Largest Digit of the said number:\", result[0])</p><p>print(\"Smallest Digit of the said number:\", result[1])</p><br>', 'def Largest_Smallest_digit(n):\r\n    largest_digit = 0\r\n    smallest_digit = 9\r\n    while (n):\r\n        digit = n % 10\r\n        # largest digit\r\n        largest_digit = max(digit, largest_digit)\r\n        # smallest digit\r\n        smallest_digit = min(digit, smallest_digit)\r\n        n = n // 10\r\n    return largest_digit, smallest_digit\r\n\r\nn = 9387422\r\nprint(\"Original Number:\", n)\r\nresult = Largest_Smallest_digit(n)\r\nprint(\"Largest Digit of the said number:\", result[0])\r\nprint(\"Smallest Digit of the said number:\", result[1])\r\n\r\nn = 500\r\nprint(\"\\nOriginal Number:\", n)\r\nresult = Largest_Smallest_digit(n)\r\nprint(\"Largest Digit of the said number:\", result[0])\r\nprint(\"Smallest Digit of the said number:\", result[1])\r\n\r\nn = 231548\r\nprint(\"\\nOriginal Number:\", n)\r\nresult = Largest_Smallest_digit(n)\r\nprint(\"Largest Digit of the said number:\", result[0])\r\nprint(\"Smallest Digit of the said number:\", result[1])', 2, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 11:14:39', 1),
(299, 'A Python list contains two positive integers. Write a Python program to check whether the cube root of the first number is equal to the square root of the second number.', 'a-python-list-contains-two-positive-integers.-write-a-python-program-to-check-whether-the-cube-root-of-the-first-number-is-equal-to-the-square-root-of-the-second-number.', '<p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x = nums[0]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y = nums[1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; t = y**0.5</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if(x == t*t*t):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</p><br><p>nums = [8, 4]</p><p>print(\"Original list of positive numbers:\")</p><p>print(nums)</p><p>print(test(nums))</p><p>print(\"Check square root and cube root of the said numbers:\")</p><br><p>nums = [64, 16]</p><p>print(\"Original list of positive numbers:\")</p><p>print(nums)</p><p>print(\"Check square root and cube root of the said numbers:\")</p><p>print(test(nums))</p><br><p>nums = [64, 36]</p><p>print(\"Original list of positive numbers:\")</p><p>print(nums)</p><p>print(\"Check square root and cube root of the said numbers:\")</p><p>print(test(nums))</p><br>', 'def test(nums):\r\n    x = nums[0]\r\n    y = nums[1]\r\n    t = y**0.5\r\n    if(x == t*t*t):\r\n        return True\r\n    else:\r\n        return False\r\n         \r\nnums = [8, 4]\r\nprint(\"Original list of positive numbers:\")\r\nprint(nums)\r\nprint(\"Check square root and cube root of the said numbers:\")\r\nprint(test(nums))\r\n\r\nnums = [64, 16]\r\nprint(\"Original list of positive numbers:\")\r\nprint(nums)\r\nprint(\"Check square root and cube root of the said numbers:\")\r\nprint(test(nums))\r\n\r\nnums = [64, 36]\r\nprint(\"Original list of positive numbers:\")\r\nprint(nums)\r\nprint(\"Check square root and cube root of the said numbers:\")\r\nprint(test(nums))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 11:24:07', 1),
(300, 'A Python list contains three positive integers. Write a Python program to check whether the sum of the digits in each number is equal or not. Return true otherwise false.', 'a-python-list-contains-three-positive-integers.-write-a-python-program-to-check-whether-the-sum-of-the-digits-in-each-number-is-equal-or-not.-return-true-otherwise-false.', '<p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return nums[0] % 9 == nums[1] % 9 == nums[2] % 9&nbsp;</p><br><p>nums = [13, 4, 22]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Check sum of the digits in each number of the said list is equal or not!\")</p><p>print(test(nums))</p><br><p>nums = [-13, 4, 22]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Check sum of the digits in each number of the said list is equal or not!\")</p><p>print(test(nums))</p><br><p>nums = [45, 63, 90]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Check sum of the digits in each number of the said list is equal or not!\")</p><p>print(test(nums))</p><br>', 'def test(nums):\r\n    return nums[0] % 9 == nums[1] % 9 == nums[2] % 9 \r\n\r\nnums = [13, 4, 22]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Check sum of the digits in each number of the said list is equal or not!\")\r\nprint(test(nums))\r\n\r\nnums = [-13, 4, 22]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Check sum of the digits in each number of the said list is equal or not!\")\r\nprint(test(nums))\r\n\r\nnums = [45, 63, 90]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Check sum of the digits in each number of the said list is equal or not!\")\r\nprint(test(nums))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 11:28:33', 1),
(301, 'A Python list contains some positive integers. Write a Python program to count the numbers that are greater than the previous number on the list.', 'a-python-list-contains-some-positive-integers.-write-a-python-program-to-count-the-numbers-that-are-greater-than-the-previous-number-on-the-list.', '<p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; ctr = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(1,len(nums)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if nums[i] &gt; nums[i-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctr += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return ctr</p><br><p>nums = [1, 4, 7, 9, 11, 5]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Count the numbers of the said list that are greater than the previous number!\")</p><p>print(test(nums))</p><br><p>nums = [1, 3, 3, 2, 2]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Count the numbers of the said list that are greater than the previous number!\")</p><p>print(test(nums))</p><br><p>nums = [4, 3, 2, 1]</p><p>print(\"Original list of numbers:\", nums)</p><p>print(\"Count the numbers of the said list that are greater than the previous number!\")</p><p>print(test(nums))</p><br>', 'def test(nums):\r\n    ctr = 0\r\n    for i in range(1,len(nums)):\r\n        if nums[i] > nums[i-1]:\r\n            ctr += 1\r\n    return ctr\r\n\r\nnums = [1, 4, 7, 9, 11, 5]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Count the numbers of the said list that are greater than the previous number!\")\r\nprint(test(nums))\r\n\r\nnums = [1, 3, 3, 2, 2]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Count the numbers of the said list that are greater than the previous number!\")\r\nprint(test(nums))\r\n\r\nnums = [4, 3, 2, 1]\r\nprint(\"Original list of numbers:\", nums)\r\nprint(\"Count the numbers of the said list that are greater than the previous number!\")\r\nprint(test(nums))', 0, 0, NULL, '2023-03-26 06:49:32', '2023-08-08 17:38:12', 1),
(302, 'Write a Python program that takes a positive integer and creates an N x N square filled with the integer N. Display the N x N square.', 'write-a-python-program-that-takes-a-positive-integer-and-creates-an-n-x-n-square-filled-with-the-integer-n.-display-the-n-x-n-square.', '<p>def test(N):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(N):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.append([N]*N)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return result</p><br><p>N = int(input(\"Input an integer : \"))</p><p>print(test(N))</p>', 'def test(N):\r\n    result = []\r\n    for i in range(N):\r\n        result.append([N]*N)\r\n    return result\r\n\r\n#Input an integer \r\nN = int(input( ))\r\nprint(test(N))', 6, 1, NULL, '2023-03-26 06:49:32', '2023-08-08 17:44:52', 1),
(303, 'Write a Python program that takes a positive integer and calculates the cube root of the number until the number is less than three. Count the number of steps to complete the task.', 'write-a-python-program-that-takes-a-positive-integer-and-calculates-the-cube-root-of-the-number-until-the-number-is-less-than-three.-count-the-number-of-steps-to-complete-the-task.', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; ctr = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while n &gt;= 3:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = n ** (1./3.)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctr = ctr + 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \'Not a positive number!\' if n &lt; 0 else ctr</p><br><p>n= int(input(\"Input a positive integer:\"))</p><p>print(test(n))</p><br>', 'def test(n):\r\n    ctr = 0\r\n    while n >= 3:\r\n        n =  n ** (1./3.)\r\n        ctr = ctr + 1\r\n    return \'Not a positive number!\' if n < 0 else ctr\r\n\r\n#Input a positive integer\r\nn= int(input( ))\r\nprint(test(n))', 4, 1, NULL, '2023-03-26 06:49:32', '2023-08-08 17:54:42', 1),
(304, 'Write a Python program to convert degrees to radians.', 'write-a-python-program-to-convert-degrees-to-radians', '<p>pi=22/7</p><p>degree = float(input(\"Input degrees: \"))</p><br><p>radian = degree*(pi/180)</p><br><p>print(radian)</p><br>', 'pi=22/7\r\n#Input degrees\r\ndegree = float(input( ))\r\n\r\nradian = degree*(pi/180)\r\n\r\nprint(radian)', 2, 1, NULL, '2023-04-03 20:37:22', '2023-08-08 17:59:45', 1),
(305, 'Write a Python program to convert radians to degrees.', 'write-a-python-program-to-convert-radians-to-degrees', '<p>pi=22/7</p><p>radian = float(input(\"Input radians: \"))</p><br><p>degree = radian*(180/pi)</p><br><p>print(degree)</p><br>', 'pi=22/7\r\n#Input radians\r\nradian = float(input( ))\r\n\r\ndegree = radian*(180/pi)\r\n\r\nprint(degree)', 0, 1, NULL, '2023-04-03 20:38:57', '2023-08-08 18:04:21', 1),
(306, 'Write a Python program to calculate the area of a trapezoid.', 'write-a-python-program-to-calculate-the-area-of-a-trapezoid', '<p>height = float(input(\"Height of trapezoid: \"))</p><p>base_1 = float(input(\'Base one value: \'))</p><p>base_2 = float(input(\'Base two value: \'))</p><br><p>area = ((base_1 + base_2) / 2) * height</p><br><p>print(\"Area is:\", area)</p><br>', '#Height of trapezoid\r\nheight = float(input( ))\r\n#Base one value\r\nbase_1 = float(input( ))\r\n#Base two value\r\nbase_2 = float(input( ))\r\n\r\narea = ((base_1 + base_2) / 2) * height\r\n\r\nprint(\"Area is:\", area)', 2, 1, NULL, '2023-04-03 20:42:30', '2023-08-08 18:09:32', 1),
(307, 'Write a Python program to calculate the area of a parallelogram.', 'write-a-python-program-to-calculate-the-area-of-a-parallelogram', '<p>base = float(input(\'Length of base: \'))</p><p>height = float(input(\'Measurement of height: \'))</p><br><p>area = base * height</p><br><p>print(\"Area is: \", area)</p><br>', '#Length of base\r\nbase = float(input( ))\r\n#Measurement of height\r\nheight = float(input( ))\r\n\r\narea = base * height\r\n\r\nprint(\"Area is: \", area)', 2, 1, NULL, '2023-04-03 20:43:06', '2023-08-08 18:11:45', 1),
(308, 'Write a Python program to calculate the surface volume and area of a cylinder.', 'write-a-python-program-to-calculate-the-surface-volume-and-area-of-a-cylinder', '<p>pi=22/7</p><p>height = float(input(\'Height of cylinder: \'))</p><p>radian = float(input(\'Radius of cylinder: \'))</p><br><p>volume = pi * radian * radian * height</p><br><p>sur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)</p><br><p>print(\"Volume is: \", volume)</p><p>print(\"Surface Area is: \", sur_area)</p><br>', 'pi=22/7\r\n#Height of cylinder\r\nheight = float(input( ))\r\n#Radius of cylinder\r\nradian = float(input( ))\r\n\r\nvolume = pi * radian * radian * height\r\n\r\nsur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)\r\n\r\nprint(\"Volume is: \", volume)\r\nprint(\"Surface Area is: \", sur_area)', 2, 1, NULL, '2023-04-03 20:44:14', '2023-08-08 18:19:06', 1),
(309, 'Write a Python program to calculate the surface volume and area of a sphere.', 'write-a-python-program-to-calculate-the-surface-volume-and-area-of-a-sphere', '<p>pi=22/7</p><p>radian = float(input(\'Radius of sphere: \'))</p><br><p>sur_area = 4 * pi * radian **2</p><br><p>volume = (4/3) * (pi * radian ** 3)</p><br><p>print(\"Surface Area is: \", sur_area)</p><p>print(\"Volume is: \", volume)</p><br>', 'pi=22/7\r\n#Radius of sphere\r\nradian = float(input( ))\r\n\r\nsur_area = 4 * pi * radian **2\r\n\r\nvolume = (4/3) * (pi * radian ** 3)\r\n\r\nprint(\"Surface Area is: \", sur_area)\r\nprint(\"Volume is: \", volume)', 2, 1, NULL, '2023-04-03 20:46:05', '2023-08-08 18:21:06', 1),
(310, 'Write a Python program to calculate the arc length of an angle.', 'write-a-python-program-to-calculate-the-arc-length-of-an-angle', '<p>pi=22/7</p><p>diameter = float(input(\'Diameter of circle: \'))</p><p>angle = float(input(\'angle measure: \'))</p><br><p>if angle &gt;= 360:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Angle is not possible\")</p><br><p>arc_length = (pi*diameter) * (angle/360)</p><br><p>print(\"Arc Length is: \", arc_length)</p><br>', 'pi=22/7\r\n#Diameter of circle\r\ndiameter = float(input( ))\r\n#angle measure\r\nangle = float(input( ))\r\n\r\nif angle >= 360:\r\n    print(\"Angle is not possible\")\r\n\r\narc_length = (pi*diameter) * (angle/360)\r\n\r\nprint(\"Arc Length is: \", arc_length)', 4, 1, NULL, '2023-04-03 20:47:02', '2023-08-08 18:29:02', 1),
(311, 'Write a Python program to calculate the area of a sector.', 'write-a-python-program-to-calculate-the-area-of-a-sector', '<p>pi=22/7</p><p>radius = float(input(\'Radius of Circle: \'))</p><p>angle = float(input(\'angle measure: \'))</p><br><p>if angle &gt;= 360:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Angle is not possible\")</p><br><p>sur_area = (pi*radius**2) * (angle/360)</p><br><p>print(\"Sector Area: \", sur_area)</p><br>', 'pi=22/7\r\n#Radius of Circle\r\nradius = float(input( ))\r\n#angle measure\r\nangle = float(input( ))\r\n\r\nif angle >= 360:\r\n    print(\"Angle is not possible\")\r\n\r\nsur_area = (pi*radius**2) * (angle/360)\r\n\r\nprint(\"Sector Area: \", sur_area)', 2, 1, NULL, '2023-04-03 20:47:41', '2023-08-08 18:35:54', 1),
(312, 'Write a Python program to calculate the discriminant value.', 'write-a-python-program-to-calculate-the-discriminant-value', '<p>x_value = float(input(\'The x value: \'))</p><p>y_value = float(input(\'The y value: \'))</p><p>z_value = float(input(\'The z value: \'))</p><br><p>discriminant = (y_value**2) - (4*x_value*z_value)</p><br><p>if discriminant &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'Two Solutions. Discriminant value is:\', discriminant)</p><br><p>elif discriminant == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'One Solution. Discriminant value is:\', discriminant)</p><br><p>elif discriminant &lt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'No Real Solutions. Discriminant value is:\', discriminant)</p><br>', '#The x value\r\nx_value = float(input( ))\r\n#The y value\r\ny_value = float(input( ))\r\n#The z value\r\nz_value = float(input( ))\r\n\r\ndiscriminant = (y_value**2) - (4*x_value*z_value)\r\n\r\nif discriminant > 0:\r\n    print(\'Two Solutions. Discriminant value is:\', discriminant)\r\n\r\nelif discriminant == 0:\r\n    print(\'One Solution. Discriminant value is:\', discriminant)\r\n\r\nelif discriminant < 0:\r\n    print(\'No Real Solutions. Discriminant value is:\', discriminant)', 0, 1, NULL, '2023-04-03 20:49:21', '2023-08-08 18:44:09', 1),
(313, 'Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.', 'write-a-python-program-to-find-the-smallest-multiple-of-the-first-n-numbers-also-display-the-factors', '<p>def smallest_multiple(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (n&lt;=2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i = n * 2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; factors = [number&nbsp; for number in range(n, 1, -1) if number * 2 &gt; n]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(factors)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while True:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for a in factors:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if i % a != 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (a == factors[-1] and i % a == 0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return i</p><br><p>print(smallest_multiple(13))</p><p>print(smallest_multiple(11))</p><p>print(smallest_multiple(2))</p><p>print(smallest_multiple(1))</p><br>', 'def smallest_multiple(n):\r\n    if (n<=2):\r\n        return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    print(factors)\r\n\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i\r\n                \r\nprint(smallest_multiple(13))\r\nprint(smallest_multiple(11))\r\nprint(smallest_multiple(2))\r\nprint(smallest_multiple(1))', 4, 0, NULL, '2023-04-03 20:50:15', '2023-08-08 18:53:28', 1),
(314, 'Write a Python program to calculate the difference between the squared sum of the first n natural numbers and the sum of squared first n natural numbers.(default value of number=2).', 'write-a-python-program-to-calculate-the-difference-between-the-squared-sum-of-the-first-n-natural-numbers-and-the-sum-of-squared-first-n-natural-numbersdefault-value-of-number2', '<p>def sum_difference(n=2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum_of_squares = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; square_of_sum = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for num in range(1, n+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum_of_squares += num * num</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; square_of_sum += num</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; square_of_sum = square_of_sum ** 2</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return square_of_sum - sum_of_squares</p><br><p>print(sum_difference(12))</p><br>', 'def sum_difference(n=2):\r\n    sum_of_squares = 0\r\n    square_of_sum = 0\r\n    for num in range(1, n+1):\r\n        sum_of_squares += num * num\r\n        square_of_sum += num\r\n\r\n    square_of_sum = square_of_sum ** 2\r\n\r\n    return square_of_sum - sum_of_squares\r\n\r\nprint(sum_difference(12))', 4, 0, NULL, '2023-04-03 20:51:20', '2023-08-08 19:00:10', 1),
(315, 'Write a Python program to calculate the sum of all digits of the base to the specified power.', 'write-a-python-program-to-calculate-the-sum-of-all-digits-of-the-base-to-the-specified-power', '<p>def power_base_sum(base, power):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return sum([int(i) for i in str(pow(base, power))])</p><br><p>print(power_base_sum(2, 100))</p><p>print(power_base_sum(8, 10))</p><br>', 'def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])\r\n\r\nprint(power_base_sum(2, 100))\r\nprint(power_base_sum(8, 10))', 0, 0, NULL, '2023-04-03 20:52:07', '2023-08-09 15:34:24', 1),
(316, 'Write a Python program to find out if the given number is abundant.', 'write-a-python-program-to-find-out-if-the-given-number-is-abundant', '<p>def is_abundant(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])</p><p>&nbsp; &nbsp;&nbsp; &nbsp; return fctr_sum &gt; n</p><br><p>print(is_abundant(12))</p><p>print(is_abundant(13))</p><br>', 'def is_abundant(n):\r\n    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctr_sum > n\r\n\r\nprint(is_abundant(12))\r\nprint(is_abundant(13))', 2, 0, NULL, '2023-04-03 20:53:29', '2023-08-09 15:36:55', 1),
(317, 'Write a Python program to sum all amicable numbers from 1 to specified numbers.', 'write-a-python-program-to-sum-all-amicable-numbers-from-1-to-specified-numbers', '<p>def amicable_numbers_sum(limit):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if not isinstance(limit, int):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"Input is not an integer!\"</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if limit &lt; 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"Input must be bigger than 0!\"</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; amicables = set()</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; for num in range(2, limit+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if num in amicables:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if num == sum_fact2 and num != sum_fact:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; amicables.add(num)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; amicables.add(sum_fact2)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return sum(amicables)</p><br><p>print(amicable_numbers_sum(9999))</p><p>print(amicable_numbers_sum(999))</p><p>print(amicable_numbers_sum(99))</p><br>', 'def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n\r\n    amicables = set()\r\n\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n\r\n    return sum(amicables)\r\n\r\n\r\nprint(amicable_numbers_sum(9999))\r\nprint(amicable_numbers_sum(999))\r\nprint(amicable_numbers_sum(99))', 2, 0, NULL, '2023-04-03 20:54:19', '2023-08-09 15:55:30', 1),
(318, 'Write a Python program to return the sum of all divisors of a number.', 'write-a-python-program-to-return-the-sum-of-all-divisors-of-a-number', '<p>def sum_div(number):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; divisors = [1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(2, number):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (number % i)==0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; divisors.append(i)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return sum(divisors)</p><br><p>print(sum_div(8))</p><p>print(sum_div(12))</p><br>', 'def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)\r\n\r\nprint(sum_div(8))\r\nprint(sum_div(12))', 2, 0, NULL, '2023-04-03 20:54:54', '2023-08-09 15:55:06', 1),
(319, 'Write a Python program to print all permutations of a given string (including duplicates).', 'write-a-python-program-to-print-all-permutations-of-a-given-string-including-duplicates', '<p>def permute_string(str):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if len(str) == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return [\'\']</p><p>&nbsp; &nbsp; &nbsp; &nbsp; prev_list = permute_string(str[1:len(str)])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; next_list = []</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,len(prev_list)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(0,len(str)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if new_str not in next_list:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next_list.append(new_str)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return next_list</p><br><p>print(permute_string(\'ABCD\'));</p><br>', 'def permute_string(str):\r\n    if len(str) == 0:\r\n        return [\'\']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n\r\n    return next_list\r\n\r\nprint(permute_string(\'ABCD\'));', 2, 0, NULL, '2023-04-03 20:55:54', '2023-08-09 16:07:52', 1),
(320, 'Write a Python program to print the first n lucky numbers.', 'write-a-python-program-to-print-the-first-n-lucky-numbers', '<p>n=int(input(\"Input a Number: \"))</p><p>List=range(-1,n*n+9,2)</p><p>i=2</p><br><p>while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1</p><br><p>print(List[1:n+1])</p><br>', '#Input a Number\r\nn=int(input( ))\r\nList=range(-1,n*n+9,2)\r\ni=2\r\n\r\nwhile List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n\r\nprint(List[1:n+1])', 0, 1, NULL, '2023-04-03 20:58:30', '2023-08-09 16:11:51', 1),
(321, 'Write a Python program to compute square roots using the Babylonian method.', 'write-a-python-program-to-compute-square-roots-using-the-babylonian-method', '<p>def BabylonianAlgorithm(number):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if(number == 0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0;</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; g = number/2.0;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; g2 = g + 1;</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while(g != g2):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; n = number/ g;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g2 = g;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g = (g + n)/2;</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return g;</p><br><p>print(\'The Square root of 0.3 =\', BabylonianAlgorithm(0.3));</p><br>', 'def BabylonianAlgorithm(number):\r\n    if(number == 0):\r\n        return 0;\r\n\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n\r\n    return g;\r\n\r\nprint(\'The Square root of 0.3 =\', BabylonianAlgorithm(0.3));', 6, 0, NULL, '2023-04-03 21:09:48', '2023-08-09 16:21:48', 1),
(322, 'Write a Python program to multiply two integers without using the * operator.', 'write-a-python-program-to-multiply-two-integers-without-using-the-operator', '<p>def multiply(x, y):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if y &lt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  return -multiply(x, -y)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif y == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif y == 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; return x + multiply(x, y - 1)</p><br><p>print(multiply(3, 5));</p><br>', 'def multiply(x, y):\r\n    if y < 0:\r\n        return -multiply(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply(x, y - 1)\r\n\r\nprint(multiply(3, 5));', 2, 0, NULL, '2023-04-03 21:10:15', '2023-08-09 16:25:35', 1),
(323, 'Write a Python program to calculate the magic square.', 'write-a-python-program-to-calculate-the-magic-square', '<p>def magic_square_test(my_matrix):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; iSize = len(my_matrix[0])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum_list = []</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; #Horizontal Part:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum_list.extend([sum (lines) for lines in my_matrix])&nbsp; &nbsp;</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; #Vertical Part:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for col in range(iSize):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum_list.append(sum(row[col] for row in my_matrix))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; #Diagonals Part</p><p>&nbsp; &nbsp; &nbsp; &nbsp; result1 = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,iSize):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result1 +=my_matrix[i][i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum_list.append(result1)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; result2 = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(iSize-1,-1,-1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result2 +=my_matrix[i][i]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sum_list.append(result2)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if len(set(sum_list))&gt;1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return True</p><br><p>m=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]</p><p>print(magic_square_test(m));</p><br><p>m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]</p><p>print(magic_square_test(m));</p><br><p>m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]</p><p>print(magic_square_test(m));</p><br>', 'def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    \r\n    #Horizontal Part:\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n\r\n    #Vertical Part:\r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    \r\n    #Diagonals Part\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)  \r\n    \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True\r\n\r\nm=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] \r\nprint(magic_square_test(m));\r\n\r\nm=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]\r\nprint(magic_square_test(m));\r\n\r\nm=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]\r\nprint(magic_square_test(m));', 2, 0, NULL, '2023-04-03 21:10:57', '2023-08-09 16:44:17', 1),
(324, 'Write a Python program to print all primes (Sieve of Eratosthenes) smaller than or equal to a specified number.', 'write-a-python-program-to-print-all-primes-sieve-of-eratosthenes-smaller-than-or-equal-to-a-specified-number', '<p>def sieve_of_Eratosthenes(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  limitn = num+1</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  not_prime_num = set()</p><p>&nbsp; &nbsp; &nbsp; &nbsp;  prime_nums = []</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp;  for i in range(2, limitn):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; if i in not_prime_num:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  continue</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for f in range(i*2, limitn, i):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; not_prime_num.add(f)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  prime_nums.append(i)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return prime_nums</p><br><p>print(sieve_of_Eratosthenes(100));</p><br>', 'def sieve_of_Eratosthenes(num):\r\n    limitn = num+1\r\n    not_prime_num = set()\r\n    prime_nums = []\r\n\r\n    for i in range(2, limitn):\r\n        if i in not_prime_num:\r\n            continue\r\n\r\n        for f in range(i*2, limitn, i):\r\n            not_prime_num.add(f)\r\n\r\n        prime_nums.append(i)\r\n\r\n    return prime_nums\r\n\r\nprint(sieve_of_Eratosthenes(100));', 0, 0, NULL, '2023-04-03 21:11:46', '2023-08-09 16:58:22', 1),
(325, 'Write a Python program to find the next smallest palindrome of a specified number.', 'write-a-python-program-to-find-the-next-smallest-palindrome-of-a-specified-number', '<p>import sys</p><br><p>def Next_smallest_Palindrome(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; numstr = str(num)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(num+1,sys.maxsize):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if str(i) == str(i)[::-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return i</p><br><p>print(Next_smallest_Palindrome(99));</p><p>print(Next_smallest_Palindrome(1221));</p><br>', 'import sys\r\n\r\ndef Next_smallest_Palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i\r\n\r\nprint(Next_smallest_Palindrome(99));\r\nprint(Next_smallest_Palindrome(1221));', 4, 0, NULL, '2023-04-03 21:12:05', '2023-08-09 17:01:37', 1),
(326, 'Write a Python program to find the next and previous palindromes of a specified number.', 'write-a-python-program-to-find-the-next-and-previous-palindromes-of-a-specified-number', '<p>def Previous_Palindrome(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for x in range(num-1,0,-1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if str(x) == str(x)[::-1]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x</p><br><p>print(Previous_Palindrome(99));</p><p>print(Previous_Palindrome(1221));</p><br>', 'def Previous_Palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x\r\n\r\nprint(Previous_Palindrome(99));\r\nprint(Previous_Palindrome(1221));', 2, 0, NULL, '2023-04-03 21:12:31', '2023-08-09 17:05:10', 1),
(327, 'Write a Python program to convert a float to ratio.', 'write-a-python-program-to-convert-a-float-to-ratio', '<p>from fractions import Fraction</p><br><p>value = 4.2</p><p>print(Fraction(value).limit_denominator())</p><br>', 'from fractions import Fraction\r\n\r\nvalue = 4.2\r\nprint(Fraction(value).limit_denominator())', 0, 0, NULL, '2023-04-03 21:14:11', '2023-08-09 17:07:03', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(328, 'Write a Python program for the nth Catalan numbers.', 'write-a-python-program-for-the-nth-catalan-numbers', '<p>def catalan_number(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if num &lt;=1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; res_num = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res_num += catalan_number(i) * catalan_number(num-i-1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return res_num</p><br><p>for n in range(10):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(catalan_number(n))</p><br>', 'def catalan_number(num):\r\n    if num <=1:\r\n         return 1\r\n   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num\r\n \r\nfor n in range(10):\r\n    print(catalan_number(n))', 2, 0, NULL, '2023-04-03 21:14:48', '2023-08-09 17:17:30', 1),
(329, 'Write a Python program to display numbers separated by commas as thousands.', 'write-a-python-program-to-display-numbers-separated-by-commas-as-thousands', '<p>print(\"{:,}\".format(1000000))</p><p>print(\"{:,}\".format(10000))</p><br>', 'print(\"{:,}\".format(1000000))\r\nprint(\"{:,}\".format(10000))', 0, 0, NULL, '2023-04-03 21:15:29', '2023-08-09 17:28:39', 1),
(330, 'Write a Python program to calculate distance between two points using latitude and longitude.', 'write-a-python-program-to-calculate-distance-between-two-points-using-latitude-and-longitude', '<p>from math import radians, sin, cos, acos</p><br><p>print(\"Input coordinates of two points:\")</p><p>slat = radians(float(input(\"Starting latitude: \")))</p><p>slon = radians(float(input(\"Ending longitude: \")))</p><p>elat = radians(float(input(\"Starting latitude: \")))</p><p>elon = radians(float(input(\"Ending longitude: \")))</p><br><p>dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))</p><br><p>print(\"The distance is %.2fkm.\" % dist)</p><br>', 'from math import radians, sin, cos, acos\r\n\r\n#Input coordinates of two points\r\n#Starting latitude\r\nslat = radians(float(input( )))\r\n#Ending longitude\r\nslon = radians(float(input( )))\r\n#Starting latitude\r\nelat = radians(float(input( )))\r\n#Ending longitude\r\nelon = radians(float(input( )))\r\n\r\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n\r\nprint(\"The distance is %.2fkm.\" % dist)', 4, 1, NULL, '2023-04-03 21:19:16', '2023-08-09 17:36:45', 1),
(331, 'Write a Python program to calculate the area of a regular polygon.', 'write-a-python-program-to-calculate-the-area-of-a-regular-polygon', '<p>from math import tan, pi</p><br><p>n_sides = int(input(\"Input number of sides: \"))</p><p>s_length = float(input(\"Input the length of a side: \"))</p><br><p>p_area = n_sides * (s_length ** 2) / (4 * tan(pi / n_sides))</p><br><p>print(\"The area of the polygon is: \",p_area)</p><br>', 'from math import tan, pi\r\n\r\n#Input number of sides\r\nn_sides = int(input( ))\r\n#Input the length of a side\r\ns_length = float(input( ))\r\n\r\np_area = n_sides * (s_length ** 2) / (4 * tan(pi / n_sides))\r\n\r\nprint(\"The area of the polygon is: \",p_area)', 4, 1, NULL, '2023-04-03 21:20:05', '2023-08-09 17:39:54', 1),
(332, 'Write a Python program to calculate the wind chill index.', 'write-a-python-program-to-calculate-the-wind-chill-index', '<p>import math</p><br><p>v = float(input(\"Input wind speed in kilometers/hour: \"))</p><p>t = float(input(\"Input air temperature in degrees Celsius: \"))</p><br><p>wci = 13.12 + 0.6215*t -&nbsp; 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)</p><br><p>print(\"The wind chill index is\", int(round(wci, 0)))</p><br>', 'import math\r\n\r\n#Input wind speed in kilometers/hour\r\nv = float(input( ))\r\n#Input air temperature in degrees Celsius\r\nt = float(input( ))\r\n\r\nwci = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n\r\nprint(\"The wind chill index is\", int(round(wci, 0)))', 0, 1, NULL, '2023-04-03 21:20:41', '2023-08-09 17:48:19', 1),
(333, 'Write a Python program to find the roots of a quadratic function.', 'write-a-python-program-to-find-the-roots-of-a-quadratic-function', '<p>from math import sqrt</p><br><p>print(\"Quadratic function : (a * x^2) + b*x + c\")</p><br><p>a = float(input(\"a: \"))</p><p>b = float(input(\"b: \"))</p><p>c = float(input(\"c: \"))</p><br><p>r = b**2 - 4*a*c</p><br><p>if r &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; num_roots = 2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x1 = (((-b) + sqrt(r))/(2*a))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x2 = (((-b) - sqrt(r))/(2*a))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"There are 2 roots: %f and %f\" % (x1, x2))</p><br><p>elif r == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; num_roots = 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x = (-b) / 2*a</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"There is one root: \", x)</p><br><p>else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; num_roots = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"No roots, discriminant &lt; 0.\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; exit()</p><br>', 'from math import sqrt\r\n\r\nprint(\"Quadratic function : (a * x^2) + b*x + c\")\r\n\r\n#Input a, b and c\r\na = float(input( ))\r\nb = float(input( ))\r\nc = float(input( ))\r\n\r\nr = b**2 - 4*a*c\r\n\r\nif r > 0:\r\n    num_roots = 2\r\n    x1 = (((-b) + sqrt(r))/(2*a))     \r\n    x2 = (((-b) - sqrt(r))/(2*a))\r\n    print(\"There are 2 roots: %f and %f\" % (x1, x2))\r\n\r\nelif r == 0:\r\n    num_roots = 1\r\n    x = (-b) / 2*a\r\n    print(\"There is one root: \", x)\r\n\r\nelse:\r\n    num_roots = 0\r\n    print(\"No roots, discriminant < 0.\")\r\n    exit()', 2, 1, NULL, '2023-04-03 21:21:18', '2023-08-09 17:58:16', 1),
(334, 'Write a Python program to convert a decimal number to a binary number.', 'write-a-python-program-to-convert-a-decimal-number-to-a-binary-number', '<p>b_num = list(input(\"Input a binary number: \"))</p><p>value = 0</p><br><p>for i in range(len(b_num)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; digit = b_num.pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if digit == \'1\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \r\n value = value + pow(2, i)</p><br><p>print(\"The decimal value of the number is\", value)</p><br>', 'b_num = list(input(\"Input a binary number: \"))\r\nvalue = 0\r\n\r\nfor i in range(len(b_num)):\r\n    digit = b_num.pop()\r\n    if digit == \'1\':\r\n        value = value + pow(2, i)\r\n\r\nprint(\"The decimal value of the number is\", value)', 2, 1, NULL, '2023-04-03 21:22:00', '2023-08-09 18:02:33', 1),
(335, 'Write a Python program to print a complex number and its real and imaginary parts.', 'write-a-python-program-to-print-a-complex-number-and-its-real-and-imaginary-parts', '<p>#Initialize a complex number</p><p>cn = complex(2,3)</p><br><p>print(\"Complex Number: \",cn)</p><p>print(\"Complex Number - Real part: \",cn.real)</p><p>print(\"Complex Number - Imaginary part: \",cn.imag)</p><br>', '#Initialize a complex number\r\ncn = complex(2,3)\r\n\r\nprint(\"Complex Number: \",cn)\r\nprint(\"Complex Number - Real part: \",cn.real)\r\nprint(\"Complex Number - Imaginary part: \",cn.imag)', 2, 0, NULL, '2023-04-03 21:23:10', '2023-08-09 18:10:26', 1),
(336, 'Write a Python program to add, subtract, multiply, and divide two complex numbers.', 'write-a-python-program-to-add-subtract-multiply-and-divide-two-complex-numbers', '<p>print(\"Addition of two complex numbers : \",(4+3j)+(3-7j))</p><br><p>print(\"Subtraction of two complex numbers : \",(4+3j)-(3-7j))</p><br><p>print(\"Multiplication of two complex numbers : \",(4+3j)*(3-7j))</p><br><p>print(\"Division of two complex numbers : \",(4+3j)/(3-7j))</p><br>', 'print(\"Addition of two complex numbers : \",(4+3j)+(3-7j))\r\n\r\nprint(\"Subtraction of two complex numbers : \",(4+3j)-(3-7j))\r\n\r\nprint(\"Multiplication of two complex numbers : \",(4+3j)*(3-7j))\r\n\r\nprint(\"Division of two complex numbers : \",(4+3j)/(3-7j))', 0, 0, NULL, '2023-04-03 21:23:49', '2023-08-09 18:12:08', 1),
(337, 'Write a Python program to get the length and the angle of a complex number.', 'write-a-python-program-to-get-the-length-and-the-angle-of-a-complex-number', '<p>import cmath</p><br><p>cn = complex(3,4)</p><br><p>#length of a complex number.</p><p>print(\"Length of a complex number: \", abs(cn))</p><br><p># gets angle. return in radians</p><p>print(\"Complex number Angle: \",cmath.phase(0+1j) )</p><br>', 'import cmath\r\n\r\ncn = complex(3,4)\r\n\r\n#length of a complex number. \r\nprint(\"Length of a complex number: \", abs(cn))\r\n\r\n# gets angle. return in radians \r\nprint(\"Complex number Angle: \",cmath.phase(0+1j) )', 4, 0, NULL, '2023-04-03 21:24:28', '2023-08-09 18:17:12', 1),
(338, 'Write a Python program to convert Polar coordinates to rectangular coordinates.', 'write-a-python-program-to-convert-polar-coordinates-to-rectangular-coordinates', '<p>import cmath</p><br><p>cn = complex(3,4)</p><br><p># get polar coordinates</p><p>print(\"Polar Coordinates: \",cmath.polar(cn))</p><br><p># polar to rectangular.</p><p>#Returns a complex number</p><p>cn1 = cmath.rect(2, cmath.pi)</p><p>print(\"Polar to rectangular: \",cn1)</p><br>', 'import cmath\r\n\r\ncn = complex(3,4)\r\n\r\n# get polar coordinates\r\nprint(\"Polar Coordinates: \",cmath.polar(cn))\r\n\r\n# polar to rectangular.\r\n#Returns a complex number\r\ncn1 = cmath.rect(2, cmath.pi)\r\nprint(\"Polar to rectangular: \",cn1)', 2, 0, NULL, '2023-04-03 21:25:22', '2023-08-09 18:41:24', 1),
(339, 'Write a Python program to find the maximum and minimum numbers from the specified decimal numbers.', 'write-a-python-program-to-find-the-maximum-and-minimum-numbers-from-the-specified-decimal-numbers', '<p>from decimal import *</p><br><p>data = list(map(Decimal, \'2.45 2.69 2.45 3.45 2.00 0.04 7.25\'.split()))</p><br><p>print(\"Maximum: \", max(data))</p><p>print(\"Minimum: \", min(data))</p><br>', 'from decimal import *\r\n\r\ndata = list(map(Decimal, \'2.45 2.69 2.45 3.45 2.00 0.04 7.25\'.split()))\r\n\r\nprint(\"Maximum: \", max(data))\r\nprint(\"Minimum: \", min(data))', 0, 0, NULL, '2023-04-03 21:26:10', '2023-08-09 18:42:25', 1),
(340, 'Write a Python program to find the sum of the following decimal numbers and display the numbers in sorted order.', 'write-a-python-program-to-find-the-sum-of-the-following-decimal-numbers-and-display-the-numbers-in-sorted-order', '<p>from decimal import *</p><br><p>data = list(map(Decimal, \'2.45 2.69 2.45 3.45 2.00 0.04 7.25\'.split()))</p><br><p>print(\"Sum: \", sum(data))</p><p>print(\"Sorted order: \", sorted(data))</p><br>', 'from decimal import *\r\n\r\ndata = list(map(Decimal, \'2.45 2.69 2.45 3.45 2.00 0.04 7.25\'.split()))\r\n\r\nprint(\"Sum: \", sum(data))\r\nprint(\"Sorted order: \", sorted(data))', 2, 0, NULL, '2023-04-03 21:26:38', '2023-08-09 18:43:40', 1),
(341, 'Write a Python program to get the square root and exponential of a given decimal number.', 'write-a-python-program-to-get-the-square-root-and-exponential-of-a-given-decimal-number', '<p>from decimal import *</p><br><p>x = Decimal(\'1.44\')</p><br><p>print(\"Square root of \",x, \" is :\", x.sqrt())</p><p>print(\"exponential of \",x, \" is :\", x.exp())</p><br>', 'from decimal import *\r\n\r\nx = Decimal(\'1.44\')\r\n\r\nprint(\"Square root of \",x, \" is :\", x.sqrt())\r\nprint(\"exponential of \",x, \" is :\", x.exp())', 2, 0, NULL, '2023-04-03 21:27:06', '2023-08-09 18:44:26', 1),
(342, 'Write a Python program to retrieve the current global context (public properties) for all decimal.', 'write-a-python-program-to-retrieve-the-current-global-context-public-properties-for-all-decimal', '<p>import decimal</p><br><p>context = decimal.getcontext()</p><br><p>print(\'Emax&nbsp; &nbsp; &nbsp;=\', context.Emax)</p><p>print(\'Emin&nbsp; &nbsp; &nbsp;=\', context.Emin)</p><p>print(\'capitals =\', context.capitals)</p><p>print(\'prec&nbsp; &nbsp; &nbsp;=\', context.prec)</p><p>print(\'rounding =\', context.rounding)</p><br><p>print(\'flags&nbsp; &nbsp; =\')</p><p>for x, y in context.flags.items():</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'&nbsp; {}: {}\'.format(x, y))</p><br><p>print(\'traps&nbsp; &nbsp; =\')</p><p>for x, y in context.traps.items():</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'&nbsp; {}: {}\'.format(x, y))</p><br>', 'import decimal\r\n\r\ncontext = decimal.getcontext()\r\n\r\nprint(\'Emax     =\', context.Emax)\r\nprint(\'Emin     =\', context.Emin)\r\nprint(\'capitals =\', context.capitals)\r\nprint(\'prec     =\', context.prec)\r\nprint(\'rounding =\', context.rounding)\r\n\r\nprint(\'flags    =\')\r\nfor x, y in context.flags.items():\r\n    print(\'  {}: {}\'.format(x, y))\r\n\r\nprint(\'traps    =\')\r\nfor x, y in context.traps.items():\r\n    print(\'  {}: {}\'.format(x, y))', 2, 0, NULL, '2023-04-03 21:27:30', '2023-08-09 18:50:16', 1),
(343, 'Write a Python program to round a specified decimal by setting precision (between 1 and 4).', 'write-a-python-program-to-round-a-specified-decimal-by-setting-precision-between-1-and-4', '<p>import decimal</p><br><p>d = decimal.Decimal(\'00.26598\')</p><br><p>print(\"Original Number : \",d)</p><br><p>for i in range(1, 5):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; decimal.getcontext().prec = i</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Precision-\",i, \':\', d * 1)</p><br>', 'import decimal\r\n\r\nd = decimal.Decimal(\'00.26598\')\r\n\r\nprint(\"Original Number : \",d)\r\n\r\nfor i in range(1, 5):\r\n    decimal.getcontext().prec = i\r\n    print(\"Precision-\",i, \':\', d * 1)', 2, 0, NULL, '2023-04-03 21:27:54', '2023-08-09 18:53:29', 1),
(344, 'Write a Python program to round a specified number upwards towards infinity and down towards negative infinity with precision 4.', 'write-a-python-program-to-round-a-specified-number-upwards-towards-infinity-and-down-towards-negative-infinity-with-precision-4', '<p>import decimal</p><br><p>context = decimal.getcontext()</p><p>value = decimal.Decimal(1) / decimal.Decimal(17)</p><p>print(\"1/17 = \",value)</p><p>context.prec = 4</p><p>print(\"Precision: \",4)</p><br><p>context.rounding = getattr(decimal, \'ROUND_CEILING\')</p><p>value = decimal.Decimal(1) / decimal.Decimal(17)</p><p>print(\"Round upwards towards infinity: \",value)</p><br><p>context.rounding = getattr(decimal, \'ROUND_FLOOR\')</p><p>value = decimal.Decimal(1) / decimal.Decimal(17)</p><p>print(\"Round down towards negative infinity: \",value)</p><br>', 'import decimal\r\n\r\ncontext = decimal.getcontext()\r\nvalue = decimal.Decimal(1) / decimal.Decimal(17)\r\nprint(\"1/17 = \",value)\r\ncontext.prec = 4\r\nprint(\"Precision: \",4)\r\n\r\ncontext.rounding = getattr(decimal, \'ROUND_CEILING\')\r\nvalue = decimal.Decimal(1) / decimal.Decimal(17)\r\nprint(\"Round upwards towards infinity: \",value)\r\n\r\ncontext.rounding = getattr(decimal, \'ROUND_FLOOR\')\r\nvalue = decimal.Decimal(1) / decimal.Decimal(17)\r\nprint(\"Round down towards negative infinity: \",value)', 0, 0, NULL, '2023-04-03 21:28:50', '2023-08-09 18:58:27', 1),
(345, 'Write a Python program to get the local and default precision.', 'write-a-python-program-to-get-the-local-and-default-precision', '<p>import decimal</p><br><p>with decimal.localcontext() as context:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; context.prec = 2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'Local precision:\', context.prec)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'22/7 =\', (decimal.Decimal(\'22\') / 7))</p><br><p>print(\'Default precision:\', decimal.getcontext().prec)</p><p>print(\'22 /7 =\', (decimal.Decimal(\'22\') / 7))</p><br>', 'import decimal\r\n\r\nwith decimal.localcontext() as context:\r\n    context.prec = 2\r\n    print(\'Local precision:\', context.prec)\r\n    print(\'22/7 =\', (decimal.Decimal(\'22\') / 7))\r\n\r\nprint(\'Default precision:\', decimal.getcontext().prec)\r\nprint(\'22 /7 =\', (decimal.Decimal(\'22\') / 7))', 2, 0, NULL, '2023-04-03 21:29:15', '2023-08-09 19:03:17', 1),
(346, 'Write a Python program to display fraction instances of the string representation of a number.', 'write-a-python-program-to-display-fraction-instances-of-the-string-representation-of-a-number', '<p>import fractions</p><br><p>for s in [\'0.7\', \'2.5\', \'9.32\', \'7e-1\']:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; f = fractions.Fraction(s)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{0:&gt;4} = {1}\'.format(s, f))</p><br>', 'import fractions\r\n\r\nfor s in [\'0.7\', \'2.5\', \'9.32\', \'7e-1\']:\r\n    f = fractions.Fraction(s)\r\n    print(\'{0:>4} = {1}\'.format(s, f))', 0, 0, NULL, '2023-04-03 21:29:35', '2023-08-09 19:06:20', 1),
(347, 'Write a Python program to create fraction instances of float numbers.', 'write-a-python-program-to-create-fraction-instances-of-float-numbers', '<p>import fractions</p><br><p>for n in [0.2, 0.7, 6.5, 6.0]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{} = {}\'.format(n, fractions.Fraction(n)))</p><br>', 'import fractions\r\n\r\nfor n in [0.2, 0.7, 6.5, 6.0]:\r\n    print(\'{} = {}\'.format(n, fractions.Fraction(n)))', 2, 0, NULL, '2023-04-03 21:30:18', '2023-08-09 19:07:39', 1),
(348, 'Write a Python program to create fraction instances of decimal numbers.', 'write-a-python-program-to-create-fraction-instances-of-decimal-numbers', '<p>import decimal</p><p>import fractions</p><br><p>values = [</p><p>&nbsp; &nbsp; &nbsp; &nbsp; decimal.Decimal(\'0.2\'),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; decimal.Decimal(\'0.7\'),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; decimal.Decimal(\'2.5\'),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; decimal.Decimal(\'3.0\'),</p><p>]</p><br><p>for d in values:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{} = {}\'.format(d, fractions.Fraction(d)))</p><br>', 'import decimal\r\nimport fractions\r\n\r\nvalues = [\r\n    decimal.Decimal(\'0.2\'),\r\n    decimal.Decimal(\'0.7\'),\r\n    decimal.Decimal(\'2.5\'),\r\n    decimal.Decimal(\'3.0\'),\r\n]\r\n\r\nfor d in values:\r\n    print(\'{} = {}\'.format(d, fractions.Fraction(d)))', 2, 0, NULL, '2023-04-03 21:30:42', '2023-08-10 06:22:33', 1),
(349, 'Write a Python program to add, subtract, multiply and divide two fractions.', 'write-a-python-program-to-add-subtract-multiply-and-divide-two-fractions', '<p>import fractions</p><br><p>f1 = fractions.Fraction(2, 3)</p><p>f2 = fractions.Fraction(3, 7)</p><br><p>print(\'{} + {} = {}\'.format(f1, f2, f1 + f2))</p><p>print(\'{} - {} = {}\'.format(f1, f2, f1 - f2))</p><p>print(\'{} * {} = {}\'.format(f1, f2, f1 * f2))</p><p>print(\'{} / {} = {}\'.format(f1, f2, f1 / f2))</p><br>', 'import fractions\r\n\r\nf1 = fractions.Fraction(2, 3)\r\nf2 = fractions.Fraction(3, 7)\r\n\r\nprint(\'{} + {} = {}\'.format(f1, f2, f1 + f2))\r\nprint(\'{} - {} = {}\'.format(f1, f2, f1 - f2))\r\nprint(\'{} * {} = {}\'.format(f1, f2, f1 * f2))\r\nprint(\'{} / {} = {}\'.format(f1, f2, f1 / f2))', 2, 0, NULL, '2023-04-03 21:31:20', '2023-08-10 06:25:03', 1),
(350, 'Write a Python program to convert a floating point number (PI) to an approximate rational value on the various denominators.\r\nNote: max_denominator = 1000000', 'write-a-python-program-to-convert-a-floating-point-number-pi-to-an-approximate-rational-value-on-the-various-denominators-note-max-denominator-1000000', '<p>import fractions</p><p>import math</p><br><p>print(\'PI&nbsp; &nbsp; &nbsp; &nbsp;=\', math.pi)</p><p>f_pi = fractions.Fraction(str(math.pi))</p><br><p>print(\'No limit =\', f_pi)</p><br><p>for d in [1, 5,&nbsp; 50, 90, 100, 500, 1000000]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; limited = f_pi.limit_denominator(d)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{0:8} = {1}\'.format(d, limited))</p><br>', 'import fractions\r\nimport math\r\n\r\nprint(\'PI       =\', math.pi)\r\n\r\nf_pi = fractions.Fraction(str(math.pi))\r\n\r\nprint(\'No limit =\', f_pi)\r\n\r\nfor d in [1, 5,  50, 90, 100, 500, 1000000]:\r\n    limited = f_pi.limit_denominator(d)\r\n    print(\'{0:8} = {1}\'.format(d, limited))', 2, 0, NULL, '2023-04-03 21:32:11', '2023-08-10 06:31:51', 1),
(351, 'Write a Python program to generate random floating numbers in a specific numerical range.', 'write-a-python-program-to-generate-random-floating-numbers-in-a-specific-numerical-range', '<p>import random</p><br><p>for x in range(6):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{:04.3f}\'.format(random.uniform(x, 100)), end=\' \')</p><br>', 'import random\r\n\r\nfor x in range(6):\r\n    print(\'{:04.3f}\'.format(random.uniform(x, 100)), end=\' \')', 2, 0, NULL, '2023-04-03 21:32:32', '2023-08-10 06:36:08', 1),
(352, 'Write a Python program to generate random integers in a specific numerical range.', 'write-a-python-program-to-generate-random-integers-in-a-specific-numerical-range', '<p>import random</p><br><p>for x in range(6):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(random.randrange(x, 100), end=\' \')</p><p><br>', 'import random\r\n\r\nfor x in range(6):\r\n    print(random.randrange(x, 100), end=\' \')', 2, 0, NULL, '2023-04-03 21:32:54', '2023-08-10 06:41:30', 1),
(353, 'Write a Python program to generate random even integers in a specific numerical range.', 'write-a-python-program-to-generate-random-even-integers-in-a-specific-numerical-range', '<p>import random</p><br><p>for x in range(6):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(random.randrange(10, 100, 2), end=\' \')</p><br>', 'import random\r\n\r\nfor x in range(6):\r\n    print(random.randrange(10, 100, 2), end=\' \')', 0, 0, NULL, '2023-04-03 21:33:34', '2023-08-10 06:43:10', 1),
(354, 'Write a Python program to get a single random element from a specified string', 'write-a-python-program-to-get-a-single-random-element-from-a-specified-string', '<p>import random</p><br><p>print(random.choice(\'abcdefghijklm\'))</p><br>', 'import random\r\n\r\nprint(random.choice(\'abcdefghijklm\'))', 0, 0, NULL, '2023-04-03 22:40:28', '2023-08-10 06:44:01', 1),
(355, 'Write a Python program to shuffle the following elements randomly.', 'write-a-python-program-to-shuffle-the-following-elements-randomly', '<p>import random</p><br><p>nums = [1, 2, 3, 4, 5, 6, 7]</p><p>random.shuffle(nums)</p><p>print(nums)</p><br>', 'import random\r\n\r\nnums = [1, 2, 3, 4, 5, 6, 7]\r\nrandom.shuffle(nums)\r\nprint(nums)', 2, 0, NULL, '2023-04-03 22:41:11', '2023-08-10 06:49:33', 1),
(356, 'Write a Python program to flip a coin 1000 times and count heads and tails.', 'write-a-python-program-to-flip-a-coin-1000-times-and-count-heads-and-tails', '<p>import random</p><p>import itertools</p><br><p>results = {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'heads\': 0,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; \'tails\': 0,</p><p>}</p><br><p>sides = list(results.keys())</p><br><p>for i in range(10000):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; results[random.choice(sides)] += 1</p><br><p>print(\'Heads:\', results[\'heads\'])</p><p>print(\'Tails:\', results[\'tails\'])</p><br>', 'import random\r\nimport itertools\r\n\r\nresults = {\r\n    \'heads\': 0,\r\n    \'tails\': 0,\r\n}\r\n\r\nsides = list(results.keys())\r\n\r\nfor i in range(10000):\r\n    results[random.choice(sides)] += 1\r\n\r\nprint(\'Heads:\', results[\'heads\'])\r\nprint(\'Tails:\', results[\'tails\'])', 2, 0, NULL, '2023-04-03 22:41:59', '2023-08-10 07:00:54', 1),
(357, 'Write a Python program to print a random sample of words from the system dictionary.', 'write-a-python-program-to-print-a-random-sample-of-words-from-the-system-dictionary', '<p>import random</p><br><p>with open(\'/usr/share/dict/words\', \'rt\') as fh:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; words = fh.readlines()</p><br><p>words = [w.rstrip() for w in words]</p><br><p>for w in random.sample(words, 7):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(w)</p><br>', 'import random\r\n\r\nwith open(\'/usr/share/dict/words\', \'rt\') as fh:\r\n    words = fh.readlines()\r\n\r\nwords = [w.rstrip() for w in words]\r\n\r\nfor w in random.sample(words, 7):\r\n    print(w)', 0, 0, NULL, '2023-04-03 22:42:48', '2023-08-10 07:12:03', 1),
(358, 'Write a Python program to randomly select an item from a list.', 'write-a-python-program-to-randomly-select-an-item-from-a-list', '<p>import random</p><br><p>color = [\'Red\', \'Green\', \'Black\', \'Orange\', \'Black\']</p><br><p>print(random.choice(color))</p><br>', 'import random\r\n\r\ncolor = [\'Red\', \'Green\', \'Black\', \'Orange\', \'Black\']\r\n\r\nprint(random.choice(color))', 2, 0, NULL, '2023-04-03 22:43:35', '2023-08-10 07:13:44', 1),
(359, 'Write a Python program to calculate the absolute value of a floating point number.', 'write-a-python-program-to-calculate-the-absolute-value-of-a-floating-point-number', '<p>import math</p><br><p>print(math.fabs(-2.1))</p><p>print(math.fabs(-0.0))</p><p>print(math.fabs(10.1))</p><p>print(math.fabs(0.0))</p><br>', 'import math\r\n\r\nprint(math.fabs(-2.1))\r\nprint(math.fabs(-0.0))\r\nprint(math.fabs(10.1))\r\nprint(math.fabs(0.0))', 0, 0, NULL, '2023-04-03 22:44:15', '2023-08-10 07:14:58', 1),
(360, 'Write a Python program to calculate the standard deviation of the following data.', 'write-a-python-program-to-calculate-the-standard-deviation-of-the-following-data', '<p>import math</p><p>import sys</p><br><p>def sd_calc(data):</p><p>&nbsp; &nbsp;  &nbsp; &nbsp; n = len(data)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if n &lt;= 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0.0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; mean, sd = avg_calc(data), 0.0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; # calculate stan. dev.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for el in data:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sd += (float(el) - mean)**2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sd = math.sqrt(sd / float(n-1))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return sd</p><br><p>def avg_calc(ls):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n, mean = len(ls), 0.0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if n &lt;= 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ls[0]</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; # calculate average</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for el in ls:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mean = mean + float(el)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; mean = mean / float(n)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; return mean</p><br><p>data = [4, 2, 5, 8, 6]</p><p>print(\"Sample Data: \",data)</p><p>print(\"Standard Deviation : \",sd_calc(data))</p><br>', 'import math\r\nimport sys\r\n\r\ndef sd_calc(data):\r\n    n = len(data)\r\n\r\n    if n <= 1:\r\n        return 0.0\r\n\r\n    mean, sd = avg_calc(data), 0.0\r\n\r\n    # calculate stan. dev.\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n\r\n    return sd\r\n\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n\r\n    if n <= 1:\r\n        return ls[0]\r\n\r\n    # calculate average\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n\r\n    return mean\r\n\r\ndata = [4, 2, 5, 8, 6]\r\nprint(\"Sample Data: \",data)\r\nprint(\"Standard Deviation : \",sd_calc(data))', 0, 0, NULL, '2023-04-03 22:44:50', '2023-08-10 07:22:52', 1),
(361, 'Write a Python program to print the floating point of the mantissa, exponent pair.', 'write-a-python-program-to-print-the-floating-point-of-the-mantissa-exponent-pair', '<p>import math</p><br><p>print(\'{:^7}&nbsp; {:^8}&nbsp; {:^17}\'.format(\'Mantissa\', \'Exponent\', \'Floating point value\'))</p><p>print(\'{:-^8}&nbsp; {:-^8}&nbsp; {:-^20}\'.format(\'\', \'\', \'\'))</p><br><p>for m, e in [ (0.7, -3),(0.3,&nbsp; 0), (0.5,&nbsp; 3) ]:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x = math.ldexp(m, e)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{:7.2f}&nbsp; {:7d}&nbsp; {:7.2f}\'.format(m, e, x))</p><br>', 'import math\r\n\r\nprint(\'{:^7}  {:^8}  {:^17}\'.format(\'Mantissa\', \'Exponent\', \'Floating point value\'))\r\nprint(\'{:-^8}  {:-^8}  {:-^20}\'.format(\'\', \'\', \'\'))\r\n\r\nfor m, e in [ (0.7, -3), (0.3,  0), (0.5,  3) ]:\r\n    x = math.ldexp(m, e)\r\n    print(\'{:7.2f}  {:7d}  {:7.2f}\'.format(m, e, x))', 2, 0, NULL, '2023-04-03 22:45:26', '2023-08-10 07:30:44', 1),
(362, 'Write a Python program to split the fractional and integer parts of a floating point number.', 'write-a-python-program-to-split-the-fractional-and-integer-parts-of-a-floating-point-number', '<p>import math</p><br><p>print(\'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(F)&nbsp; (I)\')</p><br><p>for i in range(6):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'{}/2 = {} {}\'.format(i, i/2, math.modf(i/2.0)))</p><br>', 'import math\r\n\r\nprint(\'           (F)  (I)\')\r\n\r\nfor i in range(6):\r\n    print(\'{}/2 = {} {}\'.format(i, i/2, math.modf(i/2.0)))', 2, 0, NULL, '2023-04-03 22:46:14', '2023-08-10 07:33:51', 1),
(363, 'Write a Python program to parse math formulas and put parentheses around multiplication and division.', 'write-a-python-program-to-parse-math-formulas-and-put-parentheses-around-multiplication-and-division', '<p>import ast</p><br><p>def recurse(node):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if isinstance(node, ast.BinOp):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if isinstance(node.op, ast.Mult) or isinstance(node.op, ast.Div):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'(\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; recurse(node.left)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; recurse(node.op)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; recurse(node.right)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if isinstance(node.op, ast.Mult) or isinstance(node.op, ast.Div):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\')\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif isinstance(node, ast.Add):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'+\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif isinstance(node, ast.Sub):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'-\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif isinstance(node, ast.Mult):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'*\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif isinstance(node, ast.Div):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'/\', end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif isinstance(node, ast.Num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(node.n, end=\'\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for child in ast.iter_child_nodes(node):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; recurse(child)</p><br><p>def search_expr(node):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; returns = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for child in ast.iter_child_nodes(node):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if isinstance(child, ast.Expr):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return child</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; returns.append(search_expr(child))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for ret in returns:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if isinstance(ret, ast.Expr):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ret</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return None</p><br><p>formula = \'4+5*7/2\'</p><br><p>a = ast.parse(formula)</p><br><p>expr = search_expr(a)</p><p>if expr is not None:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; recurse(expr)</p><p>print()</p><br>', 'import ast\r\n\r\ndef recurse(node):\r\n    if isinstance(node, ast.BinOp):\r\n        if isinstance(node.op, ast.Mult) or isinstance(node.op, ast.Div):\r\n            print(\'(\', end=\'\')\r\n        recurse(node.left)\r\n        recurse(node.op)\r\n        recurse(node.right)\r\n        if isinstance(node.op, ast.Mult) or isinstance(node.op, ast.Div):\r\n            print(\')\', end=\'\')\r\n    elif isinstance(node, ast.Add):\r\n        print(\'+\', end=\'\')\r\n    elif isinstance(node, ast.Sub):\r\n        print(\'-\', end=\'\')\r\n    elif isinstance(node, ast.Mult):\r\n        print(\'*\', end=\'\')\r\n    elif isinstance(node, ast.Div):\r\n        print(\'/\', end=\'\')\r\n    elif isinstance(node, ast.Num):\r\n        print(node.n, end=\'\')\r\n    else:\r\n        for child in ast.iter_child_nodes(node):\r\n            recurse(child)\r\n\r\ndef search_expr(node):\r\n    returns = []\r\n    for child in ast.iter_child_nodes(node):\r\n        if isinstance(child, ast.Expr):\r\n            return child\r\n        returns.append(search_expr(child))\r\n    for ret in returns:\r\n        if isinstance(ret, ast.Expr):\r\n            return ret\r\n    return None\r\n\r\nformula = \'4+5*7/2\'\r\n\r\na = ast.parse(formula)\r\n\r\nexpr = search_expr(a)\r\nif expr is not None:\r\n    recurse(expr)\r\nprint()', 4, 0, NULL, '2023-04-03 22:46:59', '2023-08-10 08:28:47', 1),
(364, 'Write a Python program to describe linear regression.', 'write-a-python-program-to-describe-linear-regression', '<p># Define the data</p><p>data = set()</p><p>count = int(input(\"Enter the number of data points: \"))</p><p>for i in range(count):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x=float(input(\"X\"+str(i+1)+\": \"))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y=float(input(\"Y\"+str(i+1)+\": \"))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; data.add((x,y))</p><br><p># Find the average x and y</p><p>avgx = 0.0</p><p>avgy = 0.0</p><p>for i in data:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; avgx += i[0]/len(data)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; avgy += i[1]/len(data)</p><br><p># Find the sums</p><p>totalxx = 0</p><p>totalxy = 0</p><br><p>for i in data:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; totalxx += (i[0]-avgx)**2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; totalxy += (i[0]-avgx)*(i[1]-avgy)</p><br><p># Slope/intercept form</p><p>m = totalxy/totalxx</p><p>b = avgy-m*avgx</p><br><p>print(\"Best fit line:\")</p><p>print(\"y = \"+str(m)+\"x + \"+str(b))</p><br><p>x = float(input(\"Enter a value to calculate: \"))</p><p>print(\"y = \"+str(m*x+b))</p><br>', '# Define the data\r\ndata = set()\r\n#Enter the number of data points\r\ncount = int(input( ))\r\nfor i in range(count):\r\n    x=float(input( ))\r\n    y=float(input( ))\r\n    data.add((x,y))\r\n\r\n# Find the average x and y\r\navgx = 0.0\r\navgy = 0.0\r\nfor i in data:\r\n    avgx += i[0]/len(data)\r\n    avgy += i[1]/len(data)\r\n\r\n# Find the sums\r\ntotalxx = 0\r\ntotalxy = 0\r\n\r\nfor i in data:\r\n    totalxx += (i[0]-avgx)**2\r\n    totalxy += (i[0]-avgx)*(i[1]-avgy)\r\n\r\n# Slope/intercept form\r\nm = totalxy/totalxx\r\nb = avgy-m*avgx\r\n\r\nprint(\"Best fit line:\")\r\nprint(\"y = \"+str(m)+\"x + \"+str(b))\r\n\r\n#Enter a value to calculate\r\nx = float(input( ))\r\nprint(\"y = \"+str(m*x+b))', 2, 1, NULL, '2023-04-03 22:48:04', '2023-08-10 08:48:12', 1),
(365, 'Write a Python program to calculate a grid of hexagon coordinates of the given radius given lower-left and upper-right coordinates. The function will return a list of lists containing 6 tuples of x, y point coordinates.', 'write-a-python-program-to-calculate-a-grid-of-hexagon-coordinates-of-the-given-radius-given-lower-left-and-upper-right-coordinates-the-function-will-return-a-list-of-lists-containing-6-tuples-of-x-y-point-coordinates', '<p>import math</p><br><p>def calculate_polygons(startx, starty, endx, endy, radius):</p><p>&nbsp; &nbsp; &nbsp; &nbsp;# calculate side length given radius</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sl = (2 * radius) * math.tan(math.pi / 6)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; # calculate coordinates of the hexagon points</p><p>&nbsp; &nbsp; &nbsp; &nbsp; # sin(30)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; p = sl * 0.5</p><p>&nbsp; &nbsp; &nbsp; &nbsp; b = sl * math.cos(math.radians(30))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; w = b * 2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; h = 2 * sl</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; # offset start and end coordinates by hex widths and heights to guarantee coverage</p><p>&nbsp; &nbsp; &nbsp; &nbsp; startx = startx - w</p><p>&nbsp; &nbsp; &nbsp; &nbsp; starty = starty - h</p><p>&nbsp; &nbsp; &nbsp; &nbsp; endx = endx + w</p><p>&nbsp; &nbsp; &nbsp; &nbsp; endy = endy + h</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; origx = startx</p><p>&nbsp; &nbsp; &nbsp; &nbsp; origy = starty</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; # offsets for moving along and up rows</p><p>&nbsp; &nbsp; &nbsp; &nbsp; xoffset = b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; yoffset = 3 * p</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; polygons = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; row = 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; counter = 0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while starty &lt; endy:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if row % 2 == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; startx = origx + xoffset</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; startx = origx</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while startx &lt; endx:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p1x = startx</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p1y = starty + p</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2x = startx</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2y = starty + (3 * p)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p3x = startx + b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p3y = starty + h</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p4x = startx + w</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p4y = starty + (3 * p)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p5x = startx + w</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p5y = starty + p</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p6x = startx + b</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p6y = starty</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; poly = [</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p1x, p1y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p2x, p2y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p3x, p3y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p4x, p4y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p5x, p5y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p6x, p6y),</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (p1x, p1y)]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; polygons.append(poly)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; counter += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; startx += w</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; starty += yoffset</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; row += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return polygons</p><br><p>print(calculate_polygons(1,1, 4, 4, 3))</p><br>', 'import math\r\n\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    # calculate side length given radius   \r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    \r\n    # calculate coordinates of the hexagon points\r\n    # sin(30)	\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl\r\n    \r\n    # offset start and end coordinates by hex widths and heights to guarantee coverage     \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n\r\n    origx = startx\r\n    origy = starty\r\n\r\n    # offsets for moving along and up rows\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons\r\n\r\nprint(calculate_polygons(1,1, 4, 4, 3))', 6, 0, NULL, '2023-04-03 22:50:03', '2023-08-10 09:30:45', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(366, 'Write a Python program to create a simple math quiz.', 'write-a-python-program-to-create-a-simple-math-quiz', '<div>import random</div><div><br></div><div><br></div><div>def display_intro():</div><div>&nbsp; &nbsp; title = \"** A Simple Math Quiz **\"</div><div>&nbsp; &nbsp; print(\"*\" * len(title))</div><div>&nbsp; &nbsp; print(title)</div><div>&nbsp; &nbsp; print(\"*\" * len(title))</div><div><br></div><div><br></div><div>def display_menu():</div><div>&nbsp; &nbsp; menu_list = [\"1. Addition\", \"2. Subtraction\", \"3. Multiplication\", \"4. Integer Division\", \"5. Exit\"]</div><div>&nbsp; &nbsp; print(menu_list[0])</div><div>&nbsp; &nbsp; print(menu_list[1])</div><div>&nbsp; &nbsp; print(menu_list[2])</div><div>&nbsp; &nbsp; print(menu_list[3])</div><div>&nbsp; &nbsp; print(menu_list[4])</div><div><br></div><div><br></div><div>def display_separator():</div><div>&nbsp; &nbsp; print(\"-\" * 24)</div><div><br></div><div><br></div><div>def get_user_input():</div><div>&nbsp; &nbsp; user_input = int(input(\"Enter your choice: \"))</div><div>&nbsp; &nbsp; while user_input &gt; 5 or user_input &lt;= 0:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Invalid menu option.\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; user_input = int(input(\"Please try again: \"))</div><div>&nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return user_input</div><div><br></div><div><br></div><div>def get_user_solution(problem):</div><div>&nbsp; &nbsp; print(\"Enter your answer\")</div><div>&nbsp; &nbsp; print(problem, end=\"\")</div><div>&nbsp; &nbsp; result = int(input(\" = \"))</div><div>&nbsp; &nbsp; return result</div><div><br></div><div><br></div><div>def check_solution(user_solution, solution, count):</div><div>&nbsp; &nbsp; if user_solution == solution:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = count + 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Correct.\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div>&nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Incorrect.\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div><br></div><div><br></div><div>def menu_option(index, count):</div><div>&nbsp; &nbsp; number_one = random.randrange(1, 21)</div><div>&nbsp; &nbsp; number_two = random.randrange(1, 21)</div><div>&nbsp; &nbsp; if index is 1:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; problem = str(number_one) + \" + \" + str(number_two)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; solution = number_one + number_two</div><div>&nbsp; &nbsp; &nbsp; &nbsp; user_solution = get_user_solution(problem)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = check_solution(user_solution, solution, count)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div>&nbsp; &nbsp; elif index is 2:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; problem = str(number_one) + \" - \" + str(number_two)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; solution = number_one - number_two</div><div>&nbsp; &nbsp; &nbsp; &nbsp; user_solution = get_user_solution(problem)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = check_solution(user_solution, solution, count)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div>&nbsp; &nbsp; elif index is 3:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; problem = str(number_one) + \" * \" + str(number_two)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; solution = number_one * number_two</div><div>&nbsp; &nbsp; &nbsp; &nbsp; user_solution = get_user_solution(problem)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = check_solution(user_solution, solution, count)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div>&nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; problem = str(number_one) + \" // \" + str(number_two)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; solution = number_one // number_two</div><div>&nbsp; &nbsp; &nbsp; &nbsp; user_solution = get_user_solution(problem)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; count = check_solution(user_solution, solution, count)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return count</div><div><br></div><div><br></div><div>def display_result(total, correct):</div><div>&nbsp; &nbsp; if total &gt; 0:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; result = correct / total</div><div>&nbsp; &nbsp; &nbsp; &nbsp; percentage = round((result * 100), 2)</div><div>&nbsp; &nbsp; if total == 0:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; percentage = 0</div><div>&nbsp; &nbsp; print(\"You answered\", total, \"questions with\", correct, \"correct.\")</div><div>&nbsp; &nbsp; print(\"Your score is \", percentage, \"%. Thank you.\", sep = \"\")</div><div><br></div><div><br></div><div>def main():</div><div>&nbsp; &nbsp; display_intro()</div><div>&nbsp; &nbsp; display_menu()</div><div>&nbsp; &nbsp; display_separator()</div><div><br></div><div>&nbsp; &nbsp; option = get_user_input()</div><div>&nbsp; &nbsp; total = 0</div><div>&nbsp; &nbsp; correct = 0</div><div>&nbsp; &nbsp; while option != 5:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; total = total + 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; correct = menu_option(option, correct)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; option = get_user_input()</div><div><br></div><div>&nbsp; &nbsp; print(\"Exit the quiz.\")</div><div>&nbsp; &nbsp; display_separator()</div><div>&nbsp; &nbsp; display_result(total, correct)</div><div><br></div><div>main()</div><div><br></div>', 'import random\n\n\ndef display_intro():\n    title = \"** A Simple Math Quiz **\"\n    print(\"*\" * len(title))\n    print(title)\n    print(\"*\" * len(title))\n\n\ndef display_menu():\n    menu_list = [\"1. Addition\", \"2. Subtraction\", \"3. Multiplication\", \"4. Integer Division\", \"5. Exit\"]\n    print(menu_list[0])\n    print(menu_list[1])\n    print(menu_list[2])\n    print(menu_list[3])\n    print(menu_list[4])\n\n\ndef display_separator():\n    print(\"-\" * 24)\n\n\ndef get_user_input():\n    user_input = int(input(\"Enter your choice: \"))\n    while user_input > 5 or user_input <= 0:\n        print(\"Invalid menu option.\")\n        user_input = int(input(\"Please try again: \"))\n    else:\n        return user_input\n\n\ndef get_user_solution(problem):\n    print(\"Enter your answer\")\n    print(problem, end=\"\")\n    result = int(input(\" = \"))\n    return result\n\n\ndef check_solution(user_solution, solution, count):\n    if user_solution == solution:\n        count = count + 1\n        print(\"Correct.\")\n        return count\n    else:\n        print(\"Incorrect.\")\n        return count\n\n\ndef menu_option(index, count):\n    number_one = random.randrange(1, 21)\n    number_two = random.randrange(1, 21)\n    if index is 1:\n        problem = str(number_one) + \" + \" + str(number_two)\n        solution = number_one + number_two\n        user_solution = get_user_solution(problem)\n        count = check_solution(user_solution, solution, count)\n        return count\n    elif index is 2:\n        problem = str(number_one) + \" - \" + str(number_two)\n        solution = number_one - number_two\n        user_solution = get_user_solution(problem)\n        count = check_solution(user_solution, solution, count)\n        return count\n    elif index is 3:\n        problem = str(number_one) + \" * \" + str(number_two)\n        solution = number_one * number_two\n        user_solution = get_user_solution(problem)\n        count = check_solution(user_solution, solution, count)\n        return count\n    else:\n        problem = str(number_one) + \" // \" + str(number_two)\n        solution = number_one // number_two\n        user_solution = get_user_solution(problem)\n        count = check_solution(user_solution, solution, count)\n        return count\n\n\ndef display_result(total, correct):\n    if total > 0:\n        result = correct / total\n        percentage = round((result * 100), 2)\n    if total == 0:\n        percentage = 0\n    print(\"You answered\", total, \"questions with\", correct, \"correct.\")\n    print(\"Your score is \", percentage, \"%. Thank you.\", sep = \"\")\n\n\ndef main():\n    display_intro()\n    display_menu()\n    display_separator()\n\n    option = get_user_input()\n    total = 0\n    correct = 0\n    while option != 5:\n        total = total + 1\n        correct = menu_option(option, correct)\n        option = get_user_input()\n\n    print(\"Exit the quiz.\")\n    display_separator()\n    display_result(total, correct)\n\nmain()\n', 4, 1, NULL, '2023-04-05 19:53:19', '2023-08-10 09:30:58', NULL),
(367, 'Write a Python program to calculate the volume of a tetrahedron.', 'write-a-python-program-to-calculate-the-volume-of-a-tetrahedron', '<p>import math</p><br><p>def volume_tetrahedron(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; volume = (num ** 3 / (6 * math.sqrt(2)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return round(volume, 2)</p><br><p>print(volume_tetrahedron(10))</p><br>', 'import math\r\n\r\ndef volume_tetrahedron(num):\r\n	volume = (num ** 3 / (6 * math.sqrt(2)))\r\n	return round(volume, 2)\r\n\r\nprint(volume_tetrahedron(10))', 2, 0, NULL, '2023-04-05 20:00:11', '2023-08-10 09:38:15', 1),
(368, 'Write a Python program to compute the value of e(2.718281827...) using an infinite series.', 'write-a-python-program-to-compute-the-value-of-e2718281827-using-an-infinite-series', '<p>import math</p><br><p>def fact(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return n*fact(n-1)</p><br><p>def e(EPS):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; v1 = 2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; v2 = v1 + float(1.0/fact(2))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i = 3&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while math.fabs(v1-v2) &gt;= EPS:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v1 = v2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v2 += float(1.0/fact(i))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return v2</p><br><p>print(\"The mathematical constant e\")</p><p>#computes the value of e using infinite series</p><p>print(e(0.00000001))</p><p>#mathematical constant e build-in</p><p>print(math.e)</p><br>', 'import math\r\n\r\ndef fact(n):\r\n    if n == 0:\r\n       return 1\r\n    else:\r\n       return n*fact(n-1)\r\n\r\ndef e(EPS):\r\n    v1 = 2\r\n    v2 = v1 + float(1.0/fact(2))\r\n    i = 3 \r\n    while math.fabs(v1-v2) >= EPS:\r\n        v1 = v2\r\n        v2 += float(1.0/fact(i))\r\n        i += 1\r\n    return v2  \r\n\r\nprint(\"The mathematical constant e\")\r\n#computes the value of e using infinite series\r\nprint(e(0.00000001))\r\n#mathematical constant e build-in\r\nprint(math.e)', 0, 0, NULL, '2023-04-05 21:26:14', '2023-08-10 18:36:51', 1),
(369, 'Write a Python program to create an ASCII waveform.', 'write-a-python-program-to-create-an-ascii-waveform', '<p>from time import sleep</p><p>from math import sin, cos, radians</p><br><p># increase 40 to get more wave</p><p>for n in range(1, 40):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; circle_1 = 50 * (1 + sin(radians(n*10)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; circle_2 = 50 * (1 + cos(radians(n*10)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"#\".center(int(circle_1)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"*\".center(int(circle_2)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; sleep(0.05)</p><br>', 'from time import sleep\r\nfrom math import sin, cos, radians\r\n\r\n# increase 40 to get more wave\r\nfor n in range(1, 40):\r\n    circle_1 = 50 * (1 + sin(radians(n*10)))\r\n    circle_2 = 50 * (1 + cos(radians(n*10)))\r\n    print(\"#\".center(int(circle_1)))\r\n    print(\"*\".center(int(circle_2)))\r\n    sleep(0.05)', 0, 0, NULL, '2023-04-05 21:28:23', '2023-08-10 18:42:42', 1),
(370, 'Write a Python program to create a dot string.', 'write-a-python-program-to-create-a-dot-string', '<p>from math import sin, cos, radians</p><p>import sys</p><br><p>for i in range(1000):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\' \'*int(10*cos(radians(i))+10) + \'.\')</p><br>', 'from math import sin, cos, radians\r\nimport sys\r\n\r\nfor i in range(1000):\r\n    print(\' \'*int(10*cos(radians(i))+10) + \'.\')', 2, 0, NULL, '2023-04-05 21:30:15', '2023-08-10 18:48:15', 1),
(371, 'Write a Python program to create a Pythagorean theorem calculator.', 'write-a-python-program-to-create-a-pythagorean-theorem-calculator', '<p>from math import sqrt</p><br><p>print(\'Pythagorean theorem calculator! Calculate your triangle sides.\')</p><p>print(\'Assume the sides are a, b, c and c is the hypotenuse (the side opposite the right angle\')</p><p>formula = input(\'Which side (a, b, c) do you wish to calculate? side&gt; \')</p><br><p>if formula == \'c\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_a = int(input(\'Input the length of side a: \'))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_b = int(input(\'Input the length of side b: \'))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; side_c = sqrt(side_a * side_a + side_b * side_b)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'The length of side c is: \' )</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(side_c)</p><br><p>elif formula == \'a\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_b = int(input(\'Input the length of side b: \'))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_c = int(input(\'Input the length of side c: \'))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; side_a = sqrt((side_c * side_c) - (side_b * side_b))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'The length of side a is\' )</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(side_a)</p><br><p>elif formula == \'b\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_a = int(input(\'Input the length of side a: \'))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; side_b = int(input(\'Input the length of side c: \'))</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; side_c = sqrt(side_c * side_c - side_a * side_a)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'The length of side b is\')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(side_c)</p><br><p>else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\'Please select a side between a, b, c\')</p><br>', 'from math import sqrt\r\n\r\n#Pythagorean theorem calculator! Calculate your triangle sides.\r\n#Assume the sides are a, b, c and c is the hypotenuse (the side opposite the right angle.\r\n#Which side (a, b, c) do you wish to calculate? side>\r\nformula = input( )\r\n\r\nif formula == \'c\':\r\n    #Input the length of side a.\r\n    side_a = int(input( ))\r\n    #Input the length of side b.\r\n    side_b = int(input( ))\r\n\r\n    side_c = sqrt(side_a * side_a + side_b * side_b)\r\n	\r\n    print(\'The length of side c is: \' )\r\n    print(side_c)\r\n\r\nelif formula == \'a\':\r\n    #Input the length of side b.\r\n    side_b = int(input( ))\r\n    #Input the length of side c\r\n    side_c = int(input( ))\r\n    \r\n    side_a = sqrt((side_c * side_c) - (side_b * side_b))\r\n    \r\n    print(\'The length of side a is\' )\r\n    print(side_a)\r\n\r\nelif formula == \'b\':\r\n    #Input the length of side a.\r\n    side_a = int(input( ))\r\n    #Input the length of side c.\r\n    side_c = int(input( ))\r\n        \r\n    side_b = sqrt(side_c * side_c - side_a * side_a)\r\n    \r\n    print(\'The length of side b is\')\r\n    print(side_b)\r\n\r\nelse:\r\n    print(\'Please select a side between a, b, c \')', 4, 1, NULL, '2023-04-05 21:31:30', '2023-08-10 19:16:38', 1),
(372, 'Write a Python function to round up a number to specified digits.', 'write-a-python-function-to-round-up-a-number-to-specified-digits', '<p>import math</p><br><p>def roundup(a, digits=0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n = 10**-digits</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return round(math.ceil(a / n) * n, digits)</p><br><p>x = 123.01247</p><br><p>print(\"Original&nbsp; Number: \",x)</p><p>print(roundup(x, 0))</p><p>print(roundup(x, 1))</p><p>print(roundup(x, 2))</p><p>print(roundup(x, 3))</p><br>', 'import math\r\n\r\ndef roundup(a, digits=0):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)\r\n\r\nx = 123.01247\r\n\r\nprint(\"Original  Number: \",x)\r\nprint(roundup(x, 0))\r\nprint(roundup(x, 1))\r\nprint(roundup(x, 2))\r\nprint(roundup(x, 3))', 0, 0, NULL, '2023-04-05 21:32:26', '2023-08-10 19:49:27', 1),
(373, 'Write a Python program for a casino simulation.', 'write-a-python-program-for-a-casino-simulation', '<p>import random</p><p>import math</p><br><p>limit = 1000</p><p>acc = 0</p><p>results = []</p><p>exp = 1000</p><br><p>for i in range(exp):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; color = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; amount = 10000</p><p>&nbsp; &nbsp; &nbsp; &nbsp; max_amount = amount</p><p>&nbsp; &nbsp; &nbsp; &nbsp; bid = 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; count = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while count &lt; limit and amount &gt; 0 :</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; amount = amount - bid</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next = random.randint(0, 1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if next == color :</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; amount = amount + bid + bid</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bid = 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # color = 1 if color == 0 else 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if amount &gt; max_amount:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_amount = amount</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else :</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bid = bid + bid</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count = count + 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; acc = acc + max_amount</p><p>&nbsp; &nbsp; &nbsp; &nbsp; results.append(max_amount)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Exp {}\".format(i))</p><br><p>avg = acc / exp</p><p>acc = 0</p><p>for i in range(len(results)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; acc = acc + math.pow(results[i] - avg, 2)</p><p>std = math.sqrt(acc / exp)</p><br><p>print(\"Average max amount earned {} with standard deviation {}\".format(avg, std))</p><br>', 'import random\r\nimport math\r\n\r\nlimit = 1000\r\nacc = 0\r\nresults = []\r\nexp = 1000\r\n\r\nfor i in range(exp):\r\n    color = 0\r\n    amount = 10000\r\n    max_amount = amount\r\n    bid = 1\r\n    count = 0\r\n    while count < limit and amount > 0 :\r\n        amount = amount - bid\r\n        next = random.randint(0, 1)\r\n        if next == color :\r\n            amount = amount + bid + bid\r\n            bid = 1\r\n            # color = 1 if color == 0 else 0\r\n            if amount > max_amount:\r\n                max_amount = amount\r\n        else :\r\n            bid = bid + bid\r\n        count = count + 1\r\n    acc = acc + max_amount\r\n    results.append(max_amount)\r\n    print(\"Exp {}\".format(i))\r\n\r\navg = acc / exp\r\nacc = 0\r\nfor i in range(len(results)):\r\n    acc = acc + math.pow(results[i] - avg, 2)\r\nstd = math.sqrt(acc / exp)\r\n\r\nprint(\"Average max amount earned {} with standard deviation {}\".format(avg, std))', 2, 0, NULL, '2023-04-05 21:33:12', '2023-08-10 20:06:43', 1),
(374, 'Write a Python program to reverse a range.', 'write-a-python-program-to-reverse-a-range', '<p>def reversed_range(start, stop=None, step=1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if stop is None:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return range(start - step, -step, -step)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_start = stop - ((stop-start-1) % step + 1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_end = new_start - (stop-start+step-1) // step * step</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (stop - start) % step == 0 and step &lt; 0: new_start -= step</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return range(new_start, new_end, -step)</p><br><p>print(reversed_range(1, 10, 2))</p><p>print(reversed_range(1, 5, 1))</p><br>', 'def reversed_range(start, stop=None, step=1):\r\n    if stop is None:	\r\n        return range(start - step, -step, -step)\r\n    else:\r\n        new_start = stop - ((stop-start-1) % step + 1)\r\n        new_end = new_start - (stop-start+step-1) // step * step\r\n        if (stop - start) % step == 0 and step < 0: new_start -= step\r\n        return range(new_start, new_end, -step)\r\n\r\nprint(reversed_range(1, 10, 2))\r\nprint(reversed_range(1, 5, 1))', 2, 0, NULL, '2023-04-05 21:34:18', '2023-08-10 20:12:10', 1),
(375, 'Write a Python program to create a range for floating numbers.', 'write-a-python-program-to-create-a-range-for-floating-numbers', '<p>def frange(x, y, jump=1.0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i = 0.0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x = float(x)&nbsp; # Prevent yielding integers.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y = float(y)&nbsp; # Comparison converts y to float every time otherwise.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x0 = x</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; epsilon = jump / 2.0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; yield x&nbsp; # yield always first value</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while x + epsilon &lt; y:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1.0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = x0 + i * jump</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield x</p><br><p>print(list(frange(0.0, 1.0, 0.1)))</p><br>', 'def frange(x, y, jump=1.0):\r\n    i = 0.0\r\n    x = float(x)  # Prevent yielding integers.\r\n    y = float(y)  # Comparison converts y to float every time otherwise.\r\n    x0 = x\r\n\r\n    epsilon = jump / 2.0\r\n    yield x  # yield always first value\r\n\r\n    while x + epsilon < y:\r\n        i += 1.0\r\n        x = x0 + i * jump\r\n        yield x\r\n\r\nprint(list(frange(0.0, 1.0, 0.1)))', 0, 0, NULL, '2023-04-05 21:34:54', '2023-08-10 20:17:48', 1),
(376, 'Write a Python program to generate (given an integer n) a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.', 'write-a-python-program-to-generate-given-an-integer-n-a-square-matrix-filled-with-elements-from-1-to-n-raised-to-the-power-of-2-in-spiral-order', '<p>def generateMatrix(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n&lt;=0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return []&nbsp;</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; matrix=[row[:] for row in [[0]*n]*n]</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; row_st=0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; row_ed=n-1</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; col_st=0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; col_ed=n-1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; current=1</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while (True):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if current&gt;n*n:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for c in range (col_st, col_ed+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix[row_st][c]=current</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  current+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; row_st+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for r in range (row_st, row_ed+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix[r][col_ed]=current</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; col_ed-=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for c in range (col_ed, col_st-1, -1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix[row_ed][c]=current</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; row_ed-=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for r in range (row_ed, row_st-1, -1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix[r][col_st]=current</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; col_st+=1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return matrix</p><br><p>print(list(generateMatrix(3)))</p><br>', 'def generateMatrix(n):\r\n    if n<=0:\r\n        return [] \r\n\r\n    matrix=[row[:] for row in [[0]*n]*n]\r\n        \r\n    row_st=0\r\n    row_ed=n-1\r\n        \r\n    col_st=0\r\n    col_ed=n-1\r\n    current=1\r\n        \r\n    while (True):\r\n        if current>n*n:\r\n            break\r\n        for c in range (col_st, col_ed+1):\r\n            matrix[row_st][c]=current\r\n            current+=1\r\n        row_st+=1\r\n        for r in range (row_st, row_ed+1):\r\n            matrix[r][col_ed]=current\r\n            current+=1\r\n        col_ed-=1\r\n        for c in range (col_ed, col_st-1, -1):\r\n            matrix[row_ed][c]=current\r\n            current+=1\r\n        row_ed-=1\r\n        for r in range (row_ed, row_st-1, -1):\r\n            matrix[r][col_st]=current\r\n            current+=1\r\n        col_st+=1\r\n    return matrix\r\n\r\nprint(list(generateMatrix(3)))', 2, 0, NULL, '2023-04-05 21:36:00', '2023-08-10 20:32:57', 1),
(377, 'Write a Python program to select a random date in the current year.', 'write-a-python-program-to-select-a-random-date-in-the-current-year', '<p>from datetime import date</p><p>import random</p><br><p>start_dt = date.today().replace(day=1, month=1).toordinal()</p><p>end_dt = date.today().toordinal()</p><p>random_day = date.fromordinal(random.randint(start_dt, end_dt))</p><br><p>print(random_day)</p><br>', 'from datetime import date\r\nimport random\r\n\r\nstart_dt = date.today().replace(day=1, month=1).toordinal()\r\nend_dt = date.today().toordinal()\r\nrandom_day = date.fromordinal(random.randint(start_dt, end_dt))\r\n\r\nprint(random_day)', 0, 0, NULL, '2023-04-05 21:37:46', '2023-08-10 20:34:14', 1),
(378, 'Write a Python program to calculate clusters using the Hierarchical Clustering method.', 'write-a-python-program-to-calculate-clusters-using-the-hierarchical-clustering-method', '<p>import math</p><br><p>def distance(a,b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x=float(a[0])-float(b[0])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x=x*x</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y=float(a[1])-float(b[1])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y=y*y</p><p>&nbsp; &nbsp; &nbsp; &nbsp; dist=round(math.sqrt(x+y),2)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return dist</p><br><p>def minimum(matrix):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; p=[0,0]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; mn=1000</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,len(matrix)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(0,len(matrix[i])):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (matrix[i][j]&gt;0 and matrix[i][j]&lt;mn):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mn=matrix[i][j]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p[0]=i</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p[1]=j</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return p</p><br><p>def newpoint(pt):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x=float(pt[0][0])+float(pt[1][0])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; x=x/2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y=float(pt[0][1])+float(pt[1][1])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; y=y/2</p><p>&nbsp; &nbsp; &nbsp; &nbsp; midpoint=[x,y]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return midpoint</p><br><p>if __name__ == \'__main__\':</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n=int(input(\"Input number of points.&gt; \"))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; points=list()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; outline=\'[\'</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i=0</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while(i&lt;n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s=input(\"Input point (eg. 1,1)\"+chr(65+i)+\"&gt; \")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c=s.split(\",\")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; points.append(c)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i=i+1</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; names={}</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,len(points)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; names[str(points[i])]=chr(65+i)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; l=0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; while(len(points)&gt;1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l=l+1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix=list()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\'Distance matrix no. \'+str(l)+\': \')</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for i in range(0,len(points)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m=[]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(0,len(points)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m.append(0)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for j in range(0,len(points)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m[j]=distance(points[i],points[j])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(str(m))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.append(m)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m=minimum(matrix)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pts=list()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p1=points[m[0]]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pts.append(p1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; points.remove(p1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2=points[m[1]-1]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pts.append(p2)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; points.remove(p2)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; midpoint=newpoint(pts)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; points.append(midpoint)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c1=names.pop(str(p1))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c2=names.pop(str(p2))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; names[str(midpoint)]=\"[\"+str(c1)+str(c2)+\"]\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; outline=names[str(midpoint)]</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Cluster is :\",names[str(midpoint)])</p><br>', 'import math\r\n\r\ndef distance(a,b):\r\n    x=float(a[0])-float(b[0])\r\n    x=x*x\r\n    y=float(a[1])-float(b[1])\r\n    y=y*y\r\n    dist=round(math.sqrt(x+y),2)\r\n    return dist\r\n\r\ndef minimum(matrix):\r\n    p=[0,0]\r\n    mn=1000\r\n    for i in range(0,len(matrix)):        \r\n        for j in range(0,len(matrix[i])):            \r\n            if (matrix[i][j]>0 and matrix[i][j]<mn):\r\n                mn=matrix[i][j]\r\n                p[0]=i\r\n                p[1]=j\r\n    return p \r\n            \r\ndef newpoint(pt):\r\n    x=float(pt[0][0])+float(pt[1][0])\r\n    x=x/2\r\n    y=float(pt[0][1])+float(pt[1][1])\r\n    y=y/2\r\n    midpoint=[x,y]\r\n    return midpoint\r\n\r\nif __name__ == \'__main__\': \r\n    #Input number of points.\r\n    n=int(input( ))\r\n    points=list()\r\n    outline=\'[\'\r\n    i=0\r\n\r\n    while(i<n):\r\n        #Input point (eg. 1,1)\r\n        s=input( )\r\n        c=s.split(\",\")\r\n        points.append(c)\r\n        i=i+1\r\n\r\n    names={}\r\n\r\n    for i in range(0,len(points)):\r\n        names[str(points[i])]=chr(65+i)\r\n    l=0\r\n    while(len(points)>1):\r\n        l=l+1\r\n        matrix=list()\r\n        print(\'Distance matrix no. \'+str(l)+\': \')\r\n        for i in range(0,len(points)):\r\n            m=[]\r\n            for j in range(0,len(points)):\r\n                m.append(0)\r\n            for j in range(0,len(points)):\r\n                m[j]=distance(points[i],points[j])\r\n            print(str(m))\r\n            matrix.append(m)\r\n        \r\n        m=minimum(matrix)\r\n        pts=list()\r\n        p1=points[m[0]]\r\n        pts.append(p1)\r\n        points.remove(p1)\r\n        p2=points[m[1]-1]\r\n        pts.append(p2)\r\n        points.remove(p2)   \r\n        midpoint=newpoint(pts)\r\n        points.append(midpoint)    \r\n        c1=names.pop(str(p1))\r\n        c2=names.pop(str(p2))\r\n        names[str(midpoint)]=\"[\"+str(c1)+str(c2)+\"]\" \r\n        outline=names[str(midpoint)]\r\n        \r\n    print(\"Cluster is :\",names[str(midpoint)])', 2, 1, NULL, '2023-04-05 21:38:56', '2023-08-11 05:46:26', 1),
(379, 'Write a Python program to implement the Euclidean Algorithm to compute the greatest common divisor (GCD).', 'write-a-python-program-to-implement-the-euclidean-algorithm-to-compute-the-greatest-common-divisor-gcd', '<p>from math import *</p><br><p>def euclid_algo(x, y, verbose=True):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if x &lt; y: # We want x &gt;= y</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return euclid_algo(y, x, verbose)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; while y != 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if verbose: print(\'%s = %s * %s + %s\' % (x, floor(x/y), y, x % y))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (x, y) = (y, x % y)</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if verbose: print(\'gcd is %s\' % x)&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x</p><br><p>euclid_algo(150, 304)</p><p>euclid_algo(1000, 10)</p><p>euclid_algo(150, 9)</p><br>', 'from math import *\r\n\r\ndef euclid_algo(x, y, verbose=True):\r\n    if x < y: # We want x >= y\r\n        return euclid_algo(y, x, verbose)\r\n\r\n    while y != 0:\r\n        if verbose: print(\'%s = %s * %s + %s\' % (x, floor(x/y), y, x % y))\r\n        (x, y) = (y, x % y)\r\n\r\n        if verbose: print(\'gcd is %s\' % x) \r\n        return x\r\n\r\neuclid_algo(150, 304)\r\neuclid_algo(1000, 10)\r\neuclid_algo(150, 9)', 2, 0, NULL, '2023-04-05 21:41:01', '2023-08-11 06:07:47', 1),
(380, 'Write a Python program to convert RGB color to HSV color.', 'write-a-python-program-to-convert-rgb-color-to-hsv-color', '<p>def rgb_to_hsv(r, g, b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; r, g, b = r/255.0, g/255.0, b/255.0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; mx = max(r, g, b)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; mn = min(r, g, b)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; df = mx-mn</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if mx == mn:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; h = 0</p><p>&nbsp; &nbsp; elif mx == r:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h = (60 * ((g-b)/df) + 360) % 360</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif mx == g:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h = (60 * ((b-r)/df) + 120) % 360</p><p>&nbsp; &nbsp; &nbsp; &nbsp; elif mx == b:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h = (60 * ((r-g)/df) + 240) % 360</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; if mx == 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; else:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = (df/mx)*100</p><br><p>&nbsp; &nbsp; &nbsp; &nbsp; v = mx*100</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return h, s, v</p><br><p>print(rgb_to_hsv(255, 255, 255))</p><p>print(rgb_to_hsv(0, 215, 0))</p><br>', 'def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n\r\n    v = mx*100\r\n    return h, s, v\r\n\r\nprint(rgb_to_hsv(255, 255, 255))\r\nprint(rgb_to_hsv(0, 215, 0))', 0, 0, NULL, '2023-04-05 21:41:37', '2023-08-11 06:30:39', 1),
(381, 'Write a Python program to find perfect squares between two given numbers.', 'write-a-python-program-to-find-perfect-squares-between-two-given-numbers', '<p>def squares(a, b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; lists=[]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; # Traverse through all numbers</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range (a,b+1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = 1;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while j*j &lt;= i:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if j*j == i:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lists.append(i)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = j+1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i = i+1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return lists</p><br><p>print(squares(1, 30))</p><br>', 'def squares(a, b):\r\n    lists=[]\r\n    # Traverse through all numbers\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists\r\n\r\nprint(squares(1, 30))', 2, 0, NULL, '2023-04-05 21:42:09', '2023-08-11 06:36:20', 1),
(382, 'Write a Python program to compute Euclidean distances.', 'write-a-python-program-to-compute-euclidean-distances', '<p>import math</p><br><p># Example points in 3-dimensional space...</p><p>x = (5, 6, 7)</p><p>y = (8, 9, 9)</p><br><p>distance = math.sqrt(sum([(a - b) ** 2 for a, b in zip(x, y)]))</p><br><p>print(\"Euclidean distance from x to y: \",distance)</p><br>', 'import math\r\n\r\n# Example points in 3-dimensional space...\r\nx = (5, 6, 7)\r\ny = (8, 9, 9)\r\n\r\ndistance = math.sqrt(sum([(a - b) ** 2 for a, b in zip(x, y)]))\r\n\r\nprint(\"Euclidean distance from x to y: \",distance)', 0, 0, NULL, '2023-04-05 21:42:44', '2023-08-11 06:38:09', 1),
(383, 'Write a Python program to convert an integer to a 2 byte Hex value.', 'write-a-python-program-to-convert-an-integer-to-a-2-byte-hex-value', '<p>for i in range(1, 10):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; print(i,\'--&gt;\',format(i, \'#04x\'))</p><br>', 'for i in range(1, 10):\r\n    print(i,\'-->\',format(i, \'#04x\'))', 2, 0, NULL, '2023-04-05 21:43:09', '2023-08-11 06:39:36', 1),
(384, 'Write a Python program to generate a series of distinct random numbers.', 'write-a-python-program-to-generate-a-series-of-distinct-random-numbers', '<p>import random</p><br><p>choices = list(range(100))</p><p>random.shuffle(choices)</p><p>print(choices.pop())</p><br>', 'import random\r\n\r\nchoices = list(range(100))\r\nrandom.shuffle(choices)\r\nprint(choices.pop())', 4, 0, NULL, '2023-04-05 21:58:44', '2023-08-11 06:46:35', 1),
(385, 'Write a Python program to convert a given float value to a ratio.', 'write-a-python-program-to-convert-a-given-float-value-to-a-ratio', '<p>from fractions import Fraction</p><br><p>value = 4.2</p><p>z = Fraction(value).limit_denominator()</p><p>print(z)</p><br>', 'from fractions import Fraction\r\n\r\nvalue = 4.2\r\nz = Fraction(value).limit_denominator()\r\nprint(z)', 2, 0, NULL, '2023-04-05 21:59:07', '2023-08-11 06:51:14', 1),
(386, 'Write a Python program to calculate the aliquot sum of a given number.', 'write-a-python-program-to-calculate-the-aliquot-sum-of-a-given-number', '<p>def aliquot_sum(input_val):</p><p>&nbsp; &nbsp;&nbsp; &nbsp; if not isinstance(input_val, int):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"Input must be an integer\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if input_val &lt;= 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"Input must be positive\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \"Aliquot Sum\",sum(</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; divisor for divisor in range(1, input_val // 2 + 1) if input_val % divisor == 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; )</p><p>N = 15</p><p>print(\"\\nInput value:\",N)</p><p>print(aliquot_sum(N))</p><br><p>N = 12</p><p>print(\"\\nInput value:\",N)</p><p>print(aliquot_sum(N))</p><br><p>N = -6</p><p>print(\"\\nInput value:\",N)</p><p>print(aliquot_sum(N))</p><br><p>N = 12.22</p><p>print(\"\\nInput value:\",N)</p><p>print(aliquot_sum(N))</p><br><p>N = \'zz\'</p><p>print(\"\\nInput value:\",N)</p><p>print(aliquot_sum(N))</p><br>', 'def aliquot_sum(input_val):\r\n    if not isinstance(input_val, int):\r\n        return \"Input must be an integer\"\r\n    if input_val <= 0:\r\n        return \"Input must be positive\"\r\n    return \"Aliquot Sum\",sum(\r\n        divisor for divisor in range(1, input_val // 2 + 1) if input_val % divisor == 0\r\n    )\r\n\r\nN = 15\r\nprint(\"\\nInput value:\",N)\r\nprint(aliquot_sum(N))\r\n\r\nN = 12\r\nprint(\"\\nInput value:\",N)\r\nprint(aliquot_sum(N))\r\n\r\nN = -6\r\nprint(\"\\nInput value:\",N)\r\nprint(aliquot_sum(N))\r\n\r\nN = 12.22\r\nprint(\"\\nInput value:\",N)\r\nprint(aliquot_sum(N))\r\n\r\nN = \'zz\'\r\nprint(\"\\nInput value:\",N)\r\nprint(aliquot_sum(N))', 2, 0, NULL, '2023-04-05 22:00:52', '2023-08-11 06:59:54', 1),
(387, 'Write a Python program to get the nth tetrahedral number from a given integer(n) value.', 'write-a-python-program-to-get-the-nth-tetrahedral-number-from-a-given-integern-value', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return (n * (n + 1) * (n + 2)) / 6</p><br><p>n = 1</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Tetrahedral number:\",test(n))</p><br><p>n = 2</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Tetrahedral number:\",test(n))</p><br><p>n = 6</p><p>print(\"\\nOriginal Number:\",n)</p><p>print(\"Tetrahedral number:\",test(n))</p><br>', 'def test(n):\r\n    return (n * (n + 1) * (n + 2)) / 6\r\n\r\nn = 1\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Tetrahedral number:\",test(n))\r\n\r\nn = 2\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Tetrahedral number:\",test(n))\r\n\r\nn = 6\r\nprint(\"\\nOriginal Number:\",n)\r\nprint(\"Tetrahedral number:\",test(n))', 2, 0, NULL, '2023-04-05 22:01:43', '2023-08-11 07:04:00', 1),
(388, 'Write a Python program to get the sum of the powers of all the numbers from start to end (both inclusive).', 'write-a-python-program-to-get-the-sum-of-the-powers-of-all-the-numbers-from-start-to-end-both-inclusive', '<p>def sum_of_powers(end, power = 2, start = 1):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return sum([(i) ** power for i in range(start, end + 1)])</p><br><p>print(sum_of_powers(12))</p><p>print(sum_of_powers(12, 3))</p><p>print(sum_of_powers(12, 5, 7))</p><br>', 'def sum_of_powers(end, power = 2, start = 1):\r\n    return sum([(i) ** power for i in range(start, end + 1)])\r\n\r\nprint(sum_of_powers(12))\r\nprint(sum_of_powers(12, 3))\r\nprint(sum_of_powers(12, 5, 7))', 2, 0, NULL, '2023-04-05 22:40:17', '2023-08-11 07:05:59', 1),
(389, 'Write a Python program to calculate the Hamming distance between two given values.', 'write-a-python-program-to-calculate-the-hamming-distance-between-two-given-values', '<p>def hamming_distance(x, y):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return bin(x ^ y).count(\'1\')</p><br><p>x = 2</p><p>y = 3</p><p>print(\"Hamming distance between\",x,\"and\",y,\"is\",hamming_distance(x, y))</p><br><p>x = 43</p><p>y = 87</p><p>print(\"\\nHamming distance between\",x,\"and\",y,\"is\",hamming_distance(x, y))</p><br>', 'def hamming_distance(x, y):\r\n    return bin(x ^ y).count(\'1\')\r\n\r\nx = 2 \r\ny = 3\r\nprint(\"Hamming distance between\",x,\"and\",y,\"is\",hamming_distance(x, y))\r\n\r\nx = 43 \r\ny = 87\r\nprint(\"\\nHamming distance between\",x,\"and\",y,\"is\",hamming_distance(x, y))', 2, 0, NULL, '2023-04-05 22:40:55', '2023-08-11 07:07:44', 1),
(390, 'Write a Python program to cap a number within the inclusive range specified by the given boundary values x and y.', 'write-a-python-program-to-cap-a-number-within-the-inclusive-range-specified-by-the-given-boundary-values-x-and-y', '<p>def clamp_number(num, a, b):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return max(min(num, max(a, b)), min(a, b))</p><br><p>print(clamp_number(2, 4, 7))</p><p>print(clamp_number(1, -1, -4))</p><p>print(clamp_number(22, -10, 10))</p><p>print(clamp_number(20, 1, 10))</p><p>print(clamp_number(5, 1, 20))</p><p>print(clamp_number(1, 10, 20))</p><br>', 'def clamp_number(num, a, b):\r\n    return max(min(num, max(a, b)), min(a, b))\r\n\r\nprint(clamp_number(2, 4, 7))\r\nprint(clamp_number(1, -1, -4))\r\nprint(clamp_number(22, -10, 10))\r\nprint(clamp_number(20, 1, 10))\r\nprint(clamp_number(5, 1, 20))\r\nprint(clamp_number(1, 10, 20))', 0, 0, NULL, '2023-04-05 22:41:28', '2023-08-11 07:09:40', 1),
(391, 'Write a Python program to check whether a given number is a Disarium number or an unhappy number.', 'write-a-python-program-to-check-whether-a-given-number-is-a-disarium-number-or-an-unhappy-number', '<p>def is_disarium(num):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; temp = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(len(str(num))):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp += int(str(num)[i]) ** (i + 1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return temp == num</p><br><p>num = 25</p><p>print(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))</p><br><p>num = 89</p><p>print(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))</p><br><p>num = 75</p><p>print(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))</p><br><p>num = 125</p><p>print(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))</p><br><p>num = 518</p><p>print(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))</p><br>', 'def is_disarium(num):\r\n    temp = 0\r\n    for i in range(len(str(num))):\r\n        temp += int(str(num)[i]) ** (i + 1)\r\n    return temp == num\r\n\r\nnum = 25\r\nprint(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))\r\n\r\nnum = 89\r\nprint(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))\r\n\r\nnum = 75\r\nprint(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))\r\n\r\nnum = 125\r\nprint(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num)) \r\n\r\nnum = 518\r\nprint(\"\\nIs\",num,\"is Disarium number?\",is_disarium(num))', 0, 0, NULL, '2023-04-05 22:43:32', '2023-08-11 07:18:10', 1),
(392, 'Write a Python program to check if a given number is a repdigit number or not. If the given number is repdigit return true otherwise false.', 'write-a-python-program-to-check-if-a-given-number-is-a-repdigit-number-or-not-if-the-given-number-is-repdigit-return-true-otherwise-false', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n &lt; 0: return False</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if n == 0: return True</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return len(set(str(n))) == 1</p><br><p>n = 0</p><p>print(\"Original number:\", n)</p><p>print(\"Check the said number is a repdigit number or not!\")</p><p>print(test(n))</p><br><p>n = -1111</p><p>print(\"Original number:\", n)</p><p>print(\"Check the said number is a repdigit number or not!\")</p><p>print(test(n))</p><br><p>n = 1</p><p>print(\"Original number:\", n)</p><p>print(\"Check the said number is a repdigit number or not!\")</p><p>print(test(n))</p><br><p>n = 9999999</p><p>print(\"Original number:\", n)</p><p>print(\"Check the said number is a repdigit number or not!\")</p><p>print(test(n))</p><br>', 'def test(n):\r\n    if n < 0: return False\r\n    if n == 0: return True\r\n    return len(set(str(n))) == 1\r\n\r\nn = 0\r\nprint(\"Original number:\", n)\r\nprint(\"Check the said number is a repdigit number or not!\")\r\nprint(test(n))\r\n\r\nn = -1111\r\nprint(\"Original number:\", n)\r\nprint(\"Check the said number is a repdigit number or not!\")\r\nprint(test(n))\r\n\r\nn = 1\r\nprint(\"Original number:\", n)\r\nprint(\"Check the said number is a repdigit number or not!\")\r\nprint(test(n))\r\n\r\nn = 9999999\r\nprint(\"Original number:\", n)\r\nprint(\"Check the said number is a repdigit number or not!\")\r\nprint(test(n))', 2, 0, NULL, '2023-04-05 22:44:30', '2023-08-11 07:20:22', 1);
INSERT INTO `questions_questions` (`id`, `title`, `slug`, `description`, `solution`, `search_count`, `is_input_required`, `deleted_at`, `created_at`, `updated_at`, `learn_or_practice`) VALUES
(393, 'Write a Python program to check if a given number is a Harshad number or not. Return True if the number is Harshad otherwise False.', 'write-a-python-program-to-check-if-a-given-number-is-a-harshad-number-or-not-return-true-if-the-number-is-harshad-otherwise-false', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (n&gt;0):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = 0</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b = n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while b &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = a +&nbsp; b % 10</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b = b // 10</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return not n % a</p><br><p>n = 666</p><p>print(\"Original number:\", n)</p><p>print(\"Check the said number is a Harshad number or not!\")</p><p>print(test(n))</p><br><p>n = 11</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Check the said number is a Harshad number or not!\")</p><p>print(test(n))</p><br><p>n = -144</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Check the said number is a Harshad number or not!\")</p><p>print(test(n))</p><br><p>n = 200</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Check the said number is a Harshad number or not!\")</p><p>print(test(n))</p><br>', 'def test(n):\r\n    if (n>0):\r\n        a = 0\r\n        b = n\r\n        while b > 0:\r\n            a = a +  b % 10\r\n            b = b // 10\r\n        return not n % a\r\n\r\nn = 666\r\nprint(\"Original number:\", n)\r\nprint(\"Check the said number is a Harshad number or not!\")\r\nprint(test(n))\r\n\r\nn = 11\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Check the said number is a Harshad number or not!\")\r\nprint(test(n))\r\n\r\nn = -144\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Check the said number is a Harshad number or not!\")\r\nprint(test(n))\r\n\r\nn = 200\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Check the said number is a Harshad number or not!\")\r\nprint(test(n))', 2, 0, NULL, '2023-04-05 22:47:11', '2023-08-11 07:24:44', 1),
(394, 'Write a Python program that accepts an integer number with distinct digits and displays the next number containing only distinct digits.', 'write-a-python-program-that-accepts-an-integer-number-with-distinct-digits-and-displays-the-next-number-containing-only-distinct-digits', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; n += 1</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if len(set(str(n))) == len(str(n)):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return test(n)</p><br><p>n = 12345</p><p>print(\"Original number:\", n)</p><p>print(\"Next number containing only distinct digits!\")</p><p>print(test(n))</p><br><p>n = 99999</p><p>print(\"Original number:\", n)</p><p>print(\"Next number containing only distinct digits!\")</p><p>print(test(n))</p><br><p>n = 1</p><p>print(\"Original number:\", n)</p><p>print(\"Next number containing only distinct digits!\")</p><p>print(test(n))</p><br><p>n = 100</p><p>print(\"Original number:\", n)</p><p>print(\"Next number containing only distinct digits!\")</p><p>print(test(n))</p><br>', 'def test(n):\r\n    n += 1\r\n    if len(set(str(n))) == len(str(n)):\r\n        return n\r\n    return test(n)\r\n\r\nn = 12345\r\nprint(\"Original number:\", n)\r\nprint(\"Next number containing only distinct digits!\") \r\nprint(test(n))\r\n\r\nn = 99999\r\nprint(\"Original number:\", n)\r\nprint(\"Next number containing only distinct digits!\") \r\nprint(test(n))\r\n\r\nn = 1\r\nprint(\"Original number:\", n)\r\nprint(\"Next number containing only distinct digits!\") \r\nprint(test(n))\r\n\r\nn = 100\r\nprint(\"Original number:\", n)\r\nprint(\"Next number containing only distinct digits!\") \r\nprint(test(n))', 2, 0, NULL, '2023-04-05 22:52:09', '2023-08-11 07:29:44', 1),
(395, 'Write a Python program that checks whether the absolute difference between two consecutive digits is two or not. Return true otherwise false.', 'write-a-python-program-that-checks-whether-the-absolute-difference-between-two-consecutive-digits-is-two-or-not-return-true-otherwise-false', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return all(abs(int(x) - int(y)) == 2 for x, y in zip(str(n), str(n)[1:]))</p><br><p>n = 666</p><p>print(\"Original number:\", n)</p><p>print(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")</p><p>print(test(n))</p><br><p>n = 3579</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")</p><p>print(test(n))</p><br><p>n = 2468</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")</p><p>print(test(n))</p><br><p>n = 20420</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")</p><p>print(test(n))</p><br>', 'def test(n):\r\n    return all(abs(int(x) - int(y)) == 2 for x, y in zip(str(n), str(n)[1:]))\r\n\r\nn = 666\r\nprint(\"Original number:\", n)\r\nprint(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")\r\nprint(test(n))\r\n\r\nn = 3579\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")\r\nprint(test(n))\r\n\r\nn = 2468\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")\r\nprint(test(n))\r\n\r\nn = 20420\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Is absolute difference between two consecutive digits of the said number is 2 or not?\")\r\nprint(test(n))', 2, 0, NULL, '2023-04-05 22:53:44', '2023-08-11 07:32:19', 1),
(396, 'Write a Python program that takes an integer and rearranges the digits to create two maximum and minimum numbers.', 'write-a-python-program-that-takes-an-integer-and-rearranges-the-digits-to-create-two-maximum-and-minimum-numbers', '<p>def test(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; temp = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for e in str(n):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp.append(e)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_num = \"\".join(sorted(temp)[::-1])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; min_num = \"\".join(sorted(temp))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return int(max_num), int(min_num)</p><br><p>n = 1254</p><p>print(\"Original number:\", n)</p><p>print(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")</p><p>print(\"Maximum and Minimum Numbers:\",test(n))</p><br><p>n = 6</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")</p><p>print(\"Maximum and Minimum Numbers:\",test(n))</p><br><p>n = 1000</p><p>print(\"\\nOriginal number:\", n)</p><p>print(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")</p><p>print(\"Maximum and Minimum Numbers:\",test(n))</p><br>', 'def test(n):\r\n    temp = []\r\n    for e in str(n):\r\n        temp.append(e)\r\n        max_num = \"\".join(sorted(temp)[::-1])\r\n        min_num = \"\".join(sorted(temp))\r\n    return int(max_num), int(min_num)\r\n\r\nn = 1254\r\nprint(\"Original number:\", n)\r\nprint(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")\r\nprint(\"Maximum and Minimum Numbers:\",test(n))\r\n\r\nn = 6\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")\r\nprint(\"Maximum and Minimum Numbers:\",test(n))\r\n\r\nn = 1000\r\nprint(\"\\nOriginal number:\", n)\r\nprint(\"Rearrange the digits of the said number to get Maximum and Minimum numbers:\")\r\nprint(\"Maximum and Minimum Numbers:\",test(n))', 2, 0, NULL, '2023-04-05 22:54:49', '2023-08-11 07:36:39', 1),
(397, 'Write a Python program to calculate the sum of all prime numbers in a given list of positive integers.', 'write-a-python-program-to-calculate-the-sum-of-all-prime-numbers-in-a-given-list-of-positive-integers', '<p>def test(nums):</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if len(nums) &gt; 0:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return sum(list(filter(lambda x: (x &gt; 1 and all(x % y != 0 for y in range(2, x))), nums)))</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return \"Empty list!\"</p><br><p>nums = [1, 3, 4, 7, 9]</p><p>print(\"Original list:\")</p><p>print(nums)</p><p>print(\"Sum of all prime numbers in the said list of numbers:\")</p><p>print(test(nums))</p><br><p>nums = []</p><p>print(\"\\nOriginal list:\")</p><p>print(nums)</p><p>print(\"Sum of all prime numbers in the said list of numbers:\")</p><p>print(test(nums))</p><br><p>nums = [11, 37, 444]</p><p>print(\"\\nOriginal list:\")</p><p>print(nums)</p><p>print(\"Sum of all prime numbers in the said list of numbers:\")</p><p>print(test(nums))</p><br>', 'def test(nums):\r\n    if len(nums) > 0:\r\n        return sum(list(filter(lambda x: (x > 1 and all(x % y != 0 for y in range(2, x))), nums))) \r\n    return \"Empty list!\"\r\n\r\nnums = [1, 3, 4, 7, 9]\r\nprint(\"Original list:\")\r\nprint(nums)\r\nprint(\"Sum of all prime numbers in the said list of numbers:\")\r\nprint(test(nums))\r\n\r\nnums = []\r\nprint(\"\\nOriginal list:\")\r\nprint(nums)\r\nprint(\"Sum of all prime numbers in the said list of numbers:\")\r\nprint(test(nums))\r\n\r\nnums = [11, 37, 444]\r\nprint(\"\\nOriginal list:\")\r\nprint(nums)\r\nprint(\"Sum of all prime numbers in the said list of numbers:\")\r\nprint(test(nums))', 0, 0, NULL, '2023-04-05 22:56:29', '2023-08-11 07:39:48', 1);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `auth_group`
--
ALTER TABLE `auth_group`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `auth_group_permissions`
--
ALTER TABLE `auth_group_permissions`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  ADD KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`);

--
-- Indexes for table `auth_permission`
--
ALTER TABLE `auth_permission`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`);

--
-- Indexes for table `auth_user`
--
ALTER TABLE `auth_user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`);

--
-- Indexes for table `auth_user_groups`
--
ALTER TABLE `auth_user_groups`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `auth_user_groups_user_id_group_id_94350c0c_uniq` (`user_id`,`group_id`),
  ADD KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`);

--
-- Indexes for table `auth_user_user_permissions`
--
ALTER TABLE `auth_user_user_permissions`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq` (`user_id`,`permission_id`),
  ADD KEY `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` (`permission_id`);

--
-- Indexes for table `django_admin_log`
--
ALTER TABLE `django_admin_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  ADD KEY `django_admin_log_user_id_c564eba6_fk` (`user_id`);

--
-- Indexes for table `django_content_type`
--
ALTER TABLE `django_content_type`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`);

--
-- Indexes for table `django_migrations`
--
ALTER TABLE `django_migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `django_session`
--
ALTER TABLE `django_session`
  ADD PRIMARY KEY (`session_key`),
  ADD KEY `django_session_expire_date_a5c62663` (`expire_date`);

--
-- Indexes for table `questions_learn`
--
ALTER TABLE `questions_learn`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `questions_questions`
--
ALTER TABLE `questions_questions`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `auth_group`
--
ALTER TABLE `auth_group`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `auth_group_permissions`
--
ALTER TABLE `auth_group_permissions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `auth_permission`
--
ALTER TABLE `auth_permission`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- AUTO_INCREMENT for table `auth_user`
--
ALTER TABLE `auth_user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `auth_user_groups`
--
ALTER TABLE `auth_user_groups`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `auth_user_user_permissions`
--
ALTER TABLE `auth_user_user_permissions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `django_admin_log`
--
ALTER TABLE `django_admin_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=418;

--
-- AUTO_INCREMENT for table `django_content_type`
--
ALTER TABLE `django_content_type`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `django_migrations`
--
ALTER TABLE `django_migrations`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;

--
-- AUTO_INCREMENT for table `questions_learn`
--
ALTER TABLE `questions_learn`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `questions_questions`
--
ALTER TABLE `questions_questions`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=629;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `auth_group_permissions`
--
ALTER TABLE `auth_group_permissions`
  ADD CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  ADD CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`);

--
-- Constraints for table `auth_permission`
--
ALTER TABLE `auth_permission`
  ADD CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`);

--
-- Constraints for table `auth_user_groups`
--
ALTER TABLE `auth_user_groups`
  ADD CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  ADD CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);

--
-- Constraints for table `auth_user_user_permissions`
--
ALTER TABLE `auth_user_user_permissions`
  ADD CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  ADD CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);

--
-- Constraints for table `django_admin_log`
--
ALTER TABLE `django_admin_log`
  ADD CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  ADD CONSTRAINT `django_admin_log_user_id_c564eba6_fk` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
